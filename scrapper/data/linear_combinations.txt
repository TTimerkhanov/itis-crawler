Numerical & Scientific Computing with Python: Linear Combinations Numerical Python Course Numerical Programming NumPy IntroductionCreate Numpy ArraysData Type Object, dtypeNumerical Operations on Numpy ArraysChanging the Dimensions of ArraysPython, Numpy and ProbabilityWeighted Choices and Weighted SamplesCreation of Synthetical Test DataBoolean Masking of ArraysMatrix ArithmeticReading and Writing ndarraysMatplotlib IntroductionSpines and TicksLegends and AnnotationsMultiple Figures and AxesHistogramsContour PlotsPython Image Processing TutorialImage Processing TechniquesPandas TutorialPandas DataFramesPandas Data FilesDealing with NaNBinning DataPandas Tutorial Continuation: multi-level indexingData Visualization with Pandas and PythonPython, Date and TimePython, Pandas and TimeseriesLinear Combinations Python In Greek mythology, Python is the name of a a huge serpent and sometimes a dragon. Python had been killed by the god Apollo at Delphi. Python was created out of the slime and mud left after the great flood. He was appointed by Gaia (Mother Earth) to guard the oracle of Delphi, known as Pytho. The programming language Python has not been created out of slime and mud but out of the programming language ABC. It has been devised by a Dutch programmer, named Guido van Rossum, in Amsterdam. Origins of Python Guido van Rossum wrote the following about the origins of Python in a foreword for the book "Programming Python" by Mark Lutz in 1996: "Over six years ago, in December 1989, I was looking for a "hobby" programming project that would keep me occupied during the week around Christmas. My office (a government-run research lab in Amsterdam) would be closed, but I had a home computer, and not much else on my hands. I decided to write an interpreter for the new scripting language I had been thinking about lately: a descendant of ABC that would appeal to Unix/C hackers. I chose Python as a working title for the project, being in a slightly irreverent mood (and a big fan of Monty Python's Flying Circus)." This website is free of annoying ads. We want to keep it like this. You can help with your donation: The need for donations Bernd Klein on Facebook Search this website: Classroom Training Courses This website contains a free and extensive online tutorial by Bernd Klein, using material from his classroom Python training courses. If you are interested in an instructor-led classroom training course, you may have a look at the Python classes by Bernd Klein at Bodenseo. © kabliczech - Fotolia.com Quote of the Day:"If you want to accomplish something in the world, idealism is not enough - you need to choose a method that works to achieve the goal." (Richard Stallmann) If you have the choice working with Python 2 or Python 3, we recomend to switch to Python 3! You can read our Python Tutorial to see what the differences are. Data Protection Declaration Data Protection Declaration Previous Chapter: Python, Pandas and Timeseries Linear Combination Definitions A linear combination in mathematics is an expression constructed from a set of terms by multiplying each term by a constant and adding the results. Example of a linear combination: a &middot x + b &middot y is a linear combination of x and y with a and b constants. Generally; p = λ1 · x1 + λ2 · x2 … λn · xn p is the scalar product of the values x1, x2 … xn and λ1, λ2 … λn are called scalars. In most applications x1, x2 … xn are vectors and the lambdas are integers or real numbers. (For those, who prefer it mor formally: x1, x2 … xn ∈ V and V is a vector space, and λ1, λ2 … λn ∈ K with K being a field) Linear Combinations in Python The vector y = (3.21, 1.77, 3.65) can be easily written as a linear combination of the unit vectors (0,0,1), (0,1,0) and (1,0,0): (3.21, 1.77, 3.65) = 3.21 · (1,0,0) + 1.77 (0,1,0) + 3.65 · (0,0,1) We can do the calculation with Python, using the module numpy: >>> import numpy as np >>> x = np.array([[0,0,1],[0,1,0],[1,0,0]]) >>> y = ([3.65,1.55,3.42]) >>> scalars = np.linalg.solve(x,y) >>> scalars array([ 3.42, 1.55, 3.65]) >>> The previous example was very easy, because we could work out the result in our head. What about writing our vector y = (3.21, 1.77, 3.65) as a linear combination of the vectors (0,1,1), (1,1,0) and (1,0,1)? It looks like this in Python: >>> import numpy as np >>> x = np.array([[0,1,1],[1,1,0],[1,0,1]]) >>> y = ([3.65,1.55,3.42]) >>> scalars = np.linalg.solve(x,y) >>> scalars array([ 0.66, 0.89, 2.76]) >>> Another Example Any integer between -40 and 40 can be written as a linear combination of 1,3,9,27 with scalars being elements of the set {-1,0,1}. For example: 7 = 1 · 1 + (-1) · 3 + 1 · 9 + 0 · 27 We can calculate these scalars with Python. First we need a generator generating all the possible scalar combinations. If you have problems in understanding the concept of a generator, we recommend the chapter "Iterators and Generators" of our tutorial. def factors_set(): factors_set = ( (i,j,k,l) for i in [-1,0,1] for j in [-1,0,1] for k in [-1,0,1] for l in [-1,0,1]) for factor in factors_set: yield factor We will use the memoize() technique (see chapter "Memoization and Decorators" of our tutorial) to memorize previous results: def memoize(f): results = {} def helper(n): if n not in results: results[n] = f(n) return results[n] return helper Finally, in our function linear_combination() we check every scalar tuple, if it can create the value n: @memoize def linear_combination(n): """ returns the tuple (i,j,k,l) satisfying n = i*1 + j*3 + k*9 + l*27 """ weighs = (1,3,9,27) for factors in factors_set(): sum = 0 for i in range(len(factors)): sum += factors[i] * weighs[i] if sum == n: return factors Putting it all together results in the following script: def factors_set(): factors_set = ( (i,j,k,l) for i in [-1,0,1] for j in [-1,0,1] for k in [-1,0,1] for l in [-1,0,1]) for factor in factors_set: yield factor def memoize(f): results = {} def helper(n): if n not in results: results[n] = f(n) return results[n] return helper @memoize def linear_combination(n): """ returns the tuple (i,j,k,l) satisfying n = i*1 + j*3 + k*9 + l*27 """ weighs = (1,3,9,27) for factors in factors_set(): sum = 0 for i in range(len(factors)): sum += factors[i] * weighs[i] if sum == n: return factors # calculate the linear combinations of the first 10 positive integers: for i in range(1,11): print(linear_combination(i)) Calling this program returns the following results: (1, 0, 0, 0) (-1, 1, 0, 0) (0, 1, 0, 0) (1, 1, 0, 0) (-1, -1, 1, 0) (0, -1, 1, 0) (1, -1, 1, 0) (-1, 0, 1, 0) (0, 0, 1, 0) (1, 0, 1, 0) Previous Chapter: Python, Pandas and Timeseries © 2011 - 2018, Bernd Klein, Bodenseo; Design by Denise Mitchinson adapted for python-course.eu by Bernd Klein