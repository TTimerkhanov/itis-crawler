Python Advanced: Network Scanner in Python Python Advanced Course Topics Advanced Topics Introduction into the sys modulePython and the ShellForks and Forking in PythonIntroduction into ThreadsPipe, Pipes and "99 Bottles of Beer"Python Network ScannerGraph Theory and Graphs in PythonGraphs: PyGraphGraphsA Python Class for Polynomial FunctionsCurrying in PythonFinite State Machine in PythonTuring Machine in PythonLevenshtein DistanceExample for recursive Programming: Towers of HanoiMastermind / Bulls and CowsCreating dynamic websites with WSGIDynamic websites with mod_pythonDynamic websites with PylonsPython, SQL, MySQL and SQLitePython Scores Python In Greek mythology, Python is the name of a a huge serpent and sometimes a dragon. Python had been killed by the god Apollo at Delphi. Python was created out of the slime and mud left after the great flood. He was appointed by Gaia (Mother Earth) to guard the oracle of Delphi, known as Pytho. The programming language Python has not been created out of slime and mud but out of the programming language ABC. It has been devised by a Dutch programmer, named Guido van Rossum, in Amsterdam. Origins of Python Guido van Rossum wrote the following about the origins of Python in a foreword for the book "Programming Python" by Mark Lutz in 1996: "Over six years ago, in December 1989, I was looking for a "hobby" programming project that would keep me occupied during the week around Christmas. My office (a government-run research lab in Amsterdam) would be closed, but I had a home computer, and not much else on my hands. I decided to write an interpreter for the new scripting language I had been thinking about lately: a descendant of ABC that would appeal to Unix/C hackers. I chose Python as a working title for the project, being in a slightly irreverent mood (and a big fan of Monty Python's Flying Circus)." This website is free of annoying ads. We want to keep it like this. You can help with your donation: The need for donations Bernd Klein on Facebook Search this website: Classroom Training Courses This website contains a free and extensive online tutorial by Bernd Klein, using material from his classroom Python training courses. If you are interested in an instructor-led classroom training course, you may have a look at the Python classes by Bernd Klein at Bodenseo. © kabliczech - Fotolia.com Quote of the Day:We can only see a short distance ahead, but we can see plenty there that needs to be done. Alan Turing If you have the choice working with Python 2 or Python 3, we recomend to switch to Python 3! You can read our Python Tutorial to see what the differences are. Data Protection Declaration Data Protection Declaration Previous Chapter: Pipe, Pipes and "99 Bottles of Beer" Next Chapter: Graph Theory and Graphs in Python Python Network Scanner Introduction When it comes to penetration testing or just a simple analysis the network scanner is one major tool for analysing which hosts are available on the local network. Today there exist lots of tools, but depending on what you want to do it is a good idea to write your own analysis and penetration testing tools. In this case we start with a simple network scanner, which lists the available hosts on your network. To get this done there are two (basically some more but we stick to the two simplest ones) possibilities: ICMP Echo Request TCP Scan ICMP Echo request This is well known by using the ping command. An ICMP packet is send to the specified (by IP address) host and if an ICMP echo is received, it is clear that the host is online. This can be used as a network scanner by just trying all available IP addresses. Enabling multithreading delivers great performance improvements. I do not want to go into further detail here because this can be realised programmatically simple: for host in available_ip_addresses: print(ping -i 1 host) That's basically it. Iterate through all available IP addresses ping them and check the reply. This relies on the assumption that network devices have ICMP enabled. Personal firewalls or general firewalls are often set to so called "stealth mode" which means they do not react to ICMP echo reqests. In this case no echo is received and it looks like the host is down. TCP Scan To overcome this, the TCP scan can help. This relies on the assumption that hosts on the network have open ports where a client can connect to (see 3-Way-Handshake). Here we have to guess ports which may be open. This is mainly dependend on the OS but also on the settings. It is likely that some ports are open but not guaranteed. The following ports may be open dependent on the operating systems: mac = [22, 445, 548, 631]linux = [20, 21, 22, 23, 25, 80, 111, 443, 445, 631, 993, 995]windows = [135, 137, 138, 139, 445]aios = [49152, 62078] # Apple iOS (ios is also the name for Cisco's OS running on their products) When now writing a network scanner we can iterate over all the possible IP addresses on the network and for every IP we try to connect to one of the ports. If the connection was successful (ACK received) we know that this host is available at the given IP address. To check wether a connection succeeds or fails we can do the following in Python: import socket socket_obj = socket.socket(socket.AF_INET,socket.SOCK_STREAM) socket.setdefaulttimeout(1) result = socket_obj.connect_ex((addr,port)) socket_obj.close() socket_obj.connect_ex((addr,port)) returns 0 if the connection succeeds, otherwise it delivers an error indicator. This is basically all the "magic" behind a network scanner. The provided network scanner can simply be used by the following command: python avail_hosts_tcp_scan.py <networkaddress> <fromhost> <tohost> <hosttypes> python avail_hosts_tcp_scan.py 192.168.0.1 1 10 windows hosttypes are the above mentioned systems which have different default ports opened, use: windows, linux, mac, aios, unspec unspec uses the complete port range. Copyright by Johannes Kinzig, Spektrum Engineering - IT-Security | Embedded | Software Previous Chapter: Pipe, Pipes and "99 Bottles of Beer" Next Chapter: Graph Theory and Graphs in Python © 2011 - 2018, Bernd Klein, Bodenseo; Design by Denise Mitchinson adapted for python-course.eu by Bernd Klein