Machine Learning with Python: Machine Learning Terminology Python Machine Learning Tutorial Machine Learning Machine Learning Terminologyk-nearest Neighbor ClassifierNeural Networks from Scratch in PythonNeural Network in Python using NumypyBackpropagation in Neural NetworksConfusion MatrixTraining and Testing with MNISTDropout Neural NetworksNeural Networks with ScikitMachine Learning with Scikit and PythonIntroduction Naive Bayes ClassifierNaive Bayes Classifier with ScikitIntroduction into Text Classification using Naive BayesPython Implementation of Text ClassificationDecision TreesRegression TreesRandom ForestsBoosting AlgorithmPrincipal Component AnalysisLinear Discriminant AnalysisExpectation Maximization and Gaussian Mixture ModelIntroduction into TensorFlow This website is created by: Python Training Courses in Toronto, Canada On site trainings in Europe, Canada and the US. This website is free of annoying ads. We want to keep it like this. You can help with your donation: The need for donations Bernd Klein on Facebook Search this website: Classroom Training Courses This website contains a free and extensive online tutorial by Bernd Klein, using material from his classroom Python training courses. If you are interested in an instructor-led classroom training course, you may have a look at the Python classes by Bernd Klein at Bodenseo. © kabliczech - Fotolia.com Quote of the Day:We can only see a short distance ahead, but we can see plenty there that needs to be done. Alan Turing If you have the choice working with Python 2 or Python 3, we recomend to switch to Python 3! You can read our Python Tutorial to see what the differences are. Data Protection Declaration Data Protection Declaration Next Chapter: k-nearest Neighbor Classifier Machine Learning Terminology ClassifierA program or a function which maps from unlabeled instances to classes is called a classifier. Confusion MatrixA confusion matrix, also called a contingeny table or error matrix, is used to visualize the performance of a classifier. The columns of the matrix represent the instances of the predicted classes and the rows represent the instances of the actual class. (Note: It can be the other way around as well.) In the case of binary classification the table has 2 rows and 2 columns. Example: ConfusionMatrix Predicted classes male female Actual classes male 42 8 female 18 32 This means that the classifier correctly predicted a male person in 42 cases and it wrongly predicted 8 male instances as female. It correctly predicted 32 instances as female. 18 cases had been wrongly predicted as male instead of female. Accuracy (error rate)Accuracy is a statistical measure which is defined as the quotient of correct predictions made by a classifier divided by the sum of predictions made by the classifier. The classifier in our previous example predicted correctly predicted 42 male instances and 32 female instance. Therefore, the accuracy can be calculated by: accuracy = $(42 + 32) / (42 + 8 + 18 + 32)$ which is 0.72 Let's assume we have a classifier, which always predicts "female". We have an accuracy of 50 % in this case. ConfusionMatrix Predicted classes male female Actual classes male 0 50 female 0 50 We will demonstrate the so-called accuracy paradox. A spam recogition classifier is described by the following confusion matrix: ConfusionMatrix Predicted classes spam ham Actual classes spam 4 1 ham 4 91 The accuracy of this classifier is (4 + 91) / 100, i.e. 95 %. The following classifier predicts solely "ham" and has the same accuracy. ConfusionMatrix Predicted classes spam ham Actual classes spam 0 5 ham 0 95 The accuracy of this classifier is 95%, even though it is not capable of recognizing any spam at all. Precision and Recall ConfusionMatrix Predicted classes negative positive Actual classes negative TN FP positive FN TP Accuracy: $(TN + TP)/(TN + TP + FN + FP)$ Precision: $TP / (TP + FP)$ Recall: $ TP / (TP + FN)$ Supervised learningThe machine learning program is both given the input data and the corresponding labelling. This means that the learn data has to be labelled by a human being beforehand. Unsupervised learningNo labels are provided to the learning algorithm. The algorithm has to figure out the a clustering of the input data. Reinforcement learningA computer program dynamically interacts with its environment. This means that the program receives positive and/or negative feedback to improve it performance. Next Chapter: k-nearest Neighbor Classifier © 2011 - 2018, Bernd Klein, Bodenseo; Design by Denise Mitchinson adapted for python-course.eu by Bernd Klein