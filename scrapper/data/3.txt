Python2 Tutorial: Interactive Mode Python Course Python 2 Tutorial History and Philosophy of PythonWhy Python?Interactive ModeExecute a ScriptStructuring with IndentationData Types and VariablesOperatorsinput and raw_input via the keyboardConditional StatementsWhile LoopsFor LoopsFormatted outputOutput with PrintSequential Data TypesList ManipulationDictionariesSets and Frozen SetsShallow and Deep CopyFunctionsRecursion and Recursive FunctionsTests, DocTests, UnitTestsDecoratorsMemoization with DecoratorsPassing ArgumentsNamespacesGlobal vs. Local VariablesFile ManagementModular Programming and ModulesIntroduction in Regular ExpressionsRegular Expressions, AdvancedLambda Operator, Filter, Reduce and MapList ComprehensionGeneratorsException HandlingObject Oriented ProgrammingInheritance ExampleSlotsClasses and Class CreationRoad to MetaclassesMetaclassesMetaclass Example: Count Function CallsAbstract Classes Python In Greek mythology, Python is the name of a a huge serpent and sometimes a dragon. Python had been killed by the god Apollo at Delphi. Python was created out of the slime and mud left after the great flood. He was appointed by Gaia (Mother Earth) to guard the oracle of Delphi, known as Pytho. The programming language Python has not been created out of slime and mud but out of the programming language ABC. It has been devised by a Dutch programmer, named Guido van Rossum, in Amsterdam. Origins of Python Guido van Rossum wrote the following about the origins of Python in a foreword for the book "Programming Python" by Mark Lutz in 1996: "Over six years ago, in December 1989, I was looking for a "hobby" programming project that would keep me occupied during the week around Christmas. My office (a government-run research lab in Amsterdam) would be closed, but I had a home computer, and not much else on my hands. I decided to write an interpreter for the new scripting language I had been thinking about lately: a descendant of ABC that would appeal to Unix/C hackers. I chose Python as a working title for the project, being in a slightly irreverent mood (and a big fan of Monty Python's Flying Circus)." This website is free of annoying ads. We want to keep it like this. You can help with your donation: The need for donations Bernd Klein on Facebook Search this website: This topic in German / Deutsche Übersetzung: Der InterpreterPython 2.7This tutorial deals with Python Version 2.7This chapter from our course is available in a version for Python3: Interactive ModeClassroom Training Courses This website contains a free and extensive online tutorial by Bernd Klein, using material from his classroom Python training courses. If you are interested in an instructor-led classroom training course, you may have a look at the Python classes by Bernd Klein at Bodenseo. © kabliczech - Fotolia.com Quote of the Day:Man is the best computer we can put aboard a spacecraft...and the only one that can be mass produced with unskilled labor. (Wernher von Braun) If you have the choice working with Python 2 or Python 3, we recomend to switch to Python 3! You can read our Python Tutorial to see what the differences are. Data Protection Declaration Data Protection Declaration Previous Chapter: Why Python? Next Chapter: Execute a Script Using the Python Interpreter With the Python interactive interpreter it is easy to check Python commands. The Python interpreter can be invoked by typing the command "python" without any parameter followed by the "return" key at the shell prompt: python Python comes back with the following information: Python 2.5.2 (r252:60911, Oct 5 2008, 19:29:17) [GCC 4.3.2] on linux2 Type "help", "copyright", "credits" or "license" for more information. >>> Once the Python interpreter is started, you can issue any command at the command prompt ">>>". The first thing we will do is write the mandatory "Hello World" statement: >>> print "Hello World" Hello World It couldn't have been easier, could it? Oh yes, it can be written in a even simpler way. In the interactive Python interpretor the print is not necessary: >>> "Hello World" 'Hello World' >>> 3 3 >>> In the following example we use the interpreter as a simple calculator by typing an arithmetic expression: >>> 4.567 * 8.323 * 17 646.18939699999999 >>> You might be surprised, if you type in the following: >>> 12 / 7 1 >>> Python assumes that you are interested in integer division, because both divisor and dividend are integers. So the result is an integer again. The easiest way to get an exact result is by making one of the values a float by adding a ".0": >>> 12.0 / 7 1.7142857142857142 >>> Alternatively you can cast one or both arguments: >>> float(12) / 7 1.7142857142857142 >>> Python follows the usual order of operation in expression. The standard order of operations is expressed in the following enumeration: exponents and roots multiplication and division addition and subtraction This means that we don't need parenthesis in the expression "3 + (2 * 4): >>> 3 + 2 * 4 11 >>> The most recent output value is automatically stored by the interpreter in a special variable with the name "_". So we can print the output from the recent example again by typing an underscore after the prompt: >>> _ 11 >>> The underscore can be used in other expressions like any other variable: >>> _ * 3 33 >>> To close the Python interactive interpreter in Linux type Ctrl-D Previous Chapter: Why Python? Next Chapter: Execute a Script © 2011 - 2018, Bernd Klein, Bodenseo; Design by Denise Mitchinson adapted for python-course.eu by Bernd Klein