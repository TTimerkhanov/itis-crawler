GUI Programming with Python: Dialogs in Tkinter Python Tkinter Course Tkinter Tutorial Saying Hello with LabelsMessage WidgetButtonsVariable ClassesRadiobuttonsCheckboxesEntry WidgetsCanvas WidgetsSlidersText WidgetDialogsLayout ManagementBulls and Cows / Mastermind in TKCreating MenusEvents and Binds This website is created by: Python Training Courses in Toronto, Canada On site trainings in Europe, Canada and the US. Definition A dialogue can be a conversation between two or more persons; particularly, a formal conservation in theatrical performances or in scholastic exercises. It is also a written composition in which two or more persons are represented as conversing or reasoning on some topic; as, the Dialogues of Plato. In Tkinter or Tk (or more generally in GUI programming) a dialogue is the interaction between the user of the GUI and the program through special widgets. Alfred Hitchcock wrote about a different kind of dialogue: "Dialogue should simply be a sound among other sounds, just something that comes out of the mouths of people whose eyes tell the story in visual terms." (Alfred Hitchcock) This website is free of annoying ads. We want to keep it like this. You can help with your donation: The need for donations Bernd Klein on Facebook Search this website: This topic in German / Deutsche Übersetzung: Dialoge in Tkinter Classroom Trainings This website contains a free and extensive online tutorial by Bernd Klein, using material from his live Python classes. If you are interested in an instructor-led classroom training course, you may have a look at the Python and Tkinter courses by Bernd Klein at Bodenseo. You can attend one of his Python courses in Paris, London, Toronto, Berlin, Munich, Hamburg, Amsterdam, Den Haag (The Hague) or Lake Constance / Zurich. It is also possible to book an on-site training course at your company or institute. Quote of the Day: "I think it is inevitable that people program poorly. Training will not substantially help matters. We have to learn to live with it." (Alan Perlis) Graphical User Interface A graphical user interface (GUI) is a type of user interface that allows users to interact with electronic devices in a graphical way, i.e. with images, rather than text commands. Originally interactive user interfaces to computers were not graphical, they were text oriented and usually consisted of commands, which had to be remembered. The DOS operating system from Microsoft and the Bourne shell under Linux are examples of such user-computer interfaces. Data Protection Declaration Data Protection Declaration Previous Chapter: Text Widget Next Chapter: Layout Management Dialogues and Message Boxes Introduction Tkinter (and TK of course) provides a set of dialogues (dialogs in American English spelling), which can be used to display message boxes, showing warning or errors, or widgets to select files and colours. There are also simple dialogues, asking the user to enter string, integers or float numbers. Let's look at a typical GUI Session with Dialogues and Message boxes. There might be a button starting the dialogue, like the "quit" button in the following window: Pushing the "quit" button raises the Verify window: Let's assume that we want to warn users that the "quit" functionality is not yet implemented. In this case we can use the warning message to inform the user, if he or she pushes the "yes" button: If somebody types the "No" button, the "Cancel" message box is raised: Let's go back to our first Dialogue with the "quit" and "answer" buttons. If the "Answer" functionality is not implemented, it might be useful to use the following error message box: Python script, which implements the previous dialogue widges: from Tkinter import * from tkMessageBox import * def answer(): showerror("Answer", "Sorry, no answer available") def callback(): if askyesno('Verify', 'Really quit?'): showwarning('Yes', 'Not yet implemented') else: showinfo('No', 'Quit has been cancelled') Button(text='Quit', command=callback).pack(fill=X) Button(text='Answer', command=answer).pack(fill=X) mainloop() Message Boxes The message dialogues are provided by the tkMessageBox module. The tkMessageBox consists of the following functions, which correspond to dialog windows: askokcancel(title=None, message=None, **options) Ask if operation should proceed; return true if the answer is ok askquestion(title=None, message=None, **options)Ask a question askretrycancel(title=None, message=None, **options) Ask if operation should be retried; return true if the answer is yes askyesno(title=None, message=None, **options) Ask a question; return true if the answer is yes askyesnocancel(title=None, message=None, **options) Ask a question; return true if the answer is yes, None if cancelled. showerror(title=None, message=None, **options)Show an error message showinfo(title=None, message=None, **options)Show an info message showwarning(title=None, message=None, **options)Show a warning message Open File Dialogue There is hardly any serious application, which doesn't need a way to read from a file or write to a file. Furthermore, such an application might have to choose a directory. Tkinter provides the module tkFileDialog for these purposes. from Tkinter import * from tkFileDialog import askopenfilename def callback(): name= askopenfilename() print name errmsg = 'Error!' Button(text='File Open', command=callback).pack(fill=X) mainloop() The code above creates a window with a single button with the text "File Open". If the button is pushed, the following window appears: The look-and-feel of the file-open-dialog depends on the GUI of the operating system. The above example was created using a gnome desktop under Linux. If we start the same program under Windows 7, it looks like this: Choosing a Colour There are applications where the user should have the possibility to select a colour. Tkinter provides a pop-up menu to choose a colour. To this purpose we have to import the tkColorChooser module and have to use the method askColor: result = tkColorChooser.askColor ( color, option=value, ...) If the user clicks the OK button on the pop-up window, respectively, the return value of askColor() is a tuple with two elements, both a representation of the chosen colour, e.g. ((106, 150, 98), '#6a9662') The first element return[0] is a tuple (R, G, B) with the RGB representation in decimal values (from 0 to 255). The second element return[1] is a hexadecimal representation of the chosen colour. If the user clicks "Cancel" the method returns the tuple (None, None). The optional keyword parameters are: color The variable color is used to set the default colour to be displayed. If color is not set, the initial colour will be grey. title The text assigned to the variable title will appear in the pop-up window's title area. The default title is "Color". parent Make the pop-up window appear over window W. The default behaviour is that it appears over the root window. Let's have a look at an example: from Tkinter import * from tkColorChooser import askcolor def callback(): result = askcolor(color="#6A9662", title = "Bernd's Colour Chooser") print result root = Tk() Button(root, text='Choose Color', fg="darkgreen", command=callback).pack(side=LEFT, padx=10) Button(text='Quit', command=root.quit, fg="red").pack(side=LEFT, padx=10) mainloop() The look and feel depends on the operating system (e.g. Linux or Windows) and the chosen GUI (GNOME, KDE and so on). The following windows appear, if you use Gnome: Using the same script under Windows 7 gives us the following result: Previous Chapter: Text Widget Next Chapter: Layout Management © 2011 - 2018, Bernd Klein, Bodenseo; Design by Denise Mitchinson adapted for python-course.eu by Bernd Klein