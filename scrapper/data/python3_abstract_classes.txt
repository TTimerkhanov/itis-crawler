Python Tutorial: 'The ABC' of Abstract Base Classes Python Course Python 3 Tutorial The Origins of PythonStarting with Python: The Interactive ShellExecuting a ScriptIndentationData Types and VariablesOperatorsSequential Data Types: Lists and StringsList ManipulationsShallow and Deep CopyDictionariesSets and Frozen SetsAn Extensive Example Using Setsinput via the keyboardConditional StatementsLoops, while LoopFor LoopsDifference between interators und IterablesOutput with PrintFormatted output with string modulo and the format methodFunctionsRecursion and Recursive FunctionsParameter Passing in FunctionsNamespacesGlobal and Local VariablesDecoratorsMemoization with DecoratorsRead and Write FilesModular Programming and ModulesPackages in PythonRegular ExpressionsRegular Expressions, AdvancedLambda Operator, Filter, Reduce and MapList ComprehensionIterators and GeneratorsException HandlingTests, DocTests, UnitTestsObject Oriented ProgrammingClass and Instance AttributesProperties vs. getters and settersInheritanceMultiple InheritanceMagic Methods and Operator OverloadingOOP, Inheritance ExampleSlotsClasses and Class CreationRoad to MetaclassesMetaclassesMetaclass Use Case: Count Function CallsAbstract Classes Inherently Abstract "But it is a pipe." "No, it's not," I said. "It's a drawing of a pipe. Get it? All representations of a thing are inherently abstract. It's very clever." (John Green, The Fault in Our Stars) This website is supported by: Pyt hon Courses and Seminars This website is free of annoying ads. We want to keep it like this. You can help with your donation: The need for donations Bernd Klein on Facebook Search this website: Python 3This is a tutorial in Python3, but this chapter of our course is available in a version for Python 2.x as well: 'The ABC' of Abstract Base Classes in Python 2.x Training Classes This website aims at providing you with educational material suitable for self-learning. Nevertheless, it is faster and more efficient to attend a "real" Python course in a classroom, with an experienced trainer. So why not attend one of the live Python courses in Strasbourg, Paris, London, Berlin, Munich, Hamburg, Frankfurt, or Lake Constance by Bernd Klein, the author of this tutorial? In-house Training Courses If you like it, we will come to your company or institute and provide a special training for your employees, as we've done it many times in Amsterdam (The Netherlands), Berlin (Germany), Bern (Switzerland), Basel (Switzerland), Zurich (Switzerland), Frankfurt (Germany), Locarno (Switzerland), Den Haag (The Hague), Hamburg, Munich (Germany), Bucharest (Romania), Toronto (Canada), Edmonton (Canada), and many other cities. We do training courses in England, Switzerland, Liechtenstein, Austria, Germany, France, Belgium, the Netherlands, Luxembourg, Romania, UK, Italy, Spain and other locations in Europe and in Canada. This way you will get a perfect training up to your needs and it will be extremely cost efficient as well. Contact us so we can find the ideal course to meet your needs. Skilled Python Programmers You are looking for experienced Python developers or programmers? We can help you, please contact us. Quote of the Day:"A programming language is for thinking about programs, not for expressing programs you've already thought of. It should be a pencil, not a pen. " (Paul Graham) Data Protection Declaration Data Protection Declaration Previous Chapter: Metaclass Use Case: Count Function Calls Abstract Classes Abstract classes are classes that contain one or more abstract methods. An abstract method is a method that is declared, but contains no implementation. Abstract classes may not be instantiated, and require subclasses to provide implementations for the abstract methods. Subclasses of an abstract class in Python are not required to implement abstract methods of the parent class. Let's look at the following example: class AbstractClass: def do_something(self): pass class B(AbstractClass): pass a = AbstractClass() b = B() If we start this program, we see that this is not an abstract class, because: we can instantiate an instance from we are not required to implement do_something in the class defintition of B Our example implemented a case of simple inheritance which has nothing to do with an abstract class. In fact, Python on its own doesn't provide abstract classes. Yet, Python comes with a module which provides the infrastructure for defining Abstract Base Classes (ABCs). This module is called - for obvious reasons - abc. The following Python code uses the abc module and defines an abstract base class: from abc import ABC, abstractmethod class AbstractClassExample(ABC): def __init__(self, value): self.value = value super().__init__() @abstractmethod def do_something(self): pass We will define now a subclass using the previously defined abstract class. You will notice that we haven't implemented the do_something method, even though we are required to implement it, because this method is decorated as an abstract method with the decorator "abstractmethod". We get an exception that DoAdd42 can't be instantiated: class DoAdd42(AbstractClassExample): pass x = DoAdd42(4) The previous Python code returned the following output: --------------------------------------------------------------------------- TypeError Traceback (most recent call last) <ipython-input-9-83fb8cead43d> in <module>() 2 pass 3 ----> 4 x = DoAdd42(4) TypeError: Can't instantiate abstract class DoAdd42 with abstract methods do_something We will do it the correct way in the following example, in which we define two classes inheriting from our abstract class: class DoAdd42(AbstractClassExample): def do_something(self): return self.value + 42 class DoMul42(AbstractClassExample): def do_something(self): return self.value * 42 x = DoAdd42(10) y = DoMul42(10) print(x.do_something()) print(y.do_something()) 52 420 A class that is derived from an abstract class cannot be instantiated unless all of its abstract methods are overridden. You may think that abstract methods can't be implemented in the abstract base class. This impression is wrong: An abstract method can have an implementation in the abstract class! Even if they are implemented, designers of subclasses will be forced to override the implementation. Like in other cases of "normal" inheritance, the abstract method can be invoked with super() call mechanism. This makes it possible to provide some basic functionality in the abstract method, which can be enriched by the subclass implementation. from abc import ABC, abstractmethod class AbstractClassExample(ABC): @abstractmethod def do_something(self): print("Some implementation!") class AnotherSubclass(AbstractClassExample): def do_something(self): super().do_something() print("The enrichment from AnotherSubclass") x = AnotherSubclass() x.do_something() Some implementation! The enrichment from AnotherSubclass Previous Chapter: Metaclass Use Case: Count Function Calls Â© 2011 - 2018, Bernd Klein, Bodenseo; Design by Denise Mitchinson adapted for python-course.eu by Bernd Klein