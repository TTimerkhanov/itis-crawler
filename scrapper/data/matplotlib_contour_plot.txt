Numerical & Scientific Computing with Python: Contour Plots with Python Numerical Python Course Numerical Programming NumPy IntroductionCreate Numpy ArraysData Type Object, dtypeNumerical Operations on Numpy ArraysChanging the Dimensions of ArraysPython, Numpy and ProbabilityWeighted Choices and Weighted SamplesCreation of Synthetical Test DataBoolean Masking of ArraysMatrix ArithmeticReading and Writing ndarraysMatplotlib IntroductionSpines and TicksLegends and AnnotationsMultiple Figures and AxesHistogramsContour PlotsPython Image Processing TutorialImage Processing TechniquesPandas TutorialPandas DataFramesPandas Data FilesDealing with NaNBinning DataPandas Tutorial Continuation: multi-level indexingData Visualization with Pandas and PythonPython, Date and TimePython, Pandas and TimeseriesLinear Combinations What is a Contour Plot A contour plot is a graphical technique which portrays a 3-dimensional surface in two dimensions. Such a plot contains contour lines, which are constant z slices. To draw the contour line for a certain z value, we connect all the (x, y) pairs, which produce the value z. A contour plot can be seen as a topographical map in which x-, y-, and z-values are plotted instead of longitude, latitude, and elevation. The independent variables x and y are usually restricted to a regular grid. This website is free of annoying ads. We want to keep it like this. You can help with your donation: The need for donations Bernd Klein on Facebook Search this website: This topic in German / Deutsche Übersetzung: Konturdiagramme mit PythonClassroom Training Courses This website contains a free and extensive online tutorial by Bernd Klein, using material from his classroom Python training courses. If you are interested in an instructor-led classroom training course, you may have a look at the Python classes by Bernd Klein at Bodenseo. © kabliczech - Fotolia.com Quote of the Day:"Programmers are in a race with the Universe to create bigger and better idiot-proof programs, while the Universe is trying to create bigger and better idiots. So far the Universe is winning." (Ananymous) If you have the choice working with Python 2 or Python 3, we recomend to switch to Python 3! You can read our Python Tutorial to see what the differences are. Data Protection Declaration Data Protection Declaration Previous Chapter: Histograms Next Chapter: Python Image Processing Tutorial Matplotlib Tutorial: Contour Plots Contour Plot A contour line or isoline of a function of two variables is a curve along which the function has a constant value. It is a cross-section of the three-dimensional graph of the function f(x, y) parallel to the x, y plane. Contour lines are used e.g. in geography and meteorology. In cartography, a contour line joins points of equal elevation (height) above a given level, such as mean sea level. We can also say in a more general way that a contour line of a function with two variables is a curve which connects points with the same values. Creating a "meshgrid" # the following line is only necessary if working with "ipython notebook" %matplotlib inline import numpy as np xlist = np.linspace(-3.0, 3.0, 3) ylist = np.linspace(-3.0, 3.0, 4) X, Y = np.meshgrid(xlist, ylist) print(xlist) print(ylist) print(X) print(Y) [-3. 0. 3.] [-3. -1. 1. 3.] [[-3. 0. 3.] [-3. 0. 3.] [-3. 0. 3.] [-3. 0. 3.]] [[-3. -3. -3.] [-1. -1. -1.] [ 1. 1. 1.] [ 3. 3. 3.]] import numpy as np xlist = np.linspace(-3.0, 3.0, 3) ylist = np.linspace(-3.0, 3.0, 4) X, Y = np.meshgrid(xlist, ylist) Z = np.sqrt(X**2 + Y**2) print(Z) [[4.24264069 3. 4.24264069] [3.16227766 1. 3.16227766] [3.16227766 1. 3.16227766] [4.24264069 3. 4.24264069]] Calculation of the Values import numpy as np xlist = np.linspace(-3.0, 3.0, 3) ylist = np.linspace(-3.0, 3.0, 4) X, Y = np.meshgrid(xlist, ylist) Z = np.sqrt(X**2 + Y**2) print(Z) [[4.24264069 3. 4.24264069] [3.16227766 1. 3.16227766] [3.16227766 1. 3.16227766] [4.24264069 3. 4.24264069]] import matplotlib.pyplot as plt plt.figure() cp = plt.contour(X, Y, Z) plt.clabel(cp, inline=True, fontsize=10) plt.title('Contour Plot') plt.xlabel('x (cm)') plt.ylabel('y (cm)') plt.show() Changing the Colours and the Line Style import matplotlib.pyplot as plt plt.figure() cp = plt.contour(X, Y, Z, colors='black', linestyles='dashed') plt.clabel(cp, inline=True, fontsize=10) plt.title('Contour Plot') plt.xlabel('x (cm)') plt.ylabel('y (cm)') plt.show() Filled Contours import numpy as np import matplotlib.pyplot as plt xlist = np.linspace(-3.0, 3.0, 100) ylist = np.linspace(-3.0, 3.0, 100) X, Y = np.meshgrid(xlist, ylist) Z = np.sqrt(X**2 + Y**2) plt.figure() cp = plt.contourf(X, Y, Z) plt.colorbar(cp) plt.title('Filled Contours Plot') plt.xlabel('x (cm)') plt.ylabel('y (cm)') plt.show() Individual Colours import numpy as np import matplotlib.pyplot as plt xlist = np.linspace(-3.0, 3.0, 100) ylist = np.linspace(-3.0, 3.0, 100) X, Y = np.meshgrid(xlist, ylist) Z = np.sqrt(X**2 + Y**2) plt.figure() contour = plt.contourf(X, Y, Z) plt.clabel(contour, colors = 'k', fmt = '%2.1f', fontsize=12) c = ('#ff0000', '#ffff00', '#0000FF', '0.6', 'c', 'm') contour_filled = plt.contourf(X, Y, Z, colors=c) plt.colorbar(contour) plt.title('Filled Contours Plot') plt.xlabel('x (cm)') plt.ylabel('y (cm)') plt.show() Levels The levels were decided automatically by contour and contourf so far. They can be defined manually, by providing a list of levels as a fourth parameter. Contour lines will be drawn for each value in the list, if we use contour. For contourf, there will be filled colored regions between the values in the list. import numpy as np import matplotlib.pyplot as plt xlist = np.linspace(-3.0, 3.0, 100) ylist = np.linspace(-3.0, 3.0, 100) X, Y = np.meshgrid(xlist, ylist) Z = np.sqrt(X ** 2 + Y ** 2 ) plt.figure() levels = [0.0, 0.2, 0.5, 0.9, 1.5, 2.5, 3.5] contour = plt.contour(X, Y, Z, levels, colors='k') plt.clabel(contour, colors = 'k', fmt = '%2.1f', fontsize=12) contour_filled = plt.contourf(X, Y, Z, levels) plt.colorbar(contour_filled) plt.title('Plot from level list') plt.xlabel('x (cm)') plt.ylabel('y (cm)') plt.show() The last example of this chapter will be a "lovely" contour plot: import matplotlib.pyplot as plt import numpy as np y, x = np.ogrid[-1:2:100j, -1:1:100j] plt.contour(x.ravel(), y.ravel(), x**2 + (y-((x**2)**(1.0/3)))**2, [1], colors='red',) plt.axis('equal') plt.show() Previous Chapter: Histograms Next Chapter: Python Image Processing Tutorial © 2011 - 2018, Bernd Klein, Bodenseo; Design by Denise Mitchinson adapted for python-course.eu by Bernd Klein