python
advanc
:
python
and
sql
python
advanc
cours
topic
advanc
topic
introduct
into
the
sy
modulepython
and
the
shellfork
and
fork
in
pythonintroduct
into
threadspip
,
pipe
and
``
99
bottl
of
beer
''
python
network
scannergraph
theori
and
graph
in
pythongraph
:
pygraphgraphsa
python
class
for
polynomi
functionscurri
in
pythonfinit
state
machin
in
pythontur
machin
in
pythonlevenshtein
distanceexampl
for
recurs
program
:
tower
of
hanoimastermind
/
bull
and
cowscreat
dynam
websit
with
wsgidynam
websit
with
mod_pythondynam
websit
with
pylonspython
,
sql
,
mysql
and
sqlitepython
score
If
data
is
the
new
oil
of
the
21th
centuri
than
databas
can
be
seen
as
the
oil
platform
.
``
you
can
have
data
without
inform
,
but
you
can
not
have
inform
without
data
.
''
(
daniel
key
moran
)
thi
websit
is
creat
by
:
python
train
cours
in
toronto
,
canada
On
site
train
in
europ
,
canada
and
the
US
.
``
databas
manag
system
[
origin
:
data
+
latin
basu
'low
,
mean
,
vile
,
menial
,
degrad
,
counterfeit
.
'
]
A
complex
set
of
interrel
data
structur
allow
data
to
be
lost
in
mani
conveni
sequenc
while
retain
a
complet
record
of
the
logic
relat
between
the
miss
item
.
''
from
the
devil
's
DP
dictionari
''
by
stan
kelly-bootl
``
We
also
like
to
thank
denis
mitchinson
for
provid
the
style
sheet
of
thi
websit
.
thi
websit
is
free
of
annoy
ad
.
We
want
to
keep
it
like
thi
.
you
can
help
with
your
donat
:
the
need
for
donat
bernd
klein
on
facebook
search
thi
websit
:
thi
topic
in
german
/
deutsch
übersetzung
:
sql
und
pythonclassroom
train
cours
thi
websit
contain
a
free
and
extens
onlin
tutori
by
bernd
klein
,
use
materi
from
hi
classroom
python
train
cours
.
If
you
are
interest
in
an
instructor-l
classroom
train
cours
,
you
may
have
a
look
at
the
python
class
by
bernd
klein
at
bodenseo
.
©
kabliczech
-
fotolia.com
quot
of
the
day
:
A
comput
would
deserv
to
be
call
intellig
if
it
could
deceiv
a
human
into
believ
that
it
wa
human
.
alan
ture
If
you
have
the
choic
work
with
python
2
or
python
3
,
we
recomend
to
switch
to
python
3
!
you
can
read
our
python
tutori
to
see
what
the
differ
are
.
data
protect
declar
data
protect
declar
previou
chapter
:
dynam
websit
with
pylon
next
chapter
:
python
score
python
and
sql
introduct
the
histori
of
sql
goe
back
to
the
earli
70th
.
sql
is
a
structur
queri
languag
,
which
is
base
on
a
relat
model
,
as
it
wa
describ
in
edgar
F.
codd
's
1970
paper
``
A
relat
model
of
data
for
larg
share
data
bank
.
sql
is
often
pronounc
like
``
sequel
''
.
sql
becam
a
standard
of
the
american
nation
standard
institut
(
ansi
)
in
1986
,
and
of
the
intern
organ
for
standard
(
iso
)
in
1987
.
As
most
peopl
come
to
thi
websit
are
alreadi
familiar
with
msql
,
postgressql
,
mysql
or
other
variant
of
sql
,
we
will
not
enlarg
on
sql
itself
.
A
databas
is
an
organ
collect
of
data
.
the
data
are
typic
organ
to
model
aspect
of
realiti
in
a
way
that
support
process
requir
thi
inform
.
the
term
``
databas
''
can
both
refer
to
the
data
themselv
or
to
the
databas
manag
system
.
the
databas
manag
system
is
a
softwar
applic
for
the
interact
between
user
databas
itself
.
user
do
n't
have
to
be
human
user
.
they
can
be
other
program
and
applic
as
well
.
We
will
learn
how
python
or
better
a
python
program
can
interact
as
a
user
of
an
sql
databas
.
thi
is
an
introduct
into
use
sqlite
and
mysql
from
python
.
the
python
standard
for
databas
interfac
is
the
python
db-api
,
which
is
use
by
python
's
databas
interfac
.
the
db-api
ha
been
defin
as
a
common
interfac
,
which
can
be
use
to
access
relat
databas
.
In
other
word
,
the
code
in
python
for
commun
with
a
databas
should
be
the
same
,
regardless
of
the
databas
and
the
databas
modul
use
.
even
though
we
use
lot
of
sql
exampl
,
thi
is
not
an
introduct
into
sql
but
a
tutori
on
the
python
interfac
.
To
learn
sql
you
have
to
consult
a
sql
tutori
.
sqlite
sqlite
is
a
simpl
relat
databas
system
,
which
save
it
data
in
regular
data
file
or
even
in
the
intern
memori
of
the
comput
,
i.e
.
the
ram
.
It
wa
develop
for
embed
applic
,
like
mozilla-firefox
(
bookmark
)
,
symbian
OS
or
android
.
sqlite
is
``
quit
''
fast
,
even
though
it
use
a
simpl
file
.
It
can
be
use
for
larg
databas
as
well
.
If
you
want
to
use
sqlite
,
you
have
to
import
the
modul
sqlite3
.
To
use
a
databas
,
you
have
to
creat
first
a
connect
object
.
the
connect
object
will
repres
the
databas
.
the
argument
of
connect
-
in
the
follow
exampl
``
companys.db
''
-
function
both
as
the
name
of
the
file
,
where
the
data
will
be
store
,
and
as
the
name
of
the
databas
.
If
a
file
with
thi
name
exist
,
it
will
be
open
.
It
ha
to
be
a
sqlite
databas
file
of
cours
!
In
the
follow
exampl
,
we
will
open
a
databas
call
compani
.
the
file
doe
not
have
to
exist
.
:
>
>
>
import
sqlite3
>
>
>
connect
=
sqlite3.connect
(
``
company.db
''
)
We
have
now
creat
a
databas
with
the
name
``
compani
''
.
It
's
like
have
sent
the
command
``
creat
databas
compani
;
''
to
a
sql
server
.
If
you
call
``
sqlite3.connect
(
'company.db
'
)
''
again
,
it
will
open
the
previous
creat
databas
.
after
have
creat
an
empti
databas
,
you
will
most
probabl
add
one
or
more
tabl
to
thi
databas
.
the
sql
syntax
for
creat
a
tabl
``
employe
''
in
the
databas
``
compani
''
look
like
thi
:
creat
tabl
employe
(
staff_numb
int
not
null
auto_incr
,
fname
varchar
(
20
)
,
lname
varchar
(
30
)
,
gender
char
(
1
)
,
join
date
,
birth_dat
date
,
primari
key
(
staff_numb
)
)
;
thi
is
the
way
,
somebodi
might
do
it
on
a
sql
command
shell
.
Of
cours
,
we
want
to
do
thi
directli
from
python
.
To
be
capabl
to
send
a
command
to
``
sql
''
,
or
sqlite
,
we
need
a
cursor
object
.
usual
,
a
cursor
in
sql
and
databas
is
a
control
structur
to
travers
over
the
record
in
a
databas
.
So
it
's
use
for
the
fetch
of
the
result
.
In
sqlite
(
and
other
python
DB
interfac
)
it
is
more
gener
use
.
It
's
use
for
perform
all
sql
command
.
We
get
the
cursor
object
by
call
the
cursor
(
)
method
of
connect
.
An
arbitrari
number
of
cursor
can
be
creat
.
the
cursor
is
use
to
travers
the
record
from
the
result
set
.
We
can
defin
a
sql
command
with
a
tripl
quot
string
in
python
:
sql_command
=
``
''
''
creat
tabl
employe
(
staff_numb
integ
primari
key
,
fname
varchar
(
20
)
,
lname
varchar
(
30
)
,
gender
char
(
1
)
,
join
date
,
birth_dat
date
)
;
''
''
''
concern
the
sql
syntax
:
you
may
have
notic
that
the
autoincr
field
is
miss
in
the
sql
code
within
our
python
program
.
We
have
defin
the
staff_numb
field
as
``
integ
primari
key
''
A
column
which
is
label
like
thi
will
be
automat
auto-incr
in
sqlite3
.
To
put
it
in
other
word
:
If
a
column
of
a
tabl
is
declar
to
be
an
integ
primari
key
,
then
whenev
a
null
will
be
use
as
an
input
for
thi
column
,
the
null
will
be
automat
convert
into
an
integ
which
will
one
larger
than
the
highest
valu
so
far
use
in
that
column
.
If
the
tabl
is
empti
,
the
valu
1
will
be
use
.
If
the
largest
exist
valu
in
thi
column
ha
the
9223372036854775807
,
which
is
the
largest
possibl
int
in
sqlite
,
an
unus
key
valu
is
chosen
at
random
.
now
we
have
a
databas
with
a
tabl
but
no
data
includ
.
To
popul
the
tabl
we
will
have
to
send
the
``
insert
''
command
to
sqlite
.
We
will
use
again
the
execut
method
.
the
follow
exampl
is
a
complet
work
exampl
.
To
run
the
program
you
will
either
have
to
remov
the
file
company.db
or
uncom
the
``
drop
tabl
''
line
in
the
sql
command
:
import
sqlite3
connect
=
sqlite3.connect
(
``
company.db
''
)
cursor
=
connection.cursor
(
)
#
delet
#
cursor.execut
(
``
''
''
drop
tabl
employe
;
''
''
''
)
sql_command
=
``
''
''
creat
tabl
employe
(
staff_numb
integ
primari
key
,
fname
varchar
(
20
)
,
lname
varchar
(
30
)
,
gender
char
(
1
)
,
join
date
,
birth_dat
date
)
;
''
''
''
cursor.execut
(
sql_command
)
sql_command
=
``
''
''
insert
into
employe
(
staff_numb
,
fname
,
lname
,
gender
,
birth_dat
)
valu
(
null
,
``
william
''
,
``
shakespear
''
,
``
m
''
,
``
1961-10-25
''
)
;
''
''
''
cursor.execut
(
sql_command
)
sql_command
=
``
''
''
insert
into
employe
(
staff_numb
,
fname
,
lname
,
gender
,
birth_dat
)
valu
(
null
,
``
frank
''
,
``
schiller
''
,
``
m
''
,
``
1955-08-17
''
)
;
''
''
''
cursor.execut
(
sql_command
)
#
never
forget
thi
,
if
you
want
the
chang
to
be
save
:
connection.commit
(
)
connection.clos
(
)
Of
cours
,
in
most
case
,
you
will
not
liter
insert
data
into
a
sql
tabl
.
you
will
rather
have
a
lot
of
data
insid
of
some
python
data
type
e.g
.
a
dictionari
or
a
list
,
which
ha
to
be
use
as
the
input
of
the
insert
statement
.
the
follow
work
exampl
,
assum
that
you
have
alreadi
an
exist
databas
company.db
and
a
tabl
employe
.
We
have
a
list
with
data
of
person
which
will
be
use
in
the
insert
statement
:
import
sqlite3
connect
=
sqlite3.connect
(
``
company.db
''
)
cursor
=
connection.cursor
(
)
staff_data
=
[
(
``
william
''
,
``
shakespear
''
,
``
m
''
,
``
1961-10-25
''
)
,
(
``
frank
''
,
``
schiller
''
,
``
m
''
,
``
1955-08-17
''
)
,
(
``
jane
''
,
``
wall
''
,
``
f
''
,
``
1989-03-14
''
)
]
for
p
in
staff_data
:
format_str
=
``
''
''
insert
into
employe
(
staff_numb
,
fname
,
lname
,
gender
,
birth_dat
)
valu
(
null
,
``
{
first
}
''
,
``
{
last
}
''
,
``
{
gender
}
''
,
``
{
birthdat
}
''
)
;
''
''
''
sql_command
=
format_str.format
(
first=p
[
0
]
,
last=p
[
1
]
,
gender=p
[
2
]
,
birthdat
=
p
[
3
]
)
cursor.execut
(
sql_command
)
the
time
ha
come
now
to
final
queri
our
employe
tabl
:
import
sqlite3
connect
=
sqlite3.connect
(
``
company.db
''
)
cursor
=
connection.cursor
(
)
cursor.execut
(
``
select
*
from
employe
''
)
print
(
``
fetchal
:
''
)
result
=
cursor.fetchal
(
)
for
r
in
result
:
print
(
r
)
cursor.execut
(
``
select
*
from
employe
''
)
print
(
``
\nfetch
one
:
''
)
re
=
cursor.fetchon
(
)
print
(
re
)
If
we
run
thi
program
,
save
as
``
sql_company_query.pi
''
,
we
get
the
follow
result
,
depend
on
the
actual
data
:
$
python3
sql_company_query.pi
fetchal
:
(
1
,
'william
'
,
'shakespear
'
,
'm
'
,
none
,
'1961-10-25
'
)
(
2
,
'frank
'
,
'schiller
'
,
'm
'
,
none
,
'1955-08-17
'
)
(
3
,
'bill
'
,
'window
'
,
'm
'
,
none
,
'1963-11-29
'
)
(
4
,
'esther
'
,
'wall
'
,
'm
'
,
none
,
'1991-05-11
'
)
(
5
,
'jane
'
,
'thunder
'
,
'
f
'
,
none
,
'1989-03-14
'
)
fetch
one
:
(
1
,
'william
'
,
'shakespear
'
,
'm
'
,
none
,
'1961-10-25
'
)
mysql
If
you
work
under
a
python
2.x
version
,
the
modul
mysqldb
can
be
use
.
It
ha
to
be
instal
.
thi
can
be
accomplish
under
debian
or
ubuntu
like
thi
:
sudo
apt-get
instal
python-mysqldb
If
you
work
with
python
3
,
you
have
to
make
sure
that
you
write
everyth
lowercas
:
sudo
apt-get
instal
python3-mysqldb
Of
cours
,
you
have
also
the
possibl
to
instal
it
via
``
pip
instal
''
insid
a
virtualenv
:
pip
instal
mysqlclient
import
the
mysqldb
modul
open
a
connect
to
the
sql
server
send
and
receiv
command
close
the
connect
to
sql
import
and
connect
look
like
thi
:
import
mysqldb
connect
=
mysqldb.connect
(
host
=
``
localhost
''
,
user
=
``
testus
''
,
passwd
=
``
testpass
''
,
db
=
``
compani
''
)
cursor
=
connection.cursor
(
)
cursor.execut
(
``
select
version
(
)
''
)
row
=
cursor.fetchon
(
)
print
(
``
server
version
:
''
,
row
[
0
]
)
cursor.clos
(
)
connection.clos
(
)
for
the
follow
exampl
,
we
assum
that
you
have
creat
a
user
``
pytest
''
.
you
can
do
thi
e.g
.
on
the
command
line
with
the
follow
command
:
first
we
start
a
mysql
session
with
:
mysql
-u
root
-p
On
the
mysql
shell
we
continu
with
:
mysql
>
creat
user
'pytest
'
@
'localhost
'
identifi
BY
'monti
'
;
queri
OK
,
0
row
affect
(
0.00
sec
)
mysql
>
grant
all
privileg
ON
*
.
*
TO
'pytest
'
@
'localhost
'
;
queri
OK
,
0
row
affect
(
0.00
sec
)
mysql
>
flush
privileg
;
queri
OK
,
0
row
affect
(
0.00
sec
)
mysql
>
let
's
check
the
mysql
server
version
by
use
the
previous
creat
connect
.
To
do
thi
,
we
have
to
creat
a
cursor
object
first
:
import
mysql.connector
as
mc
connect
=
mc.connect
(
host
=
``
localhost
''
,
user
=
``
pytest
''
,
passwd
=
``
monti
''
,
db
=
``
compani
''
)
cursor
=
connection.cursor
(
)
cursor.execut
(
``
select
version
(
)
''
)
row
=
cursor.fetchon
(
)
print
(
``
server
version
:
''
,
row
[
0
]
)
cursor.clos
(
)
connection.clos
(
)
the
output
may
look
like
thi
:
server
version
:
5.5.52-0ubuntu0.14.04.1
like
in
our
exampl
for
sqlite3
in
the
begin
of
thi
chapter
,
we
will
creat
a
tabl
employe
and
fill
it
with
some
data
.
the
program
work
onli
under
python
3
:
import
sy
import
mysql.connector
as
mc
tri
:
connect
=
mc.connect
(
host
=
``
localhost
''
,
user
=
``
pytest
''
,
passwd
=
``
monti
''
,
db
=
``
compani
''
)
except
mc.error
as
e
:
print
(
``
error
%
d
:
%
s
''
%
(
e.arg
[
0
]
,
e.arg
[
1
]
)
)
sys.exit
(
1
)
cursor
=
connection.cursor
(
)
cursor.execut
(
``
drop
tabl
IF
exist
employe
''
)
#
delet
#
cursor.execut
(
``
''
''
drop
tabl
employe
;
''
''
''
)
sql_command
=
``
''
''
creat
tabl
employe
(
staff_numb
integ
primari
key
,
fname
varchar
(
20
)
,
lname
varchar
(
30
)
,
gender
char
(
1
)
,
join
date
,
birth_dat
date
)
;
''
''
''
cursor.execut
(
sql_command
)
staff_data
=
[
(
``
william
''
,
``
shakespear
''
,
``
m
''
,
``
1961-10-25
''
)
,
(
``
frank
''
,
``
schiller
''
,
``
m
''
,
``
1955-08-17
''
)
,
(
``
jane
''
,
``
wall
''
,
``
f
''
,
``
1989-03-14
''
)
,
]
for
staff
,
p
in
enumer
(
staff_data
)
:
format_str
=
``
''
''
insert
into
employe
(
staff_numb
,
fname
,
lname
,
gender
,
birth_dat
)
valu
(
{
staff_no
}
,
'
{
first
}
'
,
'
{
last
}
'
,
'
{
gender
}
'
,
'
{
birthdat
}
'
)
;
''
''
''
sql_command
=
format_str.format
(
staff_no=staff
,
first=p
[
0
]
,
last=p
[
1
]
,
gender=p
[
2
]
,
birthdat
=
p
[
3
]
)
print
(
sql_command
)
cursor.execut
(
sql_command
)
connection.commit
(
)
cursor.clos
(
)
connection.clos
(
)
thi
program
return
the
follow
output
which
correspond
to
the
insert
into
the
tabl
'employe
'
:
insert
into
employe
(
staff_numb
,
fname
,
lname
,
gender
,
birth_dat
)
valu
(
0
,
'william
'
,
'shakespear
'
,
'm
'
,
'1961-10-25
'
)
;
insert
into
employe
(
staff_numb
,
fname
,
lname
,
gender
,
birth_dat
)
valu
(
1
,
'frank
'
,
'schiller
'
,
'm
'
,
'1955-08-17
'
)
;
insert
into
employe
(
staff_numb
,
fname
,
lname
,
gender
,
birth_dat
)
valu
(
2
,
'jane
'
,
'wall
'
,
'
f
'
,
'1989-03-14
'
)
;
after
thi
,
we
want
to
queri
our
databas
again
:
import
sy
import
mysql.connector
as
mc
tri
:
connect
=
mc.connect
(
host
=
``
localhost
''
,
user
=
``
pytest
''
,
passwd
=
``
monti
''
,
db
=
``
compani
''
)
except
mc.error
as
e
:
print
(
``
error
%
d
:
%
s
''
%
(
e.arg
[
0
]
,
e.arg
[
1
]
)
)
sys.exit
(
1
)
cursor
=
connection.cursor
(
)
cursor.execut
(
``
select
*
from
employe
''
)
print
(
``
'result
of
``
select
*
from
employe
''
:
'
''
)
result
=
cursor.fetchal
(
)
for
r
in
result
:
print
(
r
)
cursor.clos
(
)
connection.clos
(
)
It
gener
the
follow
output
:
result
of
``
select
*
from
employe
''
:
(
0
,
'william
'
,
'shakespear
'
,
'm
'
,
none
,
datetime.d
(
1961
,
10
,
25
)
)
(
1
,
'frank
'
,
'schiller
'
,
'm
'
,
none
,
datetime.d
(
1955
,
8
,
17
)
)
(
2
,
'jane
'
,
'wall
'
,
'
f
'
,
none
,
datetime.d
(
1989
,
3
,
14
)
)
previou
chapter
:
dynam
websit
with
pylon
next
chapter
:
python
score
©
2011
-
2018
,
bernd
klein
,
bodenseo
;
design
by
denis
mitchinson
adapt
for
python-course.eu
by
bernd
klein
