python2
tutori
:
except
handl
python
cours
python
2
tutori
histori
and
philosophi
of
pythonwhi
python
?
interact
modeexecut
a
scriptstructur
with
indentationdata
type
and
variablesoperatorsinput
and
raw_input
via
the
keyboardcondit
statementswhil
loopsfor
loopsformat
outputoutput
with
printsequenti
data
typeslist
manipulationdictionariesset
and
frozen
setsshallow
and
deep
copyfunctionsrecurs
and
recurs
functionstest
,
doctest
,
unittestsdecoratorsmemo
with
decoratorspass
argumentsnamespacesglob
vs.
local
variablesfil
managementmodular
program
and
modulesintroduct
in
regular
expressionsregular
express
,
advancedlambda
oper
,
filter
,
reduc
and
maplist
comprehensiongeneratorsexcept
handlingobject
orient
programminginherit
exampleslotsclass
and
class
creationroad
to
metaclassesmetaclassesmetaclass
exampl
:
count
function
callsabstract
class
except
from
the
rule
``
there
are
two
great
rule
of
life
,
the
one
gener
and
the
other
particular
.
the
first
is
that
everyon
can
in
the
end
,
get
what
he
want
,
if
he
onli
tri
.
that
is
the
gener
rule
.
the
particular
rule
is
that
everi
individu
is
,
more
or
less
,
an
except
to
the
rule
.
''
samuel
butler
delic
handl
``
the
finest
qualiti
of
our
natur
,
like
the
bloom
on
fruit
,
can
be
preserv
onli
by
the
most
delic
handl
.
yet
we
do
not
treat
ourselv
nor
one
anoth
thu
tenderli
.
''
henri
david
thoreau
support
by
:
python
train
cours
thi
websit
is
free
of
annoy
ad
.
We
want
to
keep
it
like
thi
.
you
can
help
with
your
donat
:
the
need
for
donat
bernd
klein
on
facebook
search
thi
websit
:
thi
topic
in
german
/
deutsch
übersetzung
:
ausnahmebehandlungpython
2.7thi
tutori
deal
with
python
version
2.7thi
chapter
from
our
cours
is
avail
in
a
version
for
python3
:
except
handlingclassroom
train
cours
thi
websit
contain
a
free
and
extens
onlin
tutori
by
bernd
klein
.
If
you
are
interest
in
an
instructor-l
classroom
train
in
canada
or
the
US
,
you
may
have
a
look
at
the
python
cours
by
bernd
klein
at
bodenseo
©
kabliczech
-
fotolia.com
overview
of
python
cours
by
bernd
klein
.
the
truth
in
error
``
the
first
step
toward
amend
is
the
recognit
of
error
.
''
seneca
``
the
world
alway
make
the
assumpt
that
the
exposur
of
an
error
is
ident
with
the
discoveri
of
truth
-
that
the
error
and
truth
are
simpli
opposit
.
they
are
noth
of
the
sort
.
what
the
world
turn
to
,
when
it
is
cure
of
one
error
,
is
usual
simpli
anoth
error
,
and
mayb
one
wors
than
the
first
one
.
''
h.l
.
mencken
``
great
servic
are
not
cancel
by
one
act
or
by
one
singl
error
.
''
benjamin
disra
data
protect
declar
data
protect
declar
previou
chapter
:
gener
next
chapter
:
object
orient
program
except
handl
An
except
is
an
error
that
happen
dure
the
execut
of
a
program
.
except
are
known
to
non-programm
as
instanc
that
do
not
conform
to
a
gener
rule
.
the
name
``
except
''
in
comput
scienc
ha
thi
mean
as
well
:
It
impli
that
the
problem
(
the
except
)
doe
n't
occur
frequent
,
i.e
.
the
except
is
the
``
except
to
the
rule
''
.
except
handl
is
a
construct
in
some
program
languag
to
handl
or
deal
with
error
automat
.
mani
program
languag
like
c++
,
objective-c
,
php
,
java
,
rubi
,
python
,
and
mani
other
have
built-in
support
for
except
handl
.
error
handl
is
gener
resolv
by
save
the
state
of
execut
at
the
moment
the
error
occur
and
interrupt
the
normal
flow
of
the
program
to
execut
a
special
function
or
piec
of
code
,
which
is
known
as
the
except
handler
.
depend
on
the
kind
of
error
(
``
divis
by
zero
''
,
``
file
open
error
''
and
so
on
)
which
had
occur
,
the
error
handler
can
``
fix
''
the
problem
and
the
program
can
be
continu
afterward
with
the
previous
save
data
.
except
handl
in
python
except
handl
in
python
is
veri
similar
to
java
.
the
code
,
which
harbour
the
risk
of
an
except
,
is
embed
in
a
tri
block
.
but
wherea
in
java
except
are
caught
by
catch
claus
,
we
have
statement
introduc
by
an
``
except
''
keyword
in
python
.
It
's
possibl
to
``
creat
custom-mad
''
except
:
with
the
rais
statement
it
's
possibl
to
forc
a
specifi
except
to
occur
.
let
's
look
at
a
simpl
exampl
.
assum
we
want
to
ask
the
user
to
enter
an
integ
number
.
If
we
use
a
raw_input
(
)
,
the
input
will
be
a
string
,
which
we
have
to
cast
into
an
integ
.
If
the
input
ha
not
been
a
valid
integ
,
we
will
gener
(
rais
)
a
valueerror
.
We
show
thi
in
the
follow
interact
session
:
>
>
>
n
=
int
(
raw_input
(
``
pleas
enter
a
number
:
``
)
)
pleas
enter
a
number
:
23.5
traceback
(
most
recent
call
last
)
:
file
``
<
stdin
>
''
,
line
1
,
in
<
modul
>
valueerror
:
invalid
liter
for
int
(
)
with
base
10
:
'23.5
'
with
the
aid
of
except
handl
,
we
can
write
robust
code
for
read
an
integ
from
input
:
while
true
:
tri
:
n
=
raw_input
(
``
pleas
enter
an
integ
:
``
)
n
=
int
(
n
)
break
except
valueerror
:
print
(
``
No
valid
integ
!
pleas
tri
again
...
''
)
print
``
great
,
you
success
enter
an
integ
!
''
It
's
a
loop
,
which
break
onli
,
if
a
valid
integ
ha
been
given
.
the
exampl
script
work
like
thi
:
the
while
loop
is
enter
.
the
code
within
the
tri
claus
will
be
execut
statement
by
statement
.
If
no
except
occur
dure
the
execut
,
the
execut
will
reach
the
break
statement
and
the
while
loop
will
be
left
.
If
an
except
occur
,
i.e
.
in
the
cast
of
n
,
the
rest
of
the
tri
block
will
be
skip
and
the
except
claus
will
be
execut
.
the
rais
error
,
in
our
case
a
valueerror
,
ha
to
match
one
of
the
name
after
except
.
In
our
exampl
onli
one
,
i.e
.
``
valueerror
:
''
.
after
have
print
the
text
of
the
print
statement
,
the
execut
doe
anoth
loop
.
It
start
with
a
new
raw_input
(
)
.
An
exampl
usag
could
look
like
thi
:
$
python
integer_read.pi
pleas
enter
an
integ
:
abc
No
valid
integ
!
pleas
tri
again
...
pleas
enter
an
integ
:
42.0
No
valid
integ
!
pleas
tri
again
...
pleas
enter
an
integ
:
42
great
,
you
success
enter
an
integ
!
$
multipl
except
claus
A
tri
statement
may
have
more
than
one
except
claus
for
differ
except
.
but
at
most
one
except
claus
will
be
execut
.
our
next
exampl
show
a
tri
claus
,
in
which
we
open
a
file
for
read
,
read
a
line
from
thi
file
and
convert
thi
line
into
an
integ
.
there
are
at
least
two
possibl
except
:
an
ioerror
valueerror
just
in
case
we
have
an
addit
unnam
except
claus
for
an
unexpect
error
:
import
sy
tri
:
f
=
open
(
'integers.txt
'
)
s
=
f.readlin
(
)
i
=
int
(
s.strip
(
)
)
except
ioerror
as
(
errno
,
strerror
)
:
print
``
i/o
error
(
{
0
}
)
:
{
1
}
''
.format
(
errno
,
strerror
)
except
valueerror
:
print
``
No
valid
integ
in
line
.
''
except
:
print
``
unexpect
error
:
''
,
sys.exc_info
(
)
[
0
]
rais
the
handl
of
the
ioerror
in
the
previou
exampl
is
of
special
interest
.
the
ioerror
return
a
tupl
with
an
error
number
and
a
string
with
the
error
messag
,
which
we
assign
to
the
variabl
errno
and
strerror
by
``
except
ioerror
as
(
errno
,
strerror
)
''
.
If
we
call
the
abov
script
with
a
non-exist
file
,
we
get
the
messag
:
i/o
error
(
2
)
:
No
such
file
or
directori
and
if
the
file
integers.txt
is
not
readabl
,
e.g
.
if
we
do
n't
have
the
permiss
to
read
it
,
we
get
the
follow
messag
:
i/o
error
(
13
)
:
permiss
deni
An
except
claus
may
name
more
than
one
except
in
a
tupl
of
error
name
,
as
we
see
in
the
follow
exampl
:
tri
:
f
=
open
(
'integers.txt
'
)
s
=
f.readlin
(
)
i
=
int
(
s.strip
(
)
)
except
(
ioerror
,
valueerror
)
:
print
``
An
i/o
error
or
a
valueerror
occur
''
except
:
print
``
An
unexpect
error
occur
''
rais
clean-up
action
(
tri
...
final
)
So
far
the
tri
statement
had
alway
been
pair
with
except
claus
.
but
there
is
anoth
way
to
use
it
as
well
.
the
tri
statement
can
be
follow
by
a
final
claus
.
final
claus
are
call
clean-up
or
termin
claus
,
becaus
they
must
be
execut
under
all
circumst
,
i.e
.
a
``
final
''
claus
is
alway
execut
regardless
if
an
except
occur
in
a
tri
block
or
not
.
A
simpl
exampl
to
demonstr
the
final
claus
:
tri
:
x
=
float
(
raw_input
(
``
your
number
:
``
)
)
invers
=
1.0
/
x
final
:
print
(
``
there
may
or
may
not
have
been
an
except
.
''
)
print
``
the
invers
:
``
,
invers
let
's
look
at
the
output
of
the
previou
script
,
if
we
first
input
a
correct
number
and
after
thi
a
string
,
which
is
rais
an
error
:
bernd
@
venu
:
~/tmp
$
python
finally.pi
your
number
:
34
there
may
or
may
not
have
been
an
except
.
the
invers
:
0.0294117647059
bernd
@
venu
:
~/tmp
$
python
finally.pi
your
number
:
python
there
may
or
may
not
have
been
an
except
.
traceback
(
most
recent
call
last
)
:
file
``
finally.pi
''
,
line
3
,
in
<
modul
>
x
=
float
(
raw_input
(
``
your
number
:
``
)
)
valueerror
:
invalid
liter
for
float
(
)
:
python
bernd
@
venu
:
~/tmp
$
combin
tri
,
except
and
final
``
final
''
and
``
except
''
can
be
use
togeth
for
the
same
tri
block
,
as
can
be
seen
the
follow
python
exampl
:
tri
:
x
=
float
(
raw_input
(
``
your
number
:
``
)
)
invers
=
1.0
/
x
except
valueerror
:
print
``
you
should
have
given
either
an
int
or
a
float
''
except
zerodivisionerror
:
print
``
infin
''
final
:
print
(
``
there
may
or
may
not
have
been
an
except
.
''
)
the
output
of
the
previou
script
,
if
save
as
``
finally2.pi
''
,
for
variou
valu
look
like
thi
:
bernd
@
venu
:
~/tmp
$
python
finally2.pi
your
number
:
37
there
may
or
may
not
have
been
an
except
.
bernd
@
venu
:
~/tmp
$
python
finally2.pi
your
number
:
seven
you
should
have
given
either
an
int
or
a
float
there
may
or
may
not
have
been
an
except
.
bernd
@
venu
:
~/tmp
$
python
finally2.pi
your
number
:
0
infin
there
may
or
may
not
have
been
an
except
.
bernd
@
venu
:
~/tmp
$
els
claus
the
tri
...
except
statement
ha
an
option
els
claus
.
An
els
block
ha
to
be
posit
after
all
the
except
claus
.
An
els
claus
will
be
execut
if
the
tri
claus
doe
n't
rais
an
except
.
the
follow
exampl
open
a
file
and
read
in
all
the
line
into
a
list
call
``
text
''
:
import
sy
file_nam
=
sys.argv
[
1
]
text
=
[
]
tri
:
fh
=
open
(
file_nam
,
'
r
'
)
text
=
fh.readlin
(
)
fh.close
(
)
except
ioerror
:
print
'
can
not
open
'
,
file_nam
if
text
:
print
text
[
100
]
thi
exampl
receiv
the
file
name
via
a
command
line
argument
.
So
make
sure
that
you
call
it
properli
:
let
's
assum
that
you
save
thi
program
as
``
exception_test.pi
''
.
In
thi
case
,
you
have
to
call
it
with
python
exception_test.pi
integers.txt
If
you
do
n't
want
thi
behaviour
,
just
chang
the
line
``
file_nam
=
sys.argv
[
1
]
''
to
``
file_nam
=
'integers.txt
'
''
.
the
previou
exampl
is
nearli
the
same
as
:
import
sy
file_nam
=
sys.argv
[
1
]
text
=
[
]
tri
:
fh
=
open
(
file_nam
,
'
r
'
)
except
ioerror
:
print
'
can
not
open
'
,
file_nam
els
:
text
=
fh.readlin
(
)
fh.close
(
)
if
text
:
print
text
[
100
]
the
main
differ
is
that
in
the
first
case
,
all
statement
of
the
tri
block
can
lead
to
the
same
error
messag
``
can
not
open
...
''
,
which
is
wrong
,
if
fh.close
(
)
or
fh.readlin
(
)
rais
an
error
.
the
assert
statement
the
assert
statement
is
intend
for
debug
statement
.
It
can
be
seen
as
an
abbrevi
notat
for
a
condit
rais
statement
,
i.e
.
an
except
is
onli
rais
,
if
a
certain
condit
is
not
true
.
without
use
the
assert
statement
,
we
can
formul
it
like
thi
in
python
:
if
not
<
some_test
>
:
rais
assertionerror
(
<
messag
>
)
the
follow
code
,
use
the
assert
statement
,
is
semant
equival
,
i.e
.
ha
the
same
mean
:
assert
<
some_test
>
,
<
messag
>
the
line
abov
can
be
``
read
''
as
:
If
<
some_test
>
evalu
to
fals
,
an
except
is
rais
and
<
messag
>
will
be
output
.
exampl
:
>
>
>
x
=
5
>
>
>
y
=
3
>
>
>
assert
x
<
y
,
``
x
ha
to
be
smaller
than
y
''
traceback
(
most
recent
call
last
)
:
file
``
<
stdin
>
''
,
line
1
,
in
<
modul
>
assertionerror
:
x
ha
to
be
smaller
than
y
>
>
>
hint
:
assert
should
not
be
use
to
catch
program
error
like
x
/
0
,
becaus
python
trap
such
program
error
itself
!
assert
should
be
use
for
trap
user-defin
constraint
!
previou
chapter
:
gener
next
chapter
:
object
orient
program
©
2011
-
2018
,
bernd
klein
,
bodenseo
;
design
by
denis
mitchinson
adapt
for
python-course.eu
by
bernd
klein
