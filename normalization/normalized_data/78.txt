numer
&
scientif
comput
with
python
:
creat
subplot
with
python
and
matplotlib
numer
python
cours
numer
program
numpi
introductioncr
numpi
arraysdata
type
object
,
dtypenumer
oper
on
numpi
arrayschang
the
dimens
of
arrayspython
,
numpi
and
probabilityweight
choic
and
weight
samplescr
of
synthet
test
databoolean
mask
of
arraysmatrix
arithmeticread
and
write
ndarraysmatplotlib
introductionspin
and
tickslegend
and
annotationsmultipl
figur
and
axeshistogramscontour
plotspython
imag
process
tutorialimag
process
techniquespanda
tutorialpanda
dataframespanda
data
filesd
with
nanbin
datapanda
tutori
continu
:
multi-level
indexingdata
visual
with
panda
and
pythonpython
,
date
and
timepython
,
panda
and
timeserieslinear
combin
multipl
plot
multipl
plot
is
what
make
a
novel
a
novel
.
thi
is
true
to
a
certain
degre
for
mathemat
graph
as
well
.
graph
can
be
fine
with
just
one
plot
,
but
it
is
often
necessari
to
show
more
than
one
plot
in
one
graph
or
in
variou
subgraph
in
one
imag
.
thi
websit
is
free
of
annoy
ad
.
We
want
to
keep
it
like
thi
.
you
can
help
with
your
donat
:
the
need
for
donat
bernd
klein
on
facebook
search
thi
websit
:
thi
topic
in
german
/
deutsch
übersetzung
:
unterdiagramm
und
subplotsclassroom
train
cours
thi
websit
contain
a
free
and
extens
onlin
tutori
by
bernd
klein
,
use
materi
from
hi
classroom
python
train
cours
.
If
you
are
interest
in
an
instructor-l
classroom
train
cours
,
you
may
have
a
look
at
the
python
class
by
bernd
klein
at
bodenseo
.
©
kabliczech
-
fotolia.com
quot
of
the
day
:
fool
ignor
complex
.
pragmatist
suffer
it
.
some
can
avoid
it
.
genius
remov
it
.
(
alan
perli
)
If
you
have
the
choic
work
with
python
2
or
python
3
,
we
recomend
to
switch
to
python
3
!
you
can
read
our
python
tutori
to
see
what
the
differ
are
.
data
protect
declar
data
protect
declar
previou
chapter
:
legend
and
annot
next
chapter
:
histogram
matplotlib
tutori
:
multipl
plot
and
doubl
axe
We
have
given
so
far
lot
of
exampl
for
plot
graph
in
the
previou
chapter
of
our
python
tutori
on
matplotlib
.
A
frequent
ask
question
is
how
to
have
multipl
plot
in
one
graph
?
In
the
simplest
case
thi
might
mean
,
that
you
have
one
curv
and
you
want
anoth
curv
print
over
it
.
thi
is
not
a
problem
,
becaus
it
will
be
enough
to
put
the
two
plot
in
your
script
,
as
we
have
seen
befor
.
the
more
interest
case
is
,
if
you
want
two
plot
in
one
window
.
In
one
window
mean
that
they
should
be
in
two
separ
sublot
,
i.e
.
not
print
on
top
of
each
other
.
the
idea
is
to
have
more
than
one
graph
in
one
window
and
each
graph
appear
in
it
own
subplot
.
We
will
present
two
differ
way
to
accomplish
thi
goal
:
subplot
gridspec
We
think
that
the
gridspec
is
the
best
option
,
becaus
it
is
a
lot
easier
to
use
,
if
the
layout
ha
to
be
more
complex
!
work
with
multipl
figur
and
axe
subplot
and
it
paramet
:
subplot
(
nrow
,
ncol
,
plot_numb
)
If
a
subplot
is
appli
to
a
figur
,
the
figur
will
be
notion
split
into
'nrow
'
*
'ncol
'
sub-ax
.
the
paramet
'plot_numb
'
identifi
the
subplot
that
the
function
call
ha
to
creat
.
'plot_numb
'
can
rang
from
1
to
a
maximum
of
'nrow
'
*
'ncol
'
.
If
the
valu
of
the
three
paramet
are
less
than
10
,
the
function
subplot
can
be
call
with
one
int
paramet
,
where
the
hundr
repres
'nrow
'
,
the
ten
repres
'ncol
'
and
the
unit
repres
'plot_numb
'
.
thi
mean
:
instead
of
subplot
(
2
,
3
,
4
)
we
can
write
subplot
(
234
)
.
In
the
follow
exampl
,
we
``
activ
''
two
subplot
of
a
notion
2x2
grid
:
%
matplotlib
inlin
import
matplotlib.pyplot
as
plt
python_course_green
=
``
#
476042
''
plt.figur
(
figsize=
(
6
,
4
)
)
plt.subplot
(
221
)
#
equival
to
:
plt.subplot
(
2
,
2
,
1
)
plt.text
(
0.5
,
#
x
coordin
,
0
leftmost
posit
,
1
rightmost
0.5
,
#
y
coordin
,
0
topmost
posit
,
1
bottommost
'subplot
(
2,2,1
)
'
,
#
the
text
which
will
be
print
horizontalalignment='cent
'
,
#
shortcut
'ha
'
verticalalignment='cent
'
,
#
shortcut
'va
'
fontsize=20
,
#
can
be
name
'font
'
as
well
alpha=.5
#
float
(
0.0
transpar
through
1.0
opaqu
)
)
plt.subplot
(
224
,
axisbg=python_course_green
)
plt.text
(
0.5
,
0.5
,
'subplot
(
2,2,4
)
'
,
ha='cent
'
,
va='cent
'
,
fontsize=20
,
color=
''
y
''
)
the
abov
python
code
return
the
follow
output
:
<
matplotlib.text.text
at
0x7f8eae650c50
>
for
our
purpos
,
we
do
n't
need
to
the
tick
on
the
axe
.
We
can
get
rid
of
them
by
set
them
to
an
emtpi
tupl
and
ad
the
follow
code
line
to
our
python
script
:
plt.xtick
(
(
)
)
plt.ytick
(
(
)
)
import
matplotlib.pyplot
as
plt
python_course_green
=
``
#
476042
''
plt.figur
(
figsize=
(
6
,
4
)
)
plt.subplot
(
221
)
#
equival
to
:
plt.subplot
(
2
,
2
,
1
)
plt.xtick
(
(
)
)
plt.ytick
(
(
)
)
plt.text
(
0.5
,
#
x
coordin
,
0
leftmost
posit
,
1
rightmost
0.5
,
#
y
coordin
,
0
topmost
posit
,
1
bottommost
'subplot
(
2,2,1
)
'
,
#
the
text
which
will
be
print
horizontalalignment='cent
'
,
#
shortcut
'ha
'
verticalalignment='cent
'
,
#
shortcut
'va
'
fontsize=20
,
#
can
be
name
'font
'
as
well
alpha=.5
#
float
(
0.0
transpar
through
1.0
opaqu
)
)
plt.subplot
(
224
,
axisbg=python_course_green
)
plt.xtick
(
(
)
)
plt.ytick
(
(
)
)
plt.text
(
0.5
,
0.5
,
'subplot
(
2,2,4
)
'
,
ha='cent
'
,
va='cent
'
,
fontsize=20
,
color=
''
y
''
)
thi
get
us
the
follow
:
<
matplotlib.text.text
at
0x7f8eae4f3ac8
>
even
though
the
previou
approach
is
accept
,
it
is
stylist
more
appropri
to
use
an
object
orient
approach
by
use
instanc
of
the
figur
class
.
We
demonstr
thi
by
rewrit
the
previou
exampl
.
IN
thi
case
,
we
have
to
appli
the
``
add_subplot
''
method
to
the
figur
object
.
We
recommend
read
the
chapter
on
oop
of
our
python
tutori
,
if
you
are
not
familar
with
object
orient
program
:
gener
introduct
into
object
orient
program
(
oop
)
class
and
instanc
attribut
properti
vs.
getter
and
setter
inherit
multipl
inherit
magic
method
and
oper
overload
the
revis
version
of
our
code
look
like
thi
:
import
matplotlib.pyplot
as
plt
python_course_green
=
``
#
476042
''
fig
=
plt.figur
(
figsize=
(
6
,
4
)
)
sub1
=
fig.add_subplot
(
221
)
#
equival
to
:
plt.subplot
(
2
,
2
,
1
)
sub1.text
(
0.5
,
#
x
coordin
,
0
leftmost
posit
,
1
rightmost
0.5
,
#
y
coordin
,
0
topmost
posit
,
1
bottommost
'subplot
(
2,2,1
)
'
,
#
the
text
which
will
be
print
horizontalalignment='cent
'
,
#
shortcut
'ha
'
verticalalignment='cent
'
,
#
shortcut
'va
'
fontsize=20
,
#
can
be
name
'font
'
as
well
alpha=.5
#
float
(
0.0
transpar
through
1.0
opaqu
)
)
sub2
=
fig.add_subplot
(
224
,
axisbg=python_course_green
)
sub2.text
(
0.5
,
0.5
,
'subplot
(
2,2,4
)
'
,
ha='cent
'
,
va='cent
'
,
fontsize=20
,
color=
''
y
''
)
the
code
abov
return
the
follow
:
<
matplotlib.text.text
at
0x7f8eae48b320
>
let
us
get
rid
of
the
tick
again
.
thi
time
we
can
not
use
plt.xtick
(
(
)
)
and
plt.ytick
(
(
)
)
.
We
have
to
use
the
set_xtick
(
(
)
)
and
set_ytick
(
(
)
)
method
instead
.
import
matplotlib.pyplot
as
plt
python_course_green
=
``
#
476042
''
fig
=
plt.figur
(
figsize=
(
6
,
4
)
)
sub1
=
fig.add_subplot
(
221
)
#
equival
to
:
plt.subplot
(
2
,
2
,
1
)
sub1.set_xtick
(
[
]
)
sub1.set_ytick
(
[
]
)
sub1.text
(
0.5
,
#
x
coordin
,
0
leftmost
posit
,
1
rightmost
0.5
,
#
y
coordin
,
0
topmost
posit
,
1
bottommost
'subplot
(
2,2,1
)
'
,
#
the
text
which
will
be
print
horizontalalignment='cent
'
,
#
shortcut
'ha
'
verticalalignment='cent
'
,
#
shortcut
'va
'
fontsize=20
,
#
can
be
name
'font
'
as
well
alpha=.5
#
float
(
0.0
transpar
through
1.0
opaqu
)
)
sub2
=
fig.add_subplot
(
224
,
axisbg=python_course_green
)
sub2.set_xtick
(
[
]
)
sub1.set_ytick
(
[
]
)
sub2.text
(
0.5
,
0.5
,
'subplot
(
2,2,4
)
'
,
ha='cent
'
,
va='cent
'
,
fontsize=20
,
color=
''
y
''
)
the
previou
code
return
the
follow
:
<
matplotlib.text.text
at
0x7f8eae3c3ba8
>
activ
all
subplot
of
the
2x2
grid
look
like
thi
:
import
matplotlib.pyplot
as
plt
python_course_green
=
``
#
476042
''
fig
=
plt.figur
(
figsize=
(
6
,
4
)
)
sub1
=
plt.subplot
(
2
,
2
,
1
)
sub1.set_xtick
(
(
)
)
sub1.set_ytick
(
(
)
)
sub1.text
(
0.5
,
0.5
,
'subplot
(
2,2,1
)
'
,
ha='cent
'
,
va='cent
'
,
size=20
,
alpha=.5
)
sub2
=
plt.subplot
(
2
,
2
,
2
)
sub2.set_xtick
(
(
)
)
sub2.set_ytick
(
(
)
)
sub2.text
(
0.5
,
0.5
,
'subplot
(
2,2,2
)
'
,
ha='cent
'
,
va='cent
'
,
size=20
,
alpha=.5
)
sub3
=
plt.subplot
(
2
,
2
,
3
)
sub3.set_xtick
(
(
)
)
sub3.set_ytick
(
(
)
)
sub3.text
(
0.5
,
0.5
,
'subplot
(
2,2,3
)
'
,
ha='cent
'
,
va='cent
'
,
size=20
,
alpha=.5
)
sub4
=
plt.subplot
(
2
,
2
,
4
,
axisbg=python_course_green
)
sub4.set_xtick
(
(
)
)
sub4.set_ytick
(
(
)
)
sub4.text
(
0.5
,
0.5
,
'subplot
(
2,2,4
)
'
,
ha='cent
'
,
va='cent
'
,
size=20
,
alpha=.5
,
color=
''
y
''
)
fig.tight_layout
(
)
plt.show
(
)
the
previou
exampl
are
sole
show
how
to
creat
a
subplot
design
.
usual
,
you
want
to
write
python
program
use
matplotlib
and
it
subplot
featur
to
depict
some
graph
.
We
will
demonstr
how
to
popul
the
previou
subplot
design
with
some
exampl
graph
:
import
numpi
as
np
from
numpi
import
e
,
pi
,
sin
,
exp
,
co
import
matplotlib.pyplot
as
plt
def
f
(
t
)
:
return
exp
(
-t
)
*
co
(
2*pi*t
)
def
fp
(
t
)
:
return
-2*pi
*
exp
(
-t
)
*
sin
(
2*pi*t
)
-
e**
(
-t
)
*co
(
2*pi*t
)
def
g
(
t
)
:
return
sin
(
t
)
*
co
(
1/
(
t+0.1
)
)
def
g
(
t
)
:
return
sin
(
t
)
*
co
(
1/
(
t
)
)
python_course_green
=
``
#
476042
''
fig
=
plt.figur
(
figsize=
(
6
,
4
)
)
t
=
np.arang
(
-5.0
,
1.0
,
0.1
)
sub1
=
fig.add_subplot
(
221
)
#
instead
of
plt.subplot
(
2
,
2
,
1
)
sub1.set_titl
(
'the
function
f
'
)
#
non
oop
:
plt.titl
(
'the
function
f
'
)
sub1.plot
(
t
,
f
(
t
)
)
sub2
=
fig.add_subplot
(
222
,
axisbg=
''
lightgrey
''
)
sub2.set_titl
(
'fp
,
the
deriv
of
f
'
)
sub2.plot
(
t
,
fp
(
t
)
)
t
=
np.arang
(
-3.0
,
2.0
,
0.02
)
sub3
=
fig.add_subplot
(
223
)
sub3.set_titl
(
'the
function
g
'
)
sub3.plot
(
t
,
g
(
t
)
)
t
=
np.arang
(
-0.2
,
0.2
,
0.001
)
sub4
=
fig.add_subplot
(
224
,
axisbg=
''
lightgrey
''
)
sub4.set_titl
(
'
A
closer
look
at
g
'
)
sub4.set_xtick
(
[
-0.2
,
-0.1
,
0
,
0.1
,
0.2
]
)
sub4.set_ytick
(
[
-0.15
,
-0.1
,
0
,
0.1
,
0.15
]
)
sub4.plot
(
t
,
g
(
t
)
)
plt.plot
(
t
,
g
(
t
)
)
plt.tight_layout
(
)
plt.show
(
)
anoth
exampl
:
import
matplotlib.pyplot
as
plt
X
=
[
(
2,1,1
)
,
(
2,3,4
)
,
(
2,3,5
)
,
(
2,3,6
)
]
for
nrow
,
ncol
,
plot_numb
in
X
:
plt.subplot
(
nrow
,
ncol
,
plot_numb
)
the
follow
exampl
show
noth
special
.
We
will
remov
the
xtick
and
play
around
with
the
size
of
the
figur
and
the
subplot
.
To
do
thi
we
introduc
the
keyword
paramt
figsiz
of
'figur
'
and
the
function
'subplot_adjust
'
along
with
it
keyword
paramet
bottom
,
left
,
top
,
right
:
import
matplotlib.pyplot
as
plt
fig
=plt.figur
(
figsize=
(
6,4
)
)
fig.subplots_adjust
(
bottom=0.025
,
left=0.025
,
top
=
0.975
,
right=0.975
)
X
=
[
(
2,1,1
)
,
(
2,3,4
)
,
(
2,3,5
)
,
(
2,3,6
)
]
for
nrow
,
ncol
,
plot_numb
in
X
:
sub
=
fig.add_subplot
(
nrow
,
ncol
,
plot_numb
)
sub.set_xtick
(
[
]
)
sub.set_ytick
(
[
]
)
altern
solut
:
As
the
first
three
three
element
of
2x3
grid
have
to
be
join
,
we
can
choos
a
tupl
notat
,
inour
case
(
1,3
)
in
(
2,3
,
(
1,3
)
)
to
defin
that
the
first
three
element
of
a
notion
2x3
grid
are
join
:
import
matplotlib.pyplot
as
plt
fig
=plt.figur
(
figsize=
(
6,4
)
)
fig.subplots_adjust
(
bottom=0.025
,
left=0.025
,
top
=
0.975
,
right=0.975
)
X
=
[
(
2,3
,
(
1,3
)
)
,
(
2,3,4
)
,
(
2,3,5
)
,
(
2,3,6
)
]
for
nrow
,
ncol
,
plot_numb
in
X
:
sub
=
fig.add_subplot
(
nrow
,
ncol
,
plot_numb
)
sub.set_xtick
(
[
]
)
sub.set_ytick
(
[
]
)
exercis
how
can
you
creat
a
subplotdesign
of
a
3x2
design
,
where
the
complet
first
column
is
span
?
solut
:
import
matplotlib.pyplot
as
plt
X
=
[
(
1,2,1
)
,
(
3,2,2
)
,
(
3,2,4
)
,
(
3,2,6
)
]
for
nrow
,
ncol
,
plot_numb
in
X
:
plt.subplot
(
nrow
,
ncol
,
plot_numb
)
plt.xtick
(
[
]
)
plt.ytick
(
[
]
)
exercisecr
a
subplot
layout
for
the
follow
design
:
solut
:
import
matplotlib.pyplot
as
plt
X
=
[
(
4,2,1
)
,
(
4,2,2
)
,
(
4,2,3
)
,
(
4,2,5
)
,
(
4,2
,
(
4,6
)
)
,
(
4,1,4
)
]
plt.subplots_adjust
(
bottom=0
,
left=0
,
top
=
0.975
,
right=1
)
for
nrow
,
ncol
,
plot_numb
in
X
:
plt.subplot
(
nrow
,
ncol
,
plot_numb
)
plt.xtick
(
[
]
)
plt.ytick
(
[
]
)
plt.show
(
)
subplot
with
gridspec
'matplotlib.gridspec
'
contain
a
class
gridspec
.
It
can
be
use
as
an
altern
to
subplot
to
specifi
the
geometri
of
the
subplot
to
be
creat
.
the
basic
idea
behind
gridspec
is
a
'grid
'
.
A
grid
is
set
up
with
a
number
of
row
and
column
.
We
have
to
defin
after
thi
,
how
much
of
the
grid
a
subplot
should
span
.
the
follow
exampl
show
the
the
trivial
or
simplest
case
,
i.e
.
a
1x1
grid
import
matplotlib.pyplot
as
plt
from
matplotlib.gridspec
import
gridspec
fig
=
plt.figur
(
)
gs
=
gridspec
(
1
,
1
)
ax
=
fig.add_subplot
(
gs
[
0,0
]
)
plt.show
(
)
We
could
have
use
some
of
the
paramet
of
gridspec
,
e.g
.
we
can
defin
,
that
our
graph
should
begin
at
20
%
from
the
bottom
and
15
%
to
the
left
side
of
the
avail
figur
area
:
import
matplotlib.pyplot
as
plt
from
matplotlib.gridspec
import
gridspec
fig
=
plt.figur
(
)
gs
=
gridspec
(
1
,
1
,
bottom=0.2
,
left=0.15
,
top=0.8
)
ax
=
fig.add_subplot
(
gs
[
0,0
]
)
plt.show
(
)
the
next
exampl
show
a
complex
exampl
with
a
more
elabor
grid
design
:
import
matplotlib.gridspec
as
gridspec
import
matplotlib.pyplot
as
pl
pl.figur
(
figsize=
(
6
,
4
)
)
G
=
gridspec.gridspec
(
3
,
3
)
axes_1
=
pl.subplot
(
G
[
0
,
:
]
)
pl.xtick
(
(
)
)
pl.ytick
(
(
)
)
pl.text
(
0.5
,
0.5
,
'ax
1
'
,
ha='cent
'
,
va='cent
'
,
size=24
,
alpha=.5
)
axes_2
=
pl.subplot
(
G
[
1
,
:
-1
]
)
pl.xtick
(
(
)
)
pl.ytick
(
(
)
)
pl.text
(
0.5
,
0.5
,
'ax
2
'
,
ha='cent
'
,
va='cent
'
,
size=24
,
alpha=.5
)
axes_3
=
pl.subplot
(
G
[
1
:
,
-1
]
)
pl.xtick
(
(
)
)
pl.ytick
(
(
)
)
pl.text
(
0.5
,
0.5
,
'ax
3
'
,
ha='cent
'
,
va='cent
'
,
size=24
,
alpha=.5
)
axes_4
=
pl.subplot
(
G
[
-1
,
0
]
)
pl.xtick
(
(
)
)
pl.ytick
(
(
)
)
pl.text
(
0.5
,
0.5
,
'ax
4
'
,
ha='cent
'
,
va='cent
'
,
size=24
,
alpha=.5
)
axes_5
=
pl.subplot
(
G
[
-1
,
-2
]
)
pl.xtick
(
(
)
)
pl.ytick
(
(
)
)
pl.text
(
0.5
,
0.5
,
'ax
5
'
,
ha='cent
'
,
va='cent
'
,
size=24
,
alpha=.5
)
pl.tight_layout
(
)
pl.show
(
)
We
will
use
now
the
grid
specif
from
the
previou
exampl
to
popul
it
with
the
graph
of
some
function
:
import
matplotlib.gridspec
as
gridspec
import
matplotlib.pyplot
as
plt
import
numpi
as
np
pl.figur
(
figsize=
(
6
,
4
)
)
G
=
gridspec.gridspec
(
3
,
3
)
X
=
np.linspac
(
0
,
2
*
np.pi
,
50
,
endpoint=tru
)
F1
=
2.8
*
np.co
(
X
)
F2
=
5
*
np.sin
(
X
)
F3
=
0.3
*
np.sin
(
X
)
axes_1
=
plt.subplot
(
G
[
0
,
:
]
)
axes_1.plot
(
X
,
F1
,
'
r-
'
,
X
,
F2
)
axes_2
=
plt.subplot
(
G
[
1
,
:
-1
]
)
axes_2.plot
(
X
,
F3
)
axes_3
=
plt.subplot
(
G
[
1
:
,
-1
]
)
axes_3.plot
(
[
1,2,3,4
]
,
[
1,10,100,1000
]
,
'
b-
'
)
axes_4
=
plt.subplot
(
G
[
-1
,
0
]
)
axes_4.plot
(
[
1,2,3,4
]
,
[
47
,
11
,
42
,
60
]
,
'
r-
'
)
axes_5
=
plt.subplot
(
G
[
-1
,
-2
]
)
axes_5.plot
(
[
1,2,3,4
]
,
[
7
,
5
,
4
,
3.8
]
)
plt.tight_layout
(
)
plt.show
(
)
work
with
object
matplotlib
is
program
and
design
--
like
python
itself
--
in
a
complet
object
orient
way
.
the
exampl
which
we
have
given
so
far
have
been
veri
simpl
,
and
to
keep
them
as
simpl
as
possibl
,
we
have
n't
work
with
figur
object
for
exampl
.
though
the
object
where
automat
creat
anyway
.
the
advantag
of
thi
approach
eman
when
more
than
one
figur
will
be
use
,
or
when
a
figur
consist
of
more
than
one
subplot
.
In
the
follow
exampl
we
creat
a
plot
in
a
strictli
object-ori
way
.
We
start
by
creat
a
new
figur
instanc
.
We
store
a
refer
it
in
a
variabl
fig
.
and
from
it
we
creat
a
new
axi
instanc
axe
use
the
add_ax
method
in
the
figur
class
instanc
fig
:
import
numpi
as
np
import
matplotlib.pyplot
as
plt
fig
=
plt.figur
(
)
X
=
np.arang
(
0,10
)
Y
=
np.random.randint
(
1,20
,
size=10
)
left
,
bottom
,
width
,
height
=
0.1
,
0.1
,
0.8
,
0.8
axe
=
fig.add_ax
(
[
left
,
bottom
,
width
,
height
]
)
axes.plot
(
X
,
Y
,
'
g
'
)
plt.show
(
fig
)
#
axes.set_xlabel
(
'
x
'
)
#
axes.set_ylabel
(
'
y
'
)
#
axes.set_titl
(
'titl
'
)
;
without
use
explicit
instanc
,
the
code
abov
look
like
thi
:
import
numpi
as
np
import
matplotlib.pyplot
as
plt
X
=
np.arang
(
0,10
)
Y
=
np.random.randint
(
1,20
,
size=10
)
plt.plot
(
X
,
Y
,
'
g
'
)
plt.show
(
)
A
plot
insid
of
anoth
plot
import
numpi
as
np
import
matplotlib.pyplot
as
plt
fig
=
plt.figur
(
)
X
=
[
1
,
2
,
3
,
4
,
5
,
6
,
7
]
Y
=
[
1
,
3
,
4
,
2
,
5
,
8
,
6
]
axes1
=
fig.add_ax
(
[
0.1
,
0.1
,
0.9
,
0.9
]
)
#
main
axe
axes2
=
fig.add_ax
(
[
0.2
,
0.6
,
0.4
,
0.3
]
)
#
inset
axe
#
main
figur
axes1.plot
(
X
,
Y
,
'
r
'
)
axes1.set_xlabel
(
'
x
'
)
axes1.set_ylabel
(
'
y
'
)
axes1.set_titl
(
'titl
'
)
#
insert
axes2.plot
(
Y
,
X
,
'
g
'
)
axes2.set_xlabel
(
'
y
'
)
axes2.set_ylabel
(
'
x
'
)
axes2.set_titl
(
'titl
insid
'
)
;
set
the
plot
rang
It
's
possibl
to
configur
the
rang
of
the
axe
.
thi
can
be
done
by
use
the
set_ylim
and
set_xlim
method
in
the
axi
object
.
with
axi
(
'tight
'
)
we
creat
automatr
``
tightli
fit
''
axe
rang
:
import
numpi
as
np
import
matplotlib.pyplot
as
plt
fig
,
axe
=
plt.subplot
(
1
,
3
,
figsize=
(
10
,
4
)
)
x
=
np.arang
(
0
,
5
,
0.25
)
axe
[
0
]
.plot
(
x
,
x**2
,
x
,
x**3
)
axe
[
0
]
.set_titl
(
``
default
axe
rang
''
)
axe
[
1
]
.plot
(
x
,
x**2
,
x
,
x**3
)
axe
[
1
]
.axi
(
'tight
'
)
axe
[
1
]
.set_titl
(
``
tight
axe
''
)
axe
[
2
]
.plot
(
x
,
x**2
,
x
,
x**3
)
axe
[
2
]
.set_ylim
(
[
0
,
60
]
)
axe
[
2
]
.set_xlim
(
[
2
,
5
]
)
axe
[
2
]
.set_titl
(
``
custom
axe
rang
''
)
;
logarithm
scale
It
is
also
possibl
to
set
a
logarithm
scale
for
one
or
both
axe
.
thi
function
is
in
fact
onli
one
applic
of
a
more
gener
transform
system
in
matplotlib
.
each
of
the
axe
'
scale
are
set
seper
use
set_xscal
and
set_yscal
method
which
accept
one
paramet
(
with
the
valu
``
log
''
in
thi
case
)
:
import
numpi
as
np
import
matplotlib.pyplot
as
plt
fig
=
plt.figur
(
)
ax
=
fig.add_subplot
(
1
,
1
,
1
)
x
=
np.arang
(
0
,
5
,
0.25
)
ax.plot
(
x
,
x**2
,
x
,
x**3
)
ax.set_yscal
(
``
log
''
)
plt.show
(
)
import
numpi
as
np
import
matplotlib.pyplot
as
plt
fig
,
ax1
=
plt.subplot
(
)
x
=
np.arang
(
1,7,0.1
)
ax1.plot
(
x
,
2
*
np.pi
*
x
,
lw=2
,
color=
''
blue
''
)
ax1.set_ylabel
(
r
''
circumfer
$
(
cm
)
$
''
,
fontsize=16
,
color=
''
blue
''
)
for
label
in
ax1.get_yticklabel
(
)
:
label.set_color
(
``
blue
''
)
ax2
=
ax1.twinx
(
)
ax2.plot
(
x
,
np.pi
*
x
**
2
,
lw=2
,
color=
''
darkgreen
''
)
ax2.set_ylabel
(
r
''
area
$
(
cm^2
)
$
''
,
fontsize=16
,
color=
''
darkgreen
''
)
for
label
in
ax2.get_yticklabel
(
)
:
label.set_color
(
``
darkgreen
''
)
the
follow
topic
are
not
directli
relat
to
subplot
,
but
we
want
to
present
them
to
round
up
the
introduct
into
the
basic
possibl
of
matplotlib
.
the
first
one
show
how
to
defin
grid
line
and
the
second
one
is
quit
import
.
It
is
about
save
plot
in
imag
file
.
grid
line
import
numpi
as
np
import
matplotlib.pyplot
as
plt
def
f
(
t
)
:
return
np.exp
(
-t
)
*
np.co
(
2*np.pi*t
)
def
g
(
t
)
:
return
np.sin
(
t
)
*
np.co
(
1/
(
t+0.1
)
)
t1
=
np.arang
(
0.0
,
5.0
,
0.1
)
t2
=
np.arang
(
0.0
,
5.0
,
0.02
)
plt.subplot
(
212
)
plt.plot
(
t1
,
g
(
t1
)
,
'ro
'
,
t2
,
f
(
t2
)
,
'
k
'
)
plt.grid
(
color=
'
b
'
,
alpha=0.5
,
linestyle='dash
'
,
linewidth=0.5
)
plt.show
(
)
save
figur
the
savefig
method
can
be
use
to
save
figur
to
a
file
:
fig.savefig
(
``
filename.png
''
)
It
is
possibl
to
option
specifi
the
dpi
and
to
choos
between
differ
output
format
:
fig.savefig
(
``
filename.png
''
,
dpi=200
)
output
can
be
gener
in
the
format
png
,
jpg
,
ep
,
svg
,
pgf
and
pdf
.
previou
chapter
:
legend
and
annot
next
chapter
:
histogram
©
2011
-
2018
,
bernd
klein
,
bodenseo
;
design
by
denis
mitchinson
adapt
for
python-course.eu
by
bernd
klein
