python
advanc
:
curri
in
python
python
advanc
cours
topic
advanc
topic
introduct
into
the
sy
modulepython
and
the
shellfork
and
fork
in
pythonintroduct
into
threadspip
,
pipe
and
``
99
bottl
of
beer
''
python
network
scannergraph
theori
and
graph
in
pythongraph
:
pygraphgraphsa
python
class
for
polynomi
functionscurri
in
pythonfinit
state
machin
in
pythontur
machin
in
pythonlevenshtein
distanceexampl
for
recurs
program
:
tower
of
hanoimastermind
/
bull
and
cowscreat
dynam
websit
with
wsgidynam
websit
with
mod_pythondynam
websit
with
pylonspython
,
sql
,
mysql
and
sqlitepython
score
haskel
brook
curri
haskel
brook
curri
(
12
sep
1900
–
1
sep
1982
)
wa
an
american
mathematician
and
logician
.
three
program
languag
have
been
name
after
him
:
haskel
,
brook
and
curri
.
the
concept
of
curri
is
also
name
after
him
.
curri
is
best
known
for
hi
work
in
combinatori
logic
.
the
initi
concept
of
combinatori
logic
wa
base
on
a
singl
paper
by
mose
schönfinkel
.
thi
is
whi
``
curri
''
is
also
known
as
``
schönfinkel
''
thi
websit
is
written
by
bernd
klein
and
support
by
:
python
cours
thi
websit
is
free
of
annoy
ad
.
We
want
to
keep
it
like
thi
.
you
can
help
with
your
donat
:
the
need
for
donat
bernd
klein
on
facebook
search
thi
websit
:
classroom
train
cours
thi
websit
contain
a
free
and
extens
onlin
tutori
by
bernd
klein
,
use
materi
from
hi
classroom
python
train
cours
.
If
you
are
interest
in
an
instructor-l
classroom
train
cours
,
you
may
have
a
look
at
the
python
class
by
bernd
klein
at
bodenseo
.
©
kabliczech
-
fotolia.com
quot
of
the
day
:
''
the
differ
between
stupid
and
geniu
is
that
geniu
ha
it
limit
''
(
albert
einstein
)
If
you
have
the
choic
work
with
python
2
or
python
3
,
we
recomend
to
switch
to
python
3
!
you
can
read
our
python
tutori
to
see
what
the
differ
are
.
data
protect
declar
data
protect
declar
previou
chapter
:
A
python
class
for
polynomi
function
next
chapter
:
finit
state
machin
in
python
curryinggener
idea
In
mathemat
and
comput
scienc
,
curri
is
the
techniqu
of
break
down
the
evalu
of
a
function
that
take
multipl
argument
into
evalu
a
sequenc
of
single-argu
functions.f
curri
is
also
use
in
theoret
comput
scienc
,
becaus
it
is
often
easier
to
transform
multipl
argument
model
into
singl
argument
model
.
composit
of
functionsw
defin
the
composit
h
of
two
function
f
and
g
$
$
h
(
x
)
=
g
(
f
(
x
)
)
$
$
in
the
follow
python
exampl
.
the
composit
of
two
function
is
a
chain
process
in
which
the
output
of
the
inner
function
becom
the
input
of
the
outer
function
.
def
compos
(
g
,
f
)
:
def
h
(
x
)
:
return
g
(
f
(
x
)
)
return
h
We
will
use
our
compos
function
in
the
next
exampl
.
let
's
assum
,
we
have
a
thermomet
,
which
is
not
work
accur
.
the
correct
temperatur
can
be
calcul
by
appli
the
function
readjust
to
the
temperatur
valu
.
let
us
further
assum
that
we
have
to
convert
our
temperatur
valu
into
degre
fahrenheit
.
We
can
do
thi
by
appli
compos
to
both
function
:
def
celsius2fahrenheit
(
t
)
:
return
1.8
*
t
+
32
def
readjust
(
t
)
:
return
0.9
*
t
-
0.5
convert
=
compos
(
readjust
,
celsius2fahrenheit
)
convert
(
10
)
,
celsius2fahrenheit
(
10
)
the
abov
python
code
return
the
follow
output
:
(
44.5
,
50.0
)
the
composit
of
two
function
is
gener
not
commut
,
i.e
.
compos
(
celsius2fahrenheit
,
readjust
)
is
differ
from
compos
(
readjust
,
celsius2fahrenheit
)
convert2
=
compos
(
celsius2fahrenheit
,
readjust
)
convert2
(
10
)
,
celsius2fahrenheit
(
10
)
the
abov
python
code
return
the
follow
output
:
(
47.3
,
50.0
)
convert2
is
not
a
solut
to
our
problem
,
becaus
it
is
not
readjust
the
origin
temeratur
of
our
thermometr
but
the
transform
fahrenheit
valu
!
exampl
currenc
conversionin
our
chapter
on
magic
function
we
had
an
excercis
on
currenc
convers
.
``
compos
''
with
arbitrari
argumentsth
function
compos
which
we
have
just
defin
can
onli
copi
with
single-argu
function
.
We
can
gener
our
function
compos
so
that
it
can
cope
with
all
possibl
function
.
In
[
]
:
def
compos
(
g
,
f
)
:
def
h
(
*arg
,
**kwarg
)
:
return
g
(
f
(
*arg
,
**kwarg
)
)
return
h
exampl
use
a
function
with
two
parmamet
.
In
[
]
:
def
bmi
(
weight
,
height
)
:
return
weight
/
height**2
def
evaluate_bmi
(
bmi
)
:
if
bmi
<
15
:
return
``
veri
sever
underweight
''
elif
bmi
<
16
:
return
``
sever
underweight
''
elif
bmi
<
18.5
:
return
``
underweight
''
elif
bmi
<
25
:
return
``
normal
(
healthi
weight
)
''
elif
bmi
<
30
:
return
``
overweight
''
elif
bmi
<
35
:
return
``
obes
class
I
(
moder
obes
)
''
elif
bmi
<
40
:
return
``
obes
class
II
(
sever
obes
)
''
els
:
return
``
obes
class
iii
(
veri
sever
obes
)
''
f
=
compos
(
evaluate_bmi
,
bmi
)
weight
=
1
while
weight
>
0
:
weight
=
float
(
input
(
``
weight
(
kg
)
``
)
)
height
=
float
(
input
(
``
height
(
m
)
``
)
)
print
(
f
(
weight
,
height
)
)
weight
(
kg
)
73
height
(
m
)
1.76
normal
(
healthi
weight
)
weight
(
kg
)
75
height
(
m
)
1.76
normal
(
healthi
weight
)
def
arimean
(
*arg
)
:
return
sum
(
arg
)
/
len
(
arg
)
def
curri
(
func
)
:
f_arg
=
[
]
f_kwarg
=
{
}
def
f
(
*arg
,
**kwarg
)
:
nonloc
f_arg
,
f_kwarg
if
arg
or
kwarg
:
f_arg
+=
arg
f_kwargs.upd
(
kwarg
)
return
f
els
:
return
func
(
*f_arg
,
*f_kwarg
)
return
f
s
=
curri
(
arimean
)
s
(
2
)
(
5
)
(
9
)
(
4
,
5
)
s
(
5
,
9
)
print
(
s
(
)
)
s2
=
curri
(
arimean
)
s2
(
2
)
(
500
)
(
9
)
(
4
,
5
)
s2
(
5
,
9
)
s2
(
)
5.571428571428571
the
previou
python
code
return
the
follow
output
:
76.28571428571429
previou
chapter
:
A
python
class
for
polynomi
function
next
chapter
:
finit
state
machin
in
python
©
2011
-
2018
,
bernd
klein
,
bodenseo
;
design
by
denis
mitchinson
adapt
for
python-course.eu
by
bernd
klein
