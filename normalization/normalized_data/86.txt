python2
tutori
:
A
tutori
python
cours
numer
program
numpi
introductioncr
numpi
arraysdata
type
object
,
dtypenumer
oper
on
numpi
arrayschang
the
dimens
of
arrayspython
,
numpi
and
probabilityweight
choic
and
weight
samplescr
of
synthet
test
databoolean
mask
of
arraysmatrix
arithmeticread
and
write
ndarraysmatplotlib
introductionspin
and
tickslegend
and
annotationsmultipl
figur
and
axeshistogramscontour
plotspython
imag
process
tutorialimag
process
techniquespanda
tutorialpanda
dataframespanda
data
filesd
with
nanbin
datapanda
tutori
continu
:
multi-level
indexingdata
visual
with
panda
and
pythonpython
,
date
and
timepython
,
panda
and
timeserieslinear
combin
python
In
greek
mytholog
,
python
is
the
name
of
a
a
huge
serpent
and
sometim
a
dragon
.
python
had
been
kill
by
the
god
apollo
at
delphi
.
python
wa
creat
out
of
the
slime
and
mud
left
after
the
great
flood
.
He
wa
appoint
by
gaia
(
mother
earth
)
to
guard
the
oracl
of
delphi
,
known
as
pytho
.
the
program
languag
python
ha
not
been
creat
out
of
slime
and
mud
but
out
of
the
program
languag
abc
.
It
ha
been
devis
by
a
dutch
programm
,
name
guido
van
rossum
,
in
amsterdam
.
origin
of
python
guido
van
rossum
wrote
the
follow
about
the
origin
of
python
in
a
foreword
for
the
book
``
program
python
''
by
mark
lutz
in
1996
:
``
over
six
year
ago
,
in
decemb
1989
,
I
wa
look
for
a
``
hobbi
''
program
project
that
would
keep
me
occupi
dure
the
week
around
christma
.
My
offic
(
a
government-run
research
lab
in
amsterdam
)
would
be
close
,
but
I
had
a
home
comput
,
and
not
much
els
on
my
hand
.
I
decid
to
write
an
interpret
for
the
new
script
languag
I
had
been
think
about
late
:
a
descend
of
abc
that
would
appeal
to
unix/c
hacker
.
I
chose
python
as
a
work
titl
for
the
project
,
be
in
a
slightli
irrever
mood
(
and
a
big
fan
of
monti
python
's
fli
circu
)
.
''
thi
websit
is
free
of
annoy
ad
.
We
want
to
keep
it
like
thi
.
you
can
help
with
your
donat
:
the
need
for
donat
bernd
klein
on
facebook
search
thi
websit
:
classroom
train
cours
thi
websit
contain
a
free
and
extens
onlin
tutori
by
bernd
klein
,
use
materi
from
hi
classroom
python
train
cours
.
If
you
are
interest
in
an
instructor-l
classroom
train
cours
,
you
may
have
a
look
at
the
python
class
by
bernd
klein
at
bodenseo
.
Â©
kabliczech
-
fotolia.com
quot
of
the
day
:
''
clearli
,
program
cours
should
teach
method
of
design
and
construct
,
and
the
select
exampl
should
be
such
that
a
gradual
develop
can
be
nice
demonstr
.
''
(
niklau
wirth
)
If
you
have
the
choic
work
with
python
2
or
python
3
,
we
recomend
to
switch
to
python
3
!
you
can
read
our
python
tutori
to
see
what
the
differ
are
.
data
protect
declar
data
protect
declar
previou
chapter
:
contour
plot
next
chapter
:
imag
process
techniqu
imag
processingintroduct
It
ha
never
as
easi
as
it
is
nowaday
to
take
a
pictur
.
all
it
usual
need
is
a
mobil
phone
.
these
are
the
bare
essenti
to
shoot
and
to
view
an
imag
.
take
a
photograph
is
free
,
if
we
do
n't
take
the
cost
for
the
mobil
phone
into
consider
.
just
a
gener
ago
,
hobbi
artist
and
real
artist
need
special
and
often
expens
and
the
cost
per
pictur
were
far
from
be
free
.
We
take
pictur
to
preserv
great
moment
in
time
.
pickl
memori
readi
to
be
``
open
''
in
the
futur
at
will
.
similar
to
pickl
thing
,
we
have
to
pay
attent
to
the
right
preserv
.
Of
cours
,
mobil
phone
also
provid
us
with
a
rang
of
imag
process
softwar
,
but
as
soon
as
we
need
to
manipul
a
huge
quantiti
of
photograph
we
need
other
tool
.
thi
is
when
program
and
python
come
into
play
.
python
and
it
modul
like
numpi
,
scipi
,
matplotlib
and
other
special
modul
provid
the
optim
function
to
be
abl
to
cope
with
the
flood
of
pictur
.
To
provid
you
with
the
necessari
knowledg
thi
chapter
of
our
python
tutori
deal
with
basic
imag
process
and
manipul
.
for
thi
purpos
we
use
the
modul
numpi
,
matplotlib
and
scipi
.
We
start
with
the
scipi
packag
misc
.
the
helpfil
say
that
scipy.misc
contain
``
variou
util
that
do
n't
have
anoth
home
''
.
#
the
follow
line
is
onli
necessari
in
python
notebook
:
%
matplotlib
inlin
from
scipi
import
misc
ascent
=
misc.asc
(
)
import
matplotlib.pyplot
as
plt
plt.gray
(
)
plt.imshow
(
ascent
)
plt.show
(
)
addit
to
the
imag
,
we
can
see
the
axi
with
the
tick
.
thi
may
be
veri
interest
,
if
you
need
some
orient
about
the
size
and
the
pixel
posit
,
but
in
most
case
,
you
want
to
see
the
imag
without
thi
inform
.
We
can
get
rid
of
the
tick
and
the
axi
by
ad
the
command
plt.axi
(
``
off
''
)
:
from
scipi
import
misc
ascent
=
misc.asc
(
)
import
matplotlib.pyplot
as
plt
plt.axi
(
``
off
''
)
#
remov
the
axi
and
the
tick
plt.gray
(
)
plt.imshow
(
ascent
)
plt.show
(
)
We
can
see
that
the
type
of
thi
imag
is
an
integ
array
:
ascent.dtyp
the
previou
code
return
the
follow
result
:
dtype
(
'int64
'
)
We
can
also
check
the
size
of
the
imag
:
ascent.shap
the
previou
python
code
return
the
follow
:
(
512
,
512
)
the
misc
packag
contain
an
imag
of
a
racoon
as
well
:
import
scipy.misc
face
=
scipy.misc.fac
(
)
print
(
face.shap
)
print
(
face.max
)
print
(
face.dtyp
)
plt.axi
(
``
off
''
)
plt.gray
(
)
plt.imshow
(
face
)
plt.show
(
)
(
768
,
1024
,
3
)
<
built-in
method
max
of
numpy.ndarray
object
at
0x7f9e70102800
>
uint8
import
matplotlib.pyplot
as
plt
onli
png
imag
are
support
by
matplotlib
img=plt.imread
(
'frankfurt.png
'
)
print
(
img
[
:3
]
)
[
[
[
0.41176471
0.56862748
0.80000001
]
[
0.40392157
0.56078434
0.79215688
]
[
0.40392157
0.56862748
0.79607844
]
...
,
[
0.48235294
0.62352943
0.81960785
]
[
0.47843137
0.627451
0.81960785
]
[
0.47843137
0.62352943
0.82745099
]
]
[
[
0.40784314
0.56470591
0.79607844
]
[
0.40392157
0.56078434
0.79215688
]
[
0.40392157
0.56862748
0.79607844
]
...
,
[
0.48235294
0.62352943
0.81960785
]
[
0.47843137
0.627451
0.81960785
]
[
0.48235294
0.627451
0.83137256
]
]
[
[
0.40392157
0.56862748
0.79607844
]
[
0.40392157
0.56862748
0.79607844
]
[
0.40392157
0.56862748
0.79607844
]
...
,
[
0.48235294
0.62352943
0.81960785
]
[
0.48235294
0.62352943
0.81960785
]
[
0.48627451
0.627451
0.83137256
]
]
]
plt.axi
(
``
off
''
)
imgplot
=
plt.imshow
(
img
)
lum_img
=
img
[
:
,
:
,1
]
print
(
lum_img
)
[
[
0.56862748
0.56078434
0.56862748
...
,
0.62352943
0.627451
0.62352943
]
[
0.56470591
0.56078434
0.56862748
...
,
0.62352943
0.627451
0.627451
]
[
0.56862748
0.56862748
0.56862748
...
,
0.62352943
0.62352943
0.627451
]
...
,
[
0.31764707
0.32941177
0.32941177
...
,
0.30588236
0.3137255
0.31764707
]
[
0.31764707
0.3137255
0.32941177
...
,
0.3019608
0.32156864
0.33725491
]
[
0.31764707
0.3019608
0.33333334
...
,
0.30588236
0.32156864
0.33333334
]
]
plt.axi
(
``
off
''
)
imgplot
=
plt.imshow
(
lum_img
)
tint
,
shade
and
tone
now
,
we
will
show
how
to
tint
an
imag
.
tint
is
an
express
from
colour
theori
and
an
often
use
techniqu
by
painter
.
think
about
painter
and
not
think
about
the
netherland
is
hard
to
imagin
.
So
we
will
use
a
pictur
with
dutch
windmil
in
our
next
exampl
.
(
the
imag
ha
been
taken
at
kinderdijk
,
a
villag
in
the
netherland
,
about
15
km
east
of
rotterdam
and
about
50
kilometr
from
den
haag
(
the
hagu
)
.
It
's
a
unesco
world
heritag
site
sinc
1997
.
)
windmil
=
plt.imread
(
'windmills.png
'
)
plt.axi
(
``
off
''
)
plt.imshow
(
windmil
)
the
abov
python
code
return
the
follow
result
:
<
matplotlib.image.axesimag
at
0x7f9e77f02f98
>
We
want
to
tint
the
imag
now
.
thi
mean
we
will
``
mix
''
our
colour
with
white
.
thi
will
increas
the
light
of
our
imag
.
for
thi
purpos
,
we
write
a
python
function
,
which
take
an
imag
and
a
percentag
valu
as
a
paramet
.
set
'percentag
'
to
0
will
not
chang
the
imag
,
set
it
to
one
mean
that
the
imag
will
be
complet
whiten
:
import
numpi
as
np
import
matplotlib.pyplot
as
plt
def
tint
(
imag
,
percent
)
:
``
''
''
imag
:
the
imag
which
will
be
shade
percent
:
a
valu
between
0
(
imag
will
remain
unchang
and
1
(
imag
will
complet
white
)
``
''
''
tinted_imag
=
imag
+
(
np.one
(
imag.shap
)
-
imag
)
*
percent
return
tinted_imag
windmil
=
plt.imread
(
'windmills.png
'
)
tinted_windmil
=
tint
(
windmil
,
0.8
)
plt.axi
(
``
off
''
)
plt.imshow
(
tinted_windmil
)
the
abov
code
return
the
follow
result
:
<
matplotlib.image.axesimag
at
0x7f9e6cd99978
>
A
shade
is
the
mixtur
of
a
color
with
black
,
which
reduc
light
.
import
numpi
as
np
import
matplotlib.pyplot
as
plt
def
shade
(
imag
,
percent
)
:
``
''
''
imag
:
the
imag
which
will
be
shade
percent
:
a
valu
between
0
(
imag
will
remain
unchang
and
1
(
imag
will
be
blacken
)
``
''
''
tinted_imag
=
imag
*
(
1
-
percent
)
return
tinted_imag
windmil
=
plt.imread
(
'windmills.png
'
)
tinted_windmil
=
shade
(
windmil
,
0.7
)
plt.imshow
(
tinted_windmil
)
the
abov
python
code
return
the
follow
:
<
matplotlib.image.axesimag
at
0x7f9e6cd20048
>
def
vertical_gradient_lin
(
imag
,
reverse=fals
)
:
``
''
''
We
creat
a
horizont
gradient
line
with
the
shape
(
1
,
image.shap
[
1
]
,
3
)
)
the
valu
are
increment
from
0
to
1
,
if
revers
is
fals
,
otherwis
the
valu
are
decrement
from
1
to
0.
``
''
''
number_of_column
=
image.shap
[
1
]
if
revers
:
C
=
np.linspac
(
1
,
0
,
number_of_column
)
els
:
C
=
np.linspac
(
0
,
1
,
number_of_column
)
C
=
np.dstack
(
(
C
,
C
,
C
)
)
return
C
horizontal_brush
=
vertical_gradient_lin
(
windmil
)
tinted_windmil
=
windmil
*
horizontal_brush
plt.axi
(
``
off
''
)
plt.imshow
(
tinted_windmil
)
thi
get
us
the
follow
output
:
<
matplotlib.image.axesimag
at
0x7f9e6ccb3d68
>
We
will
tint
the
imag
now
from
right
to
left
by
set
the
revers
paramet
of
our
python
function
to
``
true
''
:
def
vertical_gradient_lin
(
imag
,
reverse=fals
)
:
``
''
''
We
creat
a
horizont
gradient
line
with
the
shape
(
1
,
image.shap
[
1
]
,
3
)
)
the
valu
are
increment
from
0
to
1
,
if
revers
is
fals
,
otherwis
the
valu
are
decrement
from
1
to
0.
``
''
''
number_of_column
=
image.shap
[
1
]
if
revers
:
C
=
np.linspac
(
1
,
0
,
number_of_column
)
els
:
C
=
np.linspac
(
0
,
1
,
number_of_column
)
C
=
np.dstack
(
(
C
,
C
,
C
)
)
return
C
horizontal_brush
=
vertical_gradient_lin
(
windmil
,
reverse=tru
)
tinted_windmil
=
windmil
*
horizontal_brush
plt.axi
(
``
off
''
)
plt.imshow
(
tinted_windmil
)
the
code
abov
return
the
follow
:
<
matplotlib.image.axesimag
at
0x7f9e6cbc82b0
>
def
horizontal_gradient_lin
(
imag
,
reverse=fals
)
:
``
''
''
We
creat
a
vertic
gradient
line
with
the
shape
(
image.shap
[
0
]
,
1
,
3
)
)
the
valu
are
increment
from
0
to
1
,
if
revers
is
fals
,
otherwis
the
valu
are
decrement
from
1
to
0.
``
''
''
number_of_row
,
number_of_column
=
image.shap
[
:2
]
C
=
np.linspac
(
1
,
0
,
number_of_row
)
C
=
C
[
np.newaxi
,
:
]
C
=
np.concaten
(
(
C
,
C
,
C
)
)
.transpos
(
)
C
=
C
[
:
,
np.newaxi
]
return
C
vertical_brush
=
horizontal_gradient_lin
(
windmil
)
tinted_windmil
=
windmil
plt.imshow
(
tinted_windmil
)
the
abov
python
code
return
the
follow
:
<
matplotlib.image.axesimag
at
0x7f9e6cb52390
>
A
tone
is
produc
either
by
the
mixtur
of
a
color
with
gray
,
or
by
both
tint
and
shade
.
charli
=
plt.imread
(
'chaplin.png
'
)
plt.gray
(
)
print
(
charli
)
plt.imshow
(
charli
)
[
[
0.16470589
0.16862746
0.17647059
...
,
0
.
0
.
0
.
]
[
0.16078432
0.16078432
0.16470589
...
,
0
.
0
.
0
.
]
[
0.15686275
0.15686275
0.16078432
...
,
0
.
0
.
0
.
]
...
,
[
0
.
0
.
0
.
...
,
0
.
0
.
0
.
]
[
0
.
0
.
0
.
...
,
0
.
0
.
0
.
]
[
0
.
0
.
0
.
...
,
0
.
0
.
0
.
]
]
the
abov
python
code
return
the
follow
output
:
<
matplotlib.image.axesimag
at
0x7f9e6cad8438
>
color
=
np.dstack
(
(
charlie*0.1
,
charlie*1
,
charlie*0.5
)
)
plt.imshow
(
color
)
after
have
execut
the
python
code
abov
we
receiv
the
follow
:
<
matplotlib.image.axesimag
at
0x7f9e70047668
>
tint
gray
scale
imag
:
http
:
//scikit-image.org/docs/dev/auto_examples/plot_tinting_grayscale_images.html
We
will
use
differ
colormap
in
the
follow
exampl
.
the
colormap
can
be
found
in
matplotlib.pyplot.cm.datad
:
plt.cm.datad.key
(
)
thi
get
us
the
follow
output
:
dict_key
(
[
'afmhot
'
,
'autumn
'
,
'bone
'
,
'binari
'
,
'bwr
'
,
'brg
'
,
'cmrmap
'
,
'cool
'
,
'copper
'
,
'cubehelix
'
,
'flag
'
,
'gnuplot
'
,
'gnuplot2
'
,
'gray
'
,
'hot
'
,
'hsv
'
,
'jet
'
,
'ocean
'
,
'pink
'
,
'prism
'
,
'rainbow
'
,
'seismic
'
,
'spring
'
,
'summer
'
,
'terrain
'
,
'winter
'
,
'nipy_spectr
'
,
'spectral
'
,
'blue
'
,
'brbg
'
,
'bugn
'
,
'bupu
'
,
'gnbu
'
,
'green
'
,
'grey
'
,
'orang
'
,
'orrd
'
,
'piyg
'
,
'prgn
'
,
'pubu
'
,
'pubugn
'
,
'puor
'
,
'purd
'
,
'purpl
'
,
'rdbu
'
,
'rdgi
'
,
'rdpu
'
,
'rdylbu
'
,
'rdylgn
'
,
'red
'
,
'spectral
'
,
'ylgn
'
,
'ylgnbu
'
,
'ylorbr
'
,
'ylorrd
'
,
'gist_earth
'
,
'gist_gray
'
,
'gist_heat
'
,
'gist_ncar
'
,
'gist_rainbow
'
,
'gist_stern
'
,
'gist_yarg
'
,
'coolwarm
'
,
'wistia
'
,
'accent
'
,
'dark2
'
,
'pair
'
,
'pastel1
'
,
'pastel2
'
,
'set1
'
,
'set2
'
,
'set3
'
,
'tab10
'
,
'tab20
'
,
'tab20b
'
,
'tab20c
'
,
'vega10
'
,
'vega20
'
,
'vega20b
'
,
'vega20c
'
,
'afmhot_r
'
,
'autumn_r
'
,
'bone_r
'
,
'binary_r
'
,
'bwr_r
'
,
'brg_r
'
,
'cmrmap_r
'
,
'cool_r
'
,
'copper_r
'
,
'cubehelix_r
'
,
'flag_r
'
,
'gnuplot_r
'
,
'gnuplot2_r
'
,
'gray_r
'
,
'hot_r
'
,
'hsv_r
'
,
'jet_r
'
,
'ocean_r
'
,
'pink_r
'
,
'prism_r
'
,
'rainbow_r
'
,
'seismic_r
'
,
'spring_r
'
,
'summer_r
'
,
'terrain_r
'
,
'winter_r
'
,
'nipy_spectral_r
'
,
'spectral_r
'
,
'blues_r
'
,
'brbg_r
'
,
'bugn_r
'
,
'bupu_r
'
,
'gnbu_r
'
,
'greens_r
'
,
'greys_r
'
,
'oranges_r
'
,
'orrd_r
'
,
'piyg_r
'
,
'prgn_r
'
,
'pubu_r
'
,
'pubugn_r
'
,
'puor_r
'
,
'purd_r
'
,
'purples_r
'
,
'rdbu_r
'
,
'rdgy_r
'
,
'rdpu_r
'
,
'rdylbu_r
'
,
'rdylgn_r
'
,
'reds_r
'
,
'spectral_r
'
,
'ylgn_r
'
,
'ylgnbu_r
'
,
'ylorbr_r
'
,
'ylorrd_r
'
,
'gist_earth_r
'
,
'gist_gray_r
'
,
'gist_heat_r
'
,
'gist_ncar_r
'
,
'gist_rainbow_r
'
,
'gist_stern_r
'
,
'gist_yarg_r
'
,
'coolwarm_r
'
,
'wistia_r
'
,
'accent_r
'
,
'dark2_r
'
,
'paired_r
'
,
'pastel1_r
'
,
'pastel2_r
'
,
'set1_r
'
,
'set2_r
'
,
'set3_r
'
,
'tab10_r
'
,
'tab20_r
'
,
'tab20b_r
'
,
'tab20c_r
'
,
'vega10_r
'
,
'vega20_r
'
,
'vega20b_r
'
,
'vega20c_r
'
]
)
import
numpi
as
np
import
matplotlib.pyplot
as
plt
charli
=
plt.imread
(
'chaplin.png
'
)
#
colormap
plt.cm.datad
#
cmap
=
set
(
plt.cm.datad.key
(
)
)
cmap
=
{
'afmhot
'
,
'autumn
'
,
'bone
'
,
'binari
'
,
'bwr
'
,
'brg
'
,
'cmrmap
'
,
'cool
'
,
'copper
'
,
'cubehelix
'
,
'green
'
}
X
=
[
(
4,3,1
,
(
1
,
0
,
0
)
)
,
(
4,3,2
,
(
0.5
,
0.5
,
0
)
)
,
(
4,3,3
,
(
0
,
1
,
0
)
)
,
(
4,3,4
,
(
0
,
0.5
,
0.5
)
)
,
(
4,3
,
(
5,8
)
,
(
0
,
0
,
1
)
)
,
(
4,3,6
,
(
1
,
1
,
0
)
)
,
(
4,3,7
,
(
0.5
,
1
,
0
)
)
,
(
4,3,9
,
(
0
,
0.5
,
0.5
)
)
,
(
4,3,10
,
(
0
,
0.5
,
1
)
)
,
(
4,3,11
,
(
0
,
1
,
1
)
)
,
(
4,3,12
,
(
0.5
,
1
,
1
)
)
]
fig
=
plt.figur
(
figsize=
(
6
,
5
)
)
#
fig.subplots_adjust
(
bottom=0
,
left=0
,
top
=
0.975
,
right=1
)
for
nrow
,
ncol
,
plot_numb
,
factor
in
X
:
sub
=
fig.add_subplot
(
nrow
,
ncol
,
plot_numb
)
sub.set_xtick
(
[
]
)
plt.color
(
)
sub.imshow
(
charlie*0.0002
,
cmap=cmaps.pop
(
)
)
sub.set_ytick
(
[
]
)
#
fig.show
(
)
previou
chapter
:
contour
plot
next
chapter
:
imag
process
techniqu
Â©
2011
-
2018
,
bernd
klein
,
bodenseo
;
design
by
denis
mitchinson
adapt
for
python-course.eu
by
bernd
klein
