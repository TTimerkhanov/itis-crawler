python
tutori
:
'the
abc
'
of
abstract
base
class
python
cours
python
3
tutori
the
origin
of
pythonstart
with
python
:
the
interact
shellexecut
a
scriptindentationdata
type
and
variablesoperatorssequenti
data
type
:
list
and
stringslist
manipulationsshallow
and
deep
copydictionariesset
and
frozen
setsan
extens
exampl
use
setsinput
via
the
keyboardcondit
statementsloop
,
while
loopfor
loopsdiffer
between
inter
und
iterablesoutput
with
printformat
output
with
string
modulo
and
the
format
methodfunctionsrecurs
and
recurs
functionsparamet
pass
in
functionsnamespacesglob
and
local
variablesdecoratorsmemo
with
decoratorsread
and
write
filesmodular
program
and
modulespackag
in
pythonregular
expressionsregular
express
,
advancedlambda
oper
,
filter
,
reduc
and
maplist
comprehensioniter
and
generatorsexcept
handlingtest
,
doctest
,
unittestsobject
orient
programmingclass
and
instanc
attributesproperti
vs.
getter
and
settersinheritancemultipl
inheritancemag
method
and
oper
overloadingoop
,
inherit
exampleslotsclass
and
class
creationroad
to
metaclassesmetaclassesmetaclass
use
case
:
count
function
callsabstract
class
inher
abstract
``
but
it
is
a
pipe
.
''
``
No
,
it
's
not
,
''
I
said
.
``
It
's
a
draw
of
a
pipe
.
get
it
?
all
represent
of
a
thing
are
inher
abstract
.
It
's
veri
clever
.
''
(
john
green
,
the
fault
in
our
star
)
thi
websit
is
support
by
:
pyt
hon
cours
and
seminar
thi
websit
is
free
of
annoy
ad
.
We
want
to
keep
it
like
thi
.
you
can
help
with
your
donat
:
the
need
for
donat
bernd
klein
on
facebook
search
thi
websit
:
python
3thi
is
a
tutori
in
python3
,
but
thi
chapter
of
our
cours
is
avail
in
a
version
for
python
2.x
as
well
:
'the
abc
'
of
abstract
base
class
in
python
2.x
train
class
thi
websit
aim
at
provid
you
with
educ
materi
suitabl
for
self-learn
.
nevertheless
,
it
is
faster
and
more
effici
to
attend
a
``
real
''
python
cours
in
a
classroom
,
with
an
experienc
trainer
.
So
whi
not
attend
one
of
the
live
python
cours
in
strasbourg
,
pari
,
london
,
berlin
,
munich
,
hamburg
,
frankfurt
,
or
lake
constanc
by
bernd
klein
,
the
author
of
thi
tutori
?
in-hous
train
cours
If
you
like
it
,
we
will
come
to
your
compani
or
institut
and
provid
a
special
train
for
your
employe
,
as
we
've
done
it
mani
time
in
amsterdam
(
the
netherland
)
,
berlin
(
germani
)
,
bern
(
switzerland
)
,
basel
(
switzerland
)
,
zurich
(
switzerland
)
,
frankfurt
(
germani
)
,
locarno
(
switzerland
)
,
den
haag
(
the
hagu
)
,
hamburg
,
munich
(
germani
)
,
bucharest
(
romania
)
,
toronto
(
canada
)
,
edmonton
(
canada
)
,
and
mani
other
citi
.
We
do
train
cours
in
england
,
switzerland
,
liechtenstein
,
austria
,
germani
,
franc
,
belgium
,
the
netherland
,
luxembourg
,
romania
,
UK
,
itali
,
spain
and
other
locat
in
europ
and
in
canada
.
thi
way
you
will
get
a
perfect
train
up
to
your
need
and
it
will
be
extrem
cost
effici
as
well
.
contact
us
so
we
can
find
the
ideal
cours
to
meet
your
need
.
skill
python
programm
you
are
look
for
experienc
python
develop
or
programm
?
We
can
help
you
,
pleas
contact
us
.
quot
of
the
day
:
''
much
of
my
work
ha
come
from
be
lazi
.
I
did
n't
like
write
program
,
and
so
,
when
I
wa
work
on
the
ibm
701
,
write
program
for
comput
missil
trajectori
,
I
start
work
on
a
program
system
to
make
it
easier
to
write
program
.
''
(
john
W.
backu
)
data
protect
declar
data
protect
declar
previou
chapter
:
metaclass
use
case
:
count
function
call
abstract
class
abstract
class
are
class
that
contain
one
or
more
abstract
method
.
An
abstract
method
is
a
method
that
is
declar
,
but
contain
no
implement
.
abstract
class
may
not
be
instanti
,
and
requir
subclass
to
provid
implement
for
the
abstract
method
.
subclass
of
an
abstract
class
in
python
are
not
requir
to
implement
abstract
method
of
the
parent
class
.
let
's
look
at
the
follow
exampl
:
class
abstractclass
:
def
do_someth
(
self
)
:
pass
class
B
(
abstractclass
)
:
pass
a
=
abstractclass
(
)
b
=
B
(
)
If
we
start
thi
program
,
we
see
that
thi
is
not
an
abstract
class
,
becaus
:
we
can
instanti
an
instanc
from
we
are
not
requir
to
implement
do_someth
in
the
class
defintit
of
B
our
exampl
implement
a
case
of
simpl
inherit
which
ha
noth
to
do
with
an
abstract
class
.
In
fact
,
python
on
it
own
doe
n't
provid
abstract
class
.
yet
,
python
come
with
a
modul
which
provid
the
infrastructur
for
defin
abstract
base
class
(
abc
)
.
thi
modul
is
call
-
for
obviou
reason
-
abc
.
the
follow
python
code
use
the
abc
modul
and
defin
an
abstract
base
class
:
from
abc
import
abc
,
abstractmethod
class
abstractclassexampl
(
abc
)
:
def
__init__
(
self
,
valu
)
:
self.valu
=
valu
super
(
)
.__init__
(
)
@
abstractmethod
def
do_someth
(
self
)
:
pass
We
will
defin
now
a
subclass
use
the
previous
defin
abstract
class
.
you
will
notic
that
we
have
n't
implement
the
do_someth
method
,
even
though
we
are
requir
to
implement
it
,
becaus
thi
method
is
decor
as
an
abstract
method
with
the
decor
``
abstractmethod
''
.
We
get
an
except
that
doadd42
ca
n't
be
instanti
:
class
doadd42
(
abstractclassexampl
)
:
pass
x
=
doadd42
(
4
)
the
previou
python
code
return
the
follow
output
:
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
-
typeerror
traceback
(
most
recent
call
last
)
<
ipython-input-9-83fb8cead43d
>
in
<
modul
>
(
)
2
pass
3
--
--
>
4
x
=
doadd42
(
4
)
typeerror
:
Ca
n't
instanti
abstract
class
doadd42
with
abstract
method
do_someth
We
will
do
it
the
correct
way
in
the
follow
exampl
,
in
which
we
defin
two
class
inherit
from
our
abstract
class
:
class
doadd42
(
abstractclassexampl
)
:
def
do_someth
(
self
)
:
return
self.valu
+
42
class
domul42
(
abstractclassexampl
)
:
def
do_someth
(
self
)
:
return
self.valu
*
42
x
=
doadd42
(
10
)
y
=
domul42
(
10
)
print
(
x.do_someth
(
)
)
print
(
y.do_someth
(
)
)
52
420
A
class
that
is
deriv
from
an
abstract
class
can
not
be
instanti
unless
all
of
it
abstract
method
are
overridden
.
you
may
think
that
abstract
method
ca
n't
be
implement
in
the
abstract
base
class
.
thi
impress
is
wrong
:
An
abstract
method
can
have
an
implement
in
the
abstract
class
!
even
if
they
are
implement
,
design
of
subclass
will
be
forc
to
overrid
the
implement
.
like
in
other
case
of
``
normal
''
inherit
,
the
abstract
method
can
be
invok
with
super
(
)
call
mechan
.
thi
make
it
possibl
to
provid
some
basic
function
in
the
abstract
method
,
which
can
be
enrich
by
the
subclass
implement
.
from
abc
import
abc
,
abstractmethod
class
abstractclassexampl
(
abc
)
:
@
abstractmethod
def
do_someth
(
self
)
:
print
(
``
some
implement
!
''
)
class
anothersubclass
(
abstractclassexampl
)
:
def
do_someth
(
self
)
:
super
(
)
.do_someth
(
)
print
(
``
the
enrich
from
anothersubclass
''
)
x
=
anothersubclass
(
)
x.do_someth
(
)
some
implement
!
the
enrich
from
anothersubclass
previou
chapter
:
metaclass
use
case
:
count
function
call
Â©
2011
-
2018
,
bernd
klein
,
bodenseo
;
design
by
denis
mitchinson
adapt
for
python-course.eu
by
bernd
klein
