numer
&
scientif
comput
with
python
:
imag
process
:
cut
,
join
,
blend
,
watermark
numer
python
cours
numer
program
numpi
introductioncr
numpi
arraysdata
type
object
,
dtypenumer
oper
on
numpi
arrayschang
the
dimens
of
arrayspython
,
numpi
and
probabilityweight
choic
and
weight
samplescr
of
synthet
test
databoolean
mask
of
arraysmatrix
arithmeticread
and
write
ndarraysmatplotlib
introductionspin
and
tickslegend
and
annotationsmultipl
figur
and
axeshistogramscontour
plotspython
imag
process
tutorialimag
process
techniquespanda
tutorialpanda
dataframespanda
data
filesd
with
nanbin
datapanda
tutori
continu
:
multi-level
indexingdata
visual
with
panda
and
pythonpython
,
date
and
timepython
,
panda
and
timeserieslinear
combin
python
In
greek
mytholog
,
python
is
the
name
of
a
a
huge
serpent
and
sometim
a
dragon
.
python
had
been
kill
by
the
god
apollo
at
delphi
.
python
wa
creat
out
of
the
slime
and
mud
left
after
the
great
flood
.
He
wa
appoint
by
gaia
(
mother
earth
)
to
guard
the
oracl
of
delphi
,
known
as
pytho
.
the
program
languag
python
ha
not
been
creat
out
of
slime
and
mud
but
out
of
the
program
languag
abc
.
It
ha
been
devis
by
a
dutch
programm
,
name
guido
van
rossum
,
in
amsterdam
.
origin
of
python
guido
van
rossum
wrote
the
follow
about
the
origin
of
python
in
a
foreword
for
the
book
``
program
python
''
by
mark
lutz
in
1996
:
``
over
six
year
ago
,
in
decemb
1989
,
I
wa
look
for
a
``
hobbi
''
program
project
that
would
keep
me
occupi
dure
the
week
around
christma
.
My
offic
(
a
government-run
research
lab
in
amsterdam
)
would
be
close
,
but
I
had
a
home
comput
,
and
not
much
els
on
my
hand
.
I
decid
to
write
an
interpret
for
the
new
script
languag
I
had
been
think
about
late
:
a
descend
of
abc
that
would
appeal
to
unix/c
hacker
.
I
chose
python
as
a
work
titl
for
the
project
,
be
in
a
slightli
irrever
mood
(
and
a
big
fan
of
monti
python
's
fli
circu
)
.
''
thi
websit
is
free
of
annoy
ad
.
We
want
to
keep
it
like
thi
.
you
can
help
with
your
donat
:
the
need
for
donat
bernd
klein
on
facebook
search
thi
websit
:
thi
topic
in
german
/
deutsch
übersetzung
:
techniken
der
bildverarbeitungclassroom
train
cours
thi
websit
contain
a
free
and
extens
onlin
tutori
by
bernd
klein
,
use
materi
from
hi
classroom
python
train
cours
.
If
you
are
interest
in
an
instructor-l
classroom
train
cours
,
you
may
have
a
look
at
the
python
class
by
bernd
klein
at
bodenseo
.
©
kabliczech
-
fotolia.com
quot
of
the
day
:
''
I
think
the
special
thing
about
python
is
that
it
's
a
writer
'
commun
.
the
writer
are
in
charg
.
the
writer
decid
what
the
materi
is
.
''
(
eric
idl
)
If
you
have
the
choic
work
with
python
2
or
python
3
,
we
recomend
to
switch
to
python
3
!
you
can
read
our
python
tutori
to
see
what
the
differ
are
.
data
protect
declar
data
protect
declar
previou
chapter
:
python
imag
process
tutori
next
chapter
:
panda
tutori
imag
process
techniqu
introduct
As
you
may
have
notic
,
each
of
our
page
in
our
variou
tutori
are
introduc
by
eye
candi
pictur
,
which
have
creat
with
great
care
to
enrich
the
content
.
one
of
those
imag
ha
been
the
raison
d'être
of
thi
chapter
.
We
want
to
demonstr
how
we
creat
the
pictur
for
our
chapter
on
decor
.
the
idea
wa
to
play
with
decor
in
``
real
life
''
,
small
icon
with
imag
of
small
worker
paint
a
room
and
on
the
other
hand
blend
thi
with
the
``
at
''
sign
,
the
python
symbol
for
decor
.
It
is
also
a
good
exampl
of
how
to
creat
a
watermark
.
We
will
demonstr
in
thi
chapter
the
whole
process
chain
of
how
we
creat
thi
imag
.
the
pictur
on
the
right
side
of
the
current
page
ha
also
been
creat
the
same
way
but
use
a
director
's
chair
on
a
small
painter
background
as
a
watermark
instead
of
the
at
sign
.
At
first
,
we
write
a
function
``
imag_til
''
for
tile
imag
both
in
horizont
and
in
vertic
direct
.
We
will
use
thi
to
creat
the
background
of
our
imag
.
then
we
show
how
to
cut
out
with
slice
a
cutout
or
an
excerpt
of
an
imag
.
We
will
use
the
shade
function
,
which
we
introduc
in
our
previou
chapter
on
imag
process
,
to
shade
our
imag
.
final
,
we
will
use
the
origin
imag
,
the
shade
imag
,
plu
an
imag
with
a
binari
at
sign
with
the
condit
numpi
where
function
to
creat
the
final
imag
.
the
final
imag
contain
the
at
sign
as
a
watermark
,
cut
out
from
the
shade
imag
.
tile
an
imag
the
function
imag_til
,
which
we
are
go
to
design
,
can
be
best
explain
with
the
follow
diagram
:
the
function
imag_til
imag_til
(
img
,
n
,
m
)
creat
a
tile
imag
by
append
an
imag
``
img
''
m
time
in
horizont
direct
.
after
thi
we
append
the
strip
imag
consist
of
m
img
imag
n
time
in
vertic
direct
.
In
the
follow
code
,
we
use
a
pictur
of
for
paint
decor
as
the
tile
imag
:
%
matplotlib
inlin
import
matplotlib.pyplot
as
plt
import
matplotlib.imag
as
mpimg
import
numpi
as
np
def
imag_til
(
img
,
n
,
m=1
)
:
``
''
''
the
imag
``
img
''
will
be
repeat
n
time
in
vertic
and
m
time
in
horizont
direction.
``
''
''
if
n
==
1
:
tiled_img
=
img
els
:
lst_img
=
[
]
for
i
in
rang
(
n
)
:
lst_imgs.append
(
img
)
tiled_img
=
np.concaten
(
lst_img
,
axis=1
)
if
m
>
1
:
lst_img
=
[
]
for
i
in
rang
(
m
)
:
lst_imgs.append
(
tiled_img
)
tiled_img
=
np.concaten
(
lst_img
,
axis=0
)
return
tiled_img
basic_pattern
=
mpimg.imread
(
'decorators_b2.png
'
)
decorators_img
=
imag_til
(
basic_pattern
,
3
,
3
)
plt.axi
(
``
off
''
)
plt.imshow
(
decorators_img
)
thi
get
us
the
follow
output
:
<
matplotlib.image.axesimag
at
0x7f29cf529a20
>
An
imag
is
a
3-dimension
numpi
ndarray
.
type
(
basic_pattern
)
the
abov
code
return
the
follow
result
:
numpy.ndarray
the
first
three
row
of
our
imag
basic_pattern
look
like
thi
:
basic_pattern
[
:3
]
thi
get
us
the
follow
:
array
(
[
[
[
1.
,
1.
,
1
.
]
,
[
1.
,
1.
,
1
.
]
,
[
1.
,
1.
,
1
.
]
,
...
,
[
1.
,
1.
,
1
.
]
,
[
1.
,
1.
,
1
.
]
,
[
1.
,
1.
,
1
.
]
]
,
[
[
1.
,
1.
,
1
.
]
,
[
1.
,
1.
,
1
.
]
,
[
1.
,
1.
,
1
.
]
,
...
,
[
1.
,
1.
,
1
.
]
,
[
1.
,
1.
,
1
.
]
,
[
1.
,
1.
,
1
.
]
]
,
[
[
1.
,
1.
,
1
.
]
,
[
1.
,
1.
,
1
.
]
,
[
1.
,
1.
,
1
.
]
,
...
,
[
1.
,
1.
,
1
.
]
,
[
1.
,
1.
,
1
.
]
,
[
1.
,
1.
,
1
.
]
]
]
,
dtype=float32
)
the
innermost
list
of
our
imag
contain
the
pixel
.
We
have
three
valu
correspond
the
the
R
,
G
,
and
B
valu
,
thi
mean
that
we
have
a
24-bit
rgb
png
imag
,
eight
bit
for
each
of
R
,
G
,
B.
png
imag
might
also
consist
of
32-bit
imag
(
rgba
)
.
the
fourth
valu
``
A
''
will
be
use
for
transpar
,
singl
channel
grayscal
.
It
's
easi
to
access
indivu
pixel
by
index
,
e.g
.
the
pixel
in
row
100
and
column
20
:
basic_pattern
[
100
,
28
]
after
have
execut
the
python
code
abov
we
receiv
the
follow
result
:
array
(
[
0.90196079
,
0.89019608
,
0.86274511
]
,
dtype=float32
)
As
we
have
seen
,
the
pixel
are
float
(
float32
)
valu
between
0
and
1
.
matplotlib
plot
can
handl
both
float32
and
uint8
for
png
imag
.
for
all
other
format
it
will
be
onli
uint8
.
crop
imag
We
can
also
crop
subimag
with
the
slice
function
.
We
crop
the
imag
from
(
90
,
50
)
,
i.e
.
row
90
and
column
50
,
to
(
50
,
120
)
in
the
follow
exampl
:
crop
=
basic_pattern
[
90:150
,
50:120
]
plt.axi
(
``
off
''
)
plt.imshow
(
crop
)
the
abov
code
return
the
follow
output
:
<
matplotlib.image.axesimag
at
0x7f29cf3bdd30
>
We
will
need
thi
techniqu
in
the
follow
.
We
will
load
the
imag
of
an
at
sign
in
the
follow
script
:
We
can
use
the
slice
function
to
crop
part
of
an
imag
.
We
will
use
thi
to
make
sure
that
both
imag
have
the
same
size
.
at_img=mpimg.imread
(
'at_sign.png
'
)
#
at_img
and
decorators_img
have
to
be
of
equal
size
:
d_shape
=
decorators_img.shap
at_shap
=
at_img.shap
height
,
width
,
colour
=
[
min
(
x
)
for
x
in
zip
(
*
(
d_shape
,
at_shap
)
)
]
at_img
=
at_img
[
0
:
height
,
0
:
width
]
shade
an
imag
We
defin
a
function
``
shade
''
in
the
follow
script
.
``
shade
''
take
two
paramet
.
the
first
one
``
imag
''
is
the
imag
,
which
will
be
shade
and
the
second
one
is
the
shade
factor
.
It
can
be
a
valu
between
0
and
1
.
If
the
factor
is
set
to
0
,
imag
will
remain
unchang
.
If
set
to
one
,
the
imag
will
be
completet
blacken
.
def
shade
(
imag
,
percent
)
:
``
''
''
imag
:
the
imag
which
will
be
shade
percent
:
a
valu
between
0
(
imag
will
remain
unchang
and
1
(
imag
will
be
blacken
)
``
''
''
tinted_imag
=
imag
*
(
1
-
percent
)
return
tinted_imag
tinted_decorator_img
=
shade
(
decorators_img
,
0.5
)
plt.imshow
(
tinted_decorator_img
)
print
(
tinted_decorator_img
[
:3
]
)
thi
get
us
the
follow
result
:
[
[
[
0.5
0.5
0.5
]
[
0.5
0.5
0.5
]
[
0.5
0.5
0.5
]
...
,
[
0.5
0.5
0.5
]
[
0.5
0.5
0.5
]
[
0.5
0.5
0.5
]
]
[
[
0.5
0.5
0.5
]
[
0.5
0.5
0.5
]
[
0.5
0.5
0.5
]
...
,
[
0.5
0.5
0.5
]
[
0.5
0.5
0.5
]
[
0.5
0.5
0.5
]
]
[
[
0.5
0.5
0.5
]
[
0.5
0.5
0.5
]
[
0.5
0.5
0.5
]
...
,
[
0.5
0.5
0.5
]
[
0.5
0.5
0.5
]
[
0.5
0.5
0.5
]
]
]
blend
imag
first
exampl
We
have
everyth
togeth
now
to
creat
the
blend
imag
.
our
at
sign
pictur
consist
of
black
and
white
pixel
.
the
blend
imag
is
construct
like
thi
:
let
p=
(
n
,
m
)
be
an
arbitrari
pixel
in
the
n-th
row
and
m-th
column
of
the
imag
at_imag
.
If
the
valu
of
thi
pixel
is
not
black
or
dark
gray
,
we
will
use
the
pixel
at
posit
(
n
,
m
)
from
the
pictur
decorators_img
,
otherwis
,
we
will
use
the
correspond
pixel
from
tinted_decorator_img
.
the
where
function
of
numpi
is
ideal
for
thi
task
:
print
(
at_img.shap
,
decorators_img.shap
,
tinted_decorator_img.shap
)
basic_pattern
=
mpimg.imread
(
'decorators2.png
'
)
img2
=
np.where
(
at_img
>
[
0.1
,
0.1
,
0.1
]
,
decorators_img
,
tinted_decorator_img
)
plt.axi
(
``
off
''
)
plt.imshow
(
img2
)
after
have
execut
the
python
code
abov
we
receiv
the
follow
output
:
(
1077
,
771
,
3
)
(
1077
,
771
,
3
)
(
1077
,
771
,
3
)
after
have
execut
the
python
code
abov
we
receiv
the
follow
result
:
<
matplotlib.image.axesimag
at
0x7f29cf422b70
>
all
there
is
left
to
do
is
save
the
newli
creat
imag
:
mpimg.imsav
(
'decorators_with_at.png
'
,
img2
)
second
exampl
We
want
to
use
now
a
differ
imag
as
a
``
watermark
''
.
instead
of
the
at
sign
,
we
want
to
use
now
a
director
's
chair
.
We
will
creat
the
imag
from
the
top
of
thi
page
.
imag
=
[
mpimg.imread
(
fname
)
for
fname
in
[
``
director_chair.png
''
,
``
the_sea.png
''
,
``
the_sky.png
''
]
]
director_chair
,
sea
,
sky
=
imag
plt.axi
(
``
off
''
)
plt.imshow
(
sea
)
We
receiv
the
follow
output
:
<
matplotlib.image.axesimag
at
0x7f29cf4274a8
>
plt.axi
(
``
off
''
)
plt.imshow
(
director_chair
)
In
the
follow
,
we
blend
togeth
the
imag
director_chair
,
decorators_img
and
sea
by
use
where
of
numpi
onc
more
:
#
sea2
=
mpimg.imread
(
'the_sea2.png
'
)
img
=
np.where
(
director_chair
>
[
0.9
,
0.9
,
0.9
]
,
decorators_img
,
sea
)
plt.axi
(
``
off
''
)
plt.imshow
(
img
)
mpimg.imsav
(
'decorators_with_chair
'
,
img
)
We
could
have
use
``
image.open
''
from
pil
instead
of
mpimg.imread
from
matplotlib
to
read
in
the
pictur
.
there
is
a
crucial
differ
or
a
potenti
``
problem
''
between
these
two
way
:
the
imag
we
get
from
imread
ha
valu
between
0
and
1
,
wherea
image.open
consist
of
valu
between
0
and
255
.
So
we
might
have
to
divid
all
the
pixel
by
255
,
if
we
have
to
work
with
an
imag
read
in
by
mpimg.imread
:
from
pil
import
imag
img
=
image.open
(
``
director_chair.jpg
''
)
img
=
img.res
(
(
at_img.shap
[
1
]
,
at_img.shap
[
0
]
)
)
img
=
np.asarray
(
img
)
plt.axi
(
``
off
''
)
plt.imshow
(
img
)
print
(
img
[
100
,
129
]
)
the
python
code
abov
return
the
follow
:
[
27
27
27
]
#
pil
:
pixel
are
within
rang
0
and
255
#
mpimg
:
rang
0
bi
1
img
=
np.asarray
(
img
,
np.float
)
img
=
img
/
255
print
(
img
[
100
,
129
]
)
the
abov
python
code
return
the
follow
output
:
[
0.00041522
0.00041522
0.00041522
]
previou
chapter
:
python
imag
process
tutori
next
chapter
:
panda
tutori
©
2011
-
2018
,
bernd
klein
,
bodenseo
;
design
by
denis
mitchinson
adapt
for
python-course.eu
by
bernd
klein
