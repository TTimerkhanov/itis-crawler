python2
tutori
:
object
orient
program
python
cours
python
2
tutori
histori
and
philosophi
of
pythonwhi
python
?
interact
modeexecut
a
scriptstructur
with
indentationdata
type
and
variablesoperatorsinput
and
raw_input
via
the
keyboardcondit
statementswhil
loopsfor
loopsformat
outputoutput
with
printsequenti
data
typeslist
manipulationdictionariesset
and
frozen
setsshallow
and
deep
copyfunctionsrecurs
and
recurs
functionstest
,
doctest
,
unittestsdecoratorsmemo
with
decoratorspass
argumentsnamespacesglob
vs.
local
variablesfil
managementmodular
program
and
modulesintroduct
in
regular
expressionsregular
express
,
advancedlambda
oper
,
filter
,
reduc
and
maplist
comprehensiongeneratorsexcept
handlingobject
orient
programminginherit
exampleslotsclass
and
class
creationroad
to
metaclassesmetaclassesmetaclass
exampl
:
count
function
callsabstract
class
python
In
greek
mytholog
,
python
is
the
name
of
a
a
huge
serpent
and
sometim
a
dragon
.
python
had
been
kill
by
the
god
apollo
at
delphi
.
python
wa
creat
out
of
the
slime
and
mud
left
after
the
great
flood
.
He
wa
appoint
by
gaia
(
mother
earth
)
to
guard
the
oracl
of
delphi
,
known
as
pytho
.
the
program
languag
python
ha
not
been
creat
out
of
slime
and
mud
but
out
of
the
program
languag
abc
.
It
ha
been
devis
by
a
dutch
programm
,
name
guido
van
rossum
,
in
amsterdam
.
origin
of
python
guido
van
rossum
wrote
the
follow
about
the
origin
of
python
in
a
foreword
for
the
book
``
program
python
''
by
mark
lutz
in
1996
:
``
over
six
year
ago
,
in
decemb
1989
,
I
wa
look
for
a
``
hobbi
''
program
project
that
would
keep
me
occupi
dure
the
week
around
christma
.
My
offic
(
a
government-run
research
lab
in
amsterdam
)
would
be
close
,
but
I
had
a
home
comput
,
and
not
much
els
on
my
hand
.
I
decid
to
write
an
interpret
for
the
new
script
languag
I
had
been
think
about
late
:
a
descend
of
abc
that
would
appeal
to
unix/c
hacker
.
I
chose
python
as
a
work
titl
for
the
project
,
be
in
a
slightli
irrever
mood
(
and
a
big
fan
of
monti
python
's
fli
circu
)
.
''
thi
websit
is
free
of
annoy
ad
.
We
want
to
keep
it
like
thi
.
you
can
help
with
your
donat
:
the
need
for
donat
bernd
klein
on
facebook
search
thi
websit
:
thi
topic
in
german
/
deutsch
übersetzung
:
objekt
orientiert
programmierungpython
2.7thi
tutori
deal
with
python
version
2.7thi
chapter
from
our
cours
is
avail
in
a
version
for
python3
:
object
orient
programmingclassroom
train
cours
thi
websit
contain
a
free
and
extens
onlin
tutori
by
bernd
klein
,
use
materi
from
hi
classroom
python
train
cours
.
If
you
are
interest
in
an
instructor-l
classroom
train
cours
,
you
may
have
a
look
at
the
python
class
by
bernd
klein
at
bodenseo
.
©
kabliczech
-
fotolia.com
quot
of
the
day
:
''
If
it
's
a
good
idea
,
go
ahead
and
do
it
.
It
is
much
easier
to
apolog
than
it
is
to
get
permiss
.
''
(
grace
murray
)
If
you
have
the
choic
work
with
python
2
or
python
3
,
we
recomend
to
switch
to
python
3
!
you
can
read
our
python
tutori
to
see
what
the
differ
are
.
data
protect
declar
data
protect
declar
previou
chapter
:
except
handl
next
chapter
:
inherit
exampl
class
object
orient
program
In
the
previou
chapter
,
we
intent
avoid
object
orient
program
(
oop
)
.
We
think
it
's
easier
and
more
fun
to
start
learn
python
without
have
to
know
about
object
orient
program
.
but
even
though
we
have
avoid
oop
,
we
have
use
in
our
exampl
object
and
method
from
class
.
In
thi
chapter
we
are
give
a
proper
introduct
into
the
object
orient
approach
of
python
.
oop
is
one
of
the
most
power
tool
of
python
,
but
nevertheless
you
do
n't
have
to
use
it
,
i.e
.
you
can
write
power
and
effici
program
without
it
as
well
.
though
some
peopl
consid
oop
to
be
a
modern
program
paradigm
,
the
root
go
back
to
1960
.
the
first
program
languag
to
use
object
wa
simula
67
.
there
are
those
who
glorifi
oop
and
think
that
anyth
which
is
not
program
in
an
object
orient
way
ca
n't
be
good
.
On
the
other
hand
there
are
well
known
comput
scientist
and
specialist
who
critic
oop
.
alexand
stepanov
,
who
is
the
primari
design
and
implement
of
the
object
orient
c++
standard
templat
librari
,
said
that
oop
provid
a
mathematically-limit
viewpoint
and
call
it
``
almost
as
much
of
a
hoax
as
artifici
intellig
''
edsger
W.
dijkstra
,
one
of
the
most
renown
professor
of
comput
scienc
,
wrote
:
``
...
what
societi
overwhelmingli
ask
for
is
snake
oil
.
Of
cours
,
the
snake
oil
ha
the
most
impress
name
-
otherwis
you
would
be
sell
noth
-
like
``
structur
analysi
and
design
''
,
``
softwar
engin
''
,
``
matur
model
''
,
``
manag
inform
system
''
,
``
integr
project
support
environ
''
``
object
orient
''
and
``
busi
process
re-engin
''
(
the
latter
three
be
known
as
ips
,
OO
and
bpr
,
respect
)
.
the
four
major
principl
of
object
orient
are
:
encapsul
data
abstract
polymorph
inherit
An
object
orient
program
is
base
on
class
and
there
exist
a
collect
of
interact
object
,
as
oppos
to
the
convent
model
,
in
which
a
program
consist
of
function
and
routin
.
In
oop
,
each
object
can
receiv
messag
,
process
data
,
and
send
messag
to
other
object
.
analog
:
the
cake
class
A
class
definit
can
be
compar
to
the
recip
to
bake
a
cake
.
A
recip
is
need
to
bake
a
cake
.
the
main
differ
between
a
recip
(
class
)
and
a
cake
(
an
instanc
or
an
object
of
thi
class
)
is
obviou
.
A
cake
can
be
eaten
when
it
is
bake
,
but
you
ca
n't
eat
a
recip
,
unless
you
like
the
tast
of
print
paper
.
like
bake
a
cake
,
an
oop
program
construct
object
accord
to
the
class
definit
of
the
program
program
.
A
class
contain
variabl
and
method
.
If
you
bake
a
cake
you
need
ingredi
and
instruct
to
bake
the
cake
.
accordingli
a
class
need
variabl
and
method
.
there
are
class
variabl
,
which
have
the
same
valu
in
all
method
and
there
are
instanc
variabl
,
which
have
normal
differ
valu
for
differ
object
.
A
class
also
ha
to
defin
all
the
necessari
method
,
which
are
need
to
access
the
data
.
some
book
use
other
analog
,
like
e.g
.
paper
pattern
and
shirt
.
In
thi
case
the
paper
pattern
correspond
to
a
class
and
the
shirt
are
instanc
or
object
of
thi
class
.
anoth
well
like
exampl
is
the
class
``
hous
plan
''
and
the
hous
(
or
hous
)
built
accord
to
thi
plan
.
class
,
object
,
instanc
A
class
defin
a
data
type
,
which
contain
variabl
,
properti
and
method
.
A
class
describ
the
abstract
characterist
of
a
real-lif
thing
.
We
avoid
the
express
``
object
''
in
the
previou
sentenc
and
use
``
thing
''
instead
,
becaus
an
object
is
use
as
an
express
in
oop
as
well
as
to
denot
an
instanc
of
a
class
.
with
the
express
``
real-lif
''
thing
we
have
concept
(
class
)
like
``
bank
account
''
or
``
account
holder
''
in
mind
.
the
abstract
characterist
of
a
``
thing
''
includ
it
attribut
and
properti
and
the
thing
's
behaviour
,
i.e
.
the
method
and
oper
of
thi
thing
.
there
can
be
instanc
and
object
of
class
.
An
instanc
is
an
object
of
a
class
creat
at
run-tim
.
In
programm
vernacular
,
a
strawberri
tart
is
an
instanc
of
the
strawberri
recip
class
.
the
set
of
valu
of
the
attribut
of
a
particular
object
is
call
it
state
.
the
object
consist
of
state
and
the
behaviour
that
's
defin
in
the
object
's
class
the
term
object
and
instanc
are
normal
use
synonym
.
As
we
have
said
,
class
usual
contain
attribut
and
properti
and
method
for
these
instanc
and
properti
.
essenti
,
a
method
is
a
function
,
but
it
's
a
special
kind
of
function
which
belong
to
a
class
,
i.e
.
it
is
defin
within
a
class
,
and
work
on
the
instanc
and
class
data
of
thi
class
.
method
can
onli
be
call
through
instanc
of
a
class
or
a
subclass
,
i.e
.
the
class
name
follow
by
a
dot
and
the
method
name
.
In
our
illustr
we
show
an
exampl
of
two
class
``
account
''
and
``
account
holder
''
.
the
data
of
the
``
account
holder
''
consist
,
for
exampl
,
of
the
holder
surnam
and
prenam
,
adress
,
profess
,
and
birthday
.
method
are
``
chang
of
resid
''
and
``
chang
of
profess
''
.
thi
model
is
not
complet
,
becaus
we
need
more
data
and
abov
all
more
method
like
e.g
.
set
and
get
the
birthday
of
an
account
holder
.
encapsul
of
data
anoth
import
advantag
of
oop
consist
in
the
encapsul
of
data
.
We
can
say
that
object-ori
program
reli
heavili
on
encapsul
.
the
term
encapsul
and
abstract
(
also
data
hide
)
are
often
use
as
synonym
.
they
are
nearli
synonym
,
i.e
.
abstract
is
achiev
though
encapsul
.
data
hide
and
encapsul
are
the
same
concept
,
so
it
's
correct
to
use
them
as
synonym
.
gener
speak
encapsul
is
the
mechan
for
restrict
the
access
to
some
of
an
object
's
compon
,
thi
mean
that
the
intern
represent
of
an
object
ca
n't
be
seen
from
outsid
of
the
object
definit
.
access
to
thi
data
is
typic
onli
achiev
through
special
method
:
getter
and
setter
.
By
use
sole
get
(
)
and
set
(
)
method
,
we
can
make
sure
that
the
intern
data
can
not
be
accident
set
into
an
inconsist
or
invalid
state
.
It
's
nearli
alway
possibl
to
circumv
thi
protect
mechan
:
e.g
.
in
c++
by
the
``
friend
''
mechan
,
in
java
and
rubi
via
reflect
api
or
in
python
by
name
mangl
.
A
method
to
set
privat
data
can
also
be
use
to
do
some
plausibl
check
.
In
our
exampl
,
we
can
check
,
if
the
birthday
make
sens
,
e.g
.
it
's
not
veri
like
that
a
custom
is
more
than
are
100
year
old
.
Or
we
can
rule
out
that
a
custom
with
a
giro
account
is
less
than
14
year
old
.
inherit
class
can
inherit
other
class
.
A
class
can
inherit
attribut
and
behaviour
(
method
)
from
other
class
,
call
super-class
.
A
class
which
inherit
from
super-class
is
call
a
sub-class
.
super-class
are
sometim
call
ancestor
as
well
.
there
exist
a
hierarchi
relationship
between
class
.
If
we
have
a
closer
look
at
our
previou
exampl
about
the
class
account
,
we
can
see
that
thi
model
can
satisfi
the
need
of
a
real
bank
.
bank
have
normal
differ
kind
of
account
,
e.g
.
save
account
,
giro
account
and
other
.
though
these
differ
account
type
are
quit
differ
,
they
have
nevertheless
mani
properti
and
method
in
common
.
e.g
.
each
account
ha
and
need
an
account
number
,
a
holder
and
a
balanc
.
furthermor
it
mu
be
possibl
for
each
of
them
to
deposit
or
withdraw
money
.
So
,
there
is
someth
like
a
``
fundament
''
account
from
which
they
inherit
.
inherit
is
use
to
creat
new
class
by
use
exist
class
.
new
one
can
both
be
creat
by
extend
and
by
restrict
the
exist
class
.
now
it
's
time
to
get
back
to
python
and
see
how
a
class
is
implement
in
python
.
We
start
with
the
most
simpl
class
,
which
can
be
defin
.
We
just
give
it
a
name
but
omit
all
further
specif
by
use
the
n
keyword
.
class
account
(
object
)
:
pass
We
have
n't
defin
ani
attribut
or
ani
method
in
our
simpl
account
class
.
now
we
will
creat
an
instanc
of
thi
empti
class
:
>
>
>
from
account
import
account
>
>
>
x
=
account
(
)
>
>
>
print
x
<
account.account
object
at
0x7f364120ab90
>
>
>
>
definit
of
method
A
method
differ
from
a
function
onli
in
two
aspect
:
it
belong
to
a
class
and
it
is
defin
within
a
class
the
first
paramet
in
the
definit
of
a
method
ha
to
be
a
refer
``
self
''
to
the
instanc
of
the
class
a
method
is
call
without
thi
paramet
``
self
''
We
extend
our
class
by
defin
some
method
.
the
bodi
of
these
method
is
still
not
specifi
:
class
account
(
object
)
:
def
transfer
(
self
,
target
,
amount
)
:
pass
def
deposit
(
self
,
amount
)
:
pass
def
withdraw
(
self
,
amount
)
:
pass
def
balanc
(
self
)
:
pass
constructor
python
doe
n't
have
explicit
constructor
like
c++
or
java
,
but
the
__init__
(
)
method
in
python
is
someth
similar
,
though
it
is
strictli
speak
not
a
constructor
.
It
behav
in
mani
way
like
a
constructor
,
e.g
.
it
is
the
first
code
which
is
execut
,
when
a
new
instanc
of
a
class
is
creat
.
the
name
sound
also
like
a
constructor
``
__init__
''
.
but
strictli
speak
it
would
be
wrong
to
call
it
a
constructor
,
becaus
a
new
instanc
is
alreadi
``
construct
''
by
the
time
the
method
__init__
is
call
.
but
anyway
,
the
__init__
method
is
use
-
like
constructor
in
other
object
orient
program
languag
-
to
initi
the
instanc
variabl
of
an
object
.
the
definit
of
an
init
method
look
like
ani
other
method
definit
:
def
__init__
(
self
,
holder
,
number
,
balanc
,
credit_line=1500
)
:
self.hold
=
holder
self.numb
=
number
self.bal
=
balanc
self.creditlin
=
credit_lin
destructor
what
we
said
about
constructor
hold
true
for
destructor
as
well
.
there
is
no
``
real
''
destructor
,
but
someth
similiar
,
i.e
.
the
method
__del__
.
It
is
call
when
the
instanc
is
about
to
be
destroy
.
If
a
base
class
ha
a
__del__
(
)
method
,
the
deriv
class
's
__del__
(
)
method
,
if
ani
,
must
explicitli
call
it
to
ensur
proper
delet
of
the
base
class
part
of
the
instanc
.
the
follow
exampl
show
a
class
with
a
constructor
and
a
destructor
:
class
greet
:
def
__init__
(
self
,
name
)
:
self.nam
=
name
def
__del__
(
self
)
:
print
``
destructor
start
''
def
sayhello
(
self
)
:
print
``
hello
''
,
self.nam
If
we
use
thi
class
,
we
can
see
,
the
``
del
''
doe
n't
directli
call
the
__del__
(
)
method
.
It
's
appar
that
the
destructor
is
not
call
,
when
we
delet
x1
.
the
reason
is
that
del
decrement
the
refer
count
for
the
object
of
x1
by
one
.
onli
if
the
refer
count
reach
zero
,
the
destructor
is
call
:
>
>
>
from
hello_class
import
greet
>
>
>
x1
=
greet
(
``
guido
''
)
>
>
>
x2
=
x1
>
>
>
del
x1
>
>
>
del
x2
destructor
start
complet
list
of
the
account
class
class
account
(
object
)
:
def
__init__
(
self
,
holder
,
number
,
balanc
,
credit_line=1500
)
:
self.hold
=
holder
self.numb
=
number
self.bal
=
balanc
self.creditlin
=
credit_lin
def
deposit
(
self
,
amount
)
:
self.bal
=
amount
def
withdraw
(
self
,
amount
)
:
if
(
self.bal
-
amount
<
-self.creditlin
)
:
#
coverag
insuffici
return
fals
els
:
self.bal
-=
amount
return
true
def
balanc
(
self
)
:
return
self.bal
def
transfer
(
self
,
target
,
amount
)
:
if
(
self.bal
-
amount
<
-self.creditlin
)
:
#
coverag
insuffici
return
fals
els
:
self.bal
-=
amount
target.bal
+=
amount
return
true
If
the
code
is
save
under
account.pi
,
we
can
use
the
class
in
the
interact
shell
of
python
:
>
>
>
import
account
>
>
>
k
=
account.account
(
``
guido
''
,345267,10009.78
)
>
>
>
k.balanc
(
)
10009.780000000001
>
>
>
k2
=
account.account
(
``
sven
''
,345289,3800.03
)
>
>
>
k2.balanc
(
)
3800.0300000000002
>
>
>
k.transfer
(
k2,1000
)
true
>
>
>
k2.balanc
(
)
4800.0300000000007
>
>
>
k.balanc
(
)
9009.7800000000007
>
>
>
our
exampl
ha
a
small
flaw
:
We
can
directli
access
the
attribut
from
outsid
:
>
>
>
k.balanc
(
)
9009.7800000000007
>
>
>
k2.balanc
4800.0300000000007
>
>
>
k2.balanc
+=
25000
>
>
>
k2.balanc
29800.029999999999
>
>
>
data
encapsul
If
an
identifi
doe
n't
start
with
an
underscor
charact
``
_
''
it
can
be
access
from
outsid
,
i.e
.
the
valu
can
be
read
and
chang
.
data
can
be
protect
by
make
member
privat
or
protect
.
instanc
variabl
name
start
with
two
underscor
charact
can
not
be
access
from
outsid
of
the
class
.
At
least
not
directli
,
but
they
can
be
access
through
privat
name
mangl
.
that
mean
,
privat
data
__a
can
be
access
by
the
follow
name
construct
:
instance_name._classname__a
.
thi
is
illustr
in
the
follow
exampl
:
>
>
>
from
mangl
import
mangl
>
>
>
x
=
mangl
(
42
)
>
>
>
x.__a
traceback
(
most
recent
call
last
)
:
file
``
<
stdin
>
''
,
line
1
,
in
<
modul
>
attributeerror
:
'mangl
'
object
ha
no
attribut
'__a
'
>
>
>
x._mangling__a
42
>
>
>
If
an
identifi
is
onli
preced
by
one
underscor
charact
,
it
is
a
protect
member
.
protect
member
can
be
access
like
public
member
from
outsid
of
class
.
It
can
be
seen
in
the
follow
exampl
.
let
's
save
the
follow
class
as
encapsulation.pi
:
class
encapsul
(
object
)
:
def
__init__
(
self
,
a
,
b
,
c
)
:
self.publ
=
a
self._protect
=
b
self.__priv
=
c
the
follow
interact
session
show
the
behaviour
of
public
,
protect
and
privat
member
:
>
>
>
from
encapsul
import
encapsul
>
>
>
x
=
encapsul
(
11,13,17
)
>
>
>
x.public
11
>
>
>
x._protect
13
>
>
>
x._protect
=
23
>
>
>
x._protect
23
>
>
>
x.__privat
traceback
(
most
recent
call
last
)
:
file
``
<
stdin
>
''
,
line
1
,
in
<
modul
>
attributeerror
:
'encapsul
'
object
ha
no
attribut
'__privat
'
>
>
>
the
follow
tabl
show
the
differ
behaviour
:
name
notat
behaviour
name
public
can
be
access
from
insid
and
outsid
_name
protect
like
a
public
member
,
but
they
should
n't
be
directli
access
from
outsid
.
__name
privat
Ca
n't
be
seen
and
access
from
outsid
the
constructor
method
of
our
account
class
with
privat
member
:
def
__init__
(
self
,
holder
,
number
,
balanc
,
credit_line=1500
)
:
self.__hold
=
holder
self.__numb
=
number
self.__bal
=
balanc
self.__creditlin
=
credit_lin
class
and
object
variabl
So
far
we
use
object
variabl
(
also
call
instanc
variabl
)
.
these
variabl
can
have
and
usual
have
differ
valu
for
differ
object
.
e.g
.
two
account
have
differ
account
number
for
sure
and
normal
the
balanc
is
also
differ
.
object
variabl
are
own
by
each
individu
object
or
instanc
of
a
class
.
thi
mean
that
each
object
ha
it
own
copi
of
the
variabl
.
they
are
call
non-stat
or
dynam
variabl
or
member
,
becaus
they
are
creat
for
each
instanc
or
object
.
class
variabl
on
the
other
hand
are
share
by
all
object
(
instanc
)
of
that
class
.
they
can
be
access
and
chang
by
ani
object
.
As
there
is
onli
one
copi
of
an
object
variabl
a
chang
of
valu
of
such
a
variabl
is
reflect
in
all
the
other
instanc
as
well
.
To
give
you
an
exampl
of
a
static
or
class
variabl
:
A
counter
,
a
variabl
to
count
the
total
number
of
account
ca
n't
be
a
instanc
variabl
.
To
thi
purpos
we
defin
a
counter
variabl
,
which
we
place
directli
below
the
class
statement
.
ani
time
the
constructor
will
be
call
,
thi
variabl
will
be
increment
.
If
an
object
of
an
account
is
delet
,
thi
counter
will
be
decrement
.
class
account
(
object
)
:
counter
=
0
def
__init__
(
self
,
holder
,
number
,
balanc
,
credit_line=1500
)
:
account.count
+=
1
self.__hold
=
holder
self.__numb
=
number
self.__bal
=
balanc
self.__creditlin
=
credit_lin
def
__del__
(
self
)
:
account.count
-=
1
We
demonstr
the
usag
of
thi
counter
in
the
follow
interact
session
:
>
>
>
from
account
import
account
>
>
>
account.count
0
>
>
>
a1
=
account
(
``
homer
simpson
''
,
2893002
,
2325.21
)
>
>
>
account.count
1
>
>
>
a2
=
account
(
``
fred
flintston
''
,
2894117
,
755.32
)
>
>
>
account.count
2
>
>
>
a3
=
a2
>
>
>
account.count
2
>
>
>
a4
=
account
(
``
bill
gate
''
,
2895007
,
5234.32
)
>
>
>
account.count
3
>
>
>
del
a4
>
>
>
account.count
2
>
>
>
del
a3
>
>
>
account.count
2
>
>
>
del
a2
>
>
>
account.count
1
inherit
We
will
introduc
inherit
by
creat
a
counter
class
,
which
can
be
inherit
by
our
account
class
.
thi
way
,
we
do
n't
have
to
count
the
instanc
in
the
account
class
or
in
other
class
,
e.g
.
member
or
employe
.
the
syntax
for
defin
the
class
(
super-class
)
from
which
a
class
inherit
is
veri
simpl
.
the
super-class
is
put
in
parenthesi
behind
the
class
name
.
the
follow
exampl
show
the
definit
of
a
counter
class
,
which
is
use
as
a
super
class
for
the
account
class
:
class
counter
(
object
)
:
number
=
0
def
__init__
(
self
)
:
type
(
self
)
.number
+=
1
def
__del__
(
self
)
:
type
(
self
)
.number
-=
1
class
account
(
counter
)
:
def
__init__
(
self
,
account_hold
,
account_numb
,
balanc
,
account_current=1500
)
:
counter.__init__
(
self
)
multipl
inherit
A
class
can
inherit
from
more
than
one
class
.
thi
is
call
multipl
multipl
inherit
.
syntact
thi
is
extrem
easi
.
all
the
super-class
are
put
in
parenthesi
as
a
comma
separ
list
behind
the
class
name
.
class
NN
(
class1
,
class2
,
class3
...
)
:
thi
class
inherit
from
class1
,
class2
,
and
so
on
.
previou
chapter
:
except
handl
next
chapter
:
inherit
exampl
©
2011
-
2018
,
bernd
klein
,
bodenseo
;
design
by
denis
mitchinson
adapt
for
python-course.eu
by
bernd
klein
