numer
&
scientif
comput
with
python
:
read
and
write
ndarray
numer
python
cours
numer
program
numpi
introductioncr
numpi
arraysdata
type
object
,
dtypenumer
oper
on
numpi
arrayschang
the
dimens
of
arrayspython
,
numpi
and
probabilityweight
choic
and
weight
samplescr
of
synthet
test
databoolean
mask
of
arraysmatrix
arithmeticread
and
write
ndarraysmatplotlib
introductionspin
and
tickslegend
and
annotationsmultipl
figur
and
axeshistogramscontour
plotspython
imag
process
tutorialimag
process
techniquespanda
tutorialpanda
dataframespanda
data
filesd
with
nanbin
datapanda
tutori
continu
:
multi-level
indexingdata
visual
with
panda
and
pythonpython
,
date
and
timepython
,
panda
and
timeserieslinear
combin
what
is
numpi
?
numpi
is
not
anoth
program
languag
but
a
python
extens
modul
.
It
provid
fast
and
effici
oper
on
array
of
homogen
data
.
numpi
extend
python
into
a
high-level
languag
for
manipul
numer
data
,
similiar
to
matlab
.
advantag
of
numpi
It
's
free
,
i.e
.
it
doe
n't
cost
anyth
and
it
's
open
sourc
.
It
's
an
extens
on
python
rather
than
a
program
languag
on
it
's
own
.
numpi
use
python
syntax
.
becaus
numpi
is
python
,
embed
code
from
other
languag
like
C
,
c++
and
fortran
is
veri
simpl
.
thi
websit
is
creat
by
:
python
train
cours
in
toronto
,
canada
On
site
train
in
europ
,
canada
and
the
US
.
thi
websit
is
free
of
annoy
ad
.
We
want
to
keep
it
like
thi
.
you
can
help
with
your
donat
:
the
need
for
donat
bernd
klein
on
facebook
search
thi
websit
:
thi
topic
in
german
/
deutsch
übersetzung
:
lesen
und
schreiben
von
datein
mit
numpi
und
pythonclassroom
train
cours
thi
websit
contain
a
free
and
extens
onlin
tutori
by
bernd
klein
,
use
materi
from
hi
classroom
python
train
cours
.
If
you
are
interest
in
an
instructor-l
classroom
train
cours
,
you
may
have
a
look
at
the
python
class
by
bernd
klein
at
bodenseo
.
©
kabliczech
-
fotolia.com
quot
of
the
day
:
''
I
think
the
special
thing
about
python
is
that
it
's
a
writer
'
commun
.
the
writer
are
in
charg
.
the
writer
decid
what
the
materi
is
.
''
(
eric
idl
)
If
you
have
the
choic
work
with
python
2
or
python
3
,
we
recomend
to
switch
to
python
3
!
you
can
read
our
python
tutori
to
see
what
the
differ
are
.
data
protect
declar
data
protect
declar
previou
chapter
:
matrix
arithmet
next
chapter
:
matplotlib
introduct
read
and
write
data
file
there
are
lot
of
way
for
read
from
file
and
write
to
data
file
in
numpi
.
We
will
discuss
the
differ
way
and
correspond
function
in
thi
chapter
.
save
textfil
with
savetxt
the
first
two
function
we
will
cover
are
savetxt
and
loadtxt
.
In
the
follow
simpl
exampl
,
we
defin
an
array
x
and
save
it
as
a
textfil
with
savetxt
:
import
numpi
as
np
x
=
np.array
(
[
[
1
,
2
,
3
]
,
[
4
,
5
,
6
]
,
[
7
,
8
,
9
]
]
,
np.int32
)
np.savetxt
(
``
test.txt
''
,
x
)
the
file
``
test.txt
''
is
a
textfil
and
it
content
look
like
thi
:
bernd
@
andromeda
:
~/dropbox/notebooks/numpi
$
more
test.txt
1.000000000000000000e+00
2.000000000000000000e+00
3.000000000000000000e+00
4.000000000000000000e+00
5.000000000000000000e+00
6.000000000000000000e+00
7.000000000000000000e+00
8.000000000000000000e+00
9.000000000000000000e+00
attent
:
the
abov
output
ha
been
creat
on
the
linux
command
prompt
!
It
's
also
possibl
to
print
the
array
in
a
special
format
,
like
for
exampl
with
three
decim
place
or
as
integ
,
which
are
preced
with
lead
blank
,
if
the
number
of
digit
is
less
than
4
digit
.
for
thi
purpos
we
assign
a
format
string
to
the
third
paramet
'fmt
'
.
We
saw
in
our
first
exampl
that
the
default
delimet
is
a
blank
.
We
can
chang
thi
behaviour
by
assign
a
string
to
the
paramet
``
delimit
''
.
In
most
case
thi
string
will
consist
sole
of
a
singl
charact
but
it
can
be
a
sequenc
of
charact
,
like
a
smiley
``
:
-
)
``
as
well
:
np.savetxt
(
``
test2.txt
''
,
x
,
fmt=
''
%
2.3f
''
,
delimiter=
''
,
''
)
np.savetxt
(
``
test3.txt
''
,
x
,
fmt=
''
%
04d
''
,
delimiter=
''
:
-
)
``
)
the
newli
creat
file
look
like
thi
:
bernd
@
andromeda
:
~/dropbox/notebooks/numpi
$
more
test2.txt
1.000,2.000,3.000
4.000,5.000,6.000
7.000,8.000,9.000
bernd
@
andromeda
:
~/dropbox/notebooks/numpi
$
more
test3.txt
0001
:
-
)
0002
:
-
)
0003
0004
:
-
)
0005
:
-
)
0006
0007
:
-
)
0008
:
-
)
0009
the
complet
syntax
of
savetxt
look
like
thi
:
savetxt
(
fname
,
X
,
fmt=
'
%
.18e
'
,
delimiter=
'
'
,
newline='\n
'
,
header=
''
,
footer=
''
,
comments=
'
#
'
)
paramet
mean
X
array_lik
data
to
be
save
to
a
text
file
.
fmt
str
or
sequenc
of
str
,
option
A
singl
format
(
%
10.5f
)
,
a
sequenc
of
format
,
or
a
multi-format
string
,
e.g
.
'iter
%
d
--
%
10.5f
'
,
in
which
case
'delimit
'
is
ignor
.
for
complex
'
X
'
,
the
legal
option
for
'fmt
'
are
:
a
)
a
singl
specifi
,
``
fmt=
'
%
.4e
'
''
,
result
in
number
format
like
``
'
(
%
s+
%
sj
)
'
%
(
fmt
,
fmt
)
''
b
)
a
full
string
specifi
everi
real
and
imaginari
part
,
e.g.
``
'
%
.4e
%
+.4j
%
.4e
%
+.4j
%
.4e
%
+.4j
'
''
for
3
columnsc
)
a
list
of
specifi
,
one
per
column
-
in
thi
case
,
the
real
and
imaginari
part
must
have
separ
specifi
,
e.g
.
``
[
'
%
.3e
+
%
.3ej
'
,
'
(
%
.15e
%
+.15ej
)
'
]
''
for
2
column
delimit
A
string
use
for
separ
the
column
.
newlin
A
string
(
e.g
.
``
\n
''
,
``
\r\n
''
or
``
,
\n
''
)
which
will
end
a
line
instead
of
the
default
line
end
header
A
string
that
will
be
written
at
the
begin
of
the
file
.
footer
A
string
that
will
be
written
at
the
end
of
the
file
.
comment
A
string
that
will
be
prepend
to
the
'header
'
and
'footer
'
string
,
to
mark
them
as
comment
.
the
hash
tag
'
#
'
is
use
as
the
default
.
load
textfil
with
loadtxt
We
will
read
in
now
the
file
``
test.txt
''
,
which
we
have
written
in
our
previou
subchapt
:
y
=
np.loadtxt
(
``
test.txt
''
)
print
(
y
)
[
[
1
.
2
.
3
.
]
[
4
.
5
.
6
.
]
[
7
.
8
.
9
.
]
]
y
=
np.loadtxt
(
``
test2.txt
''
,
delimiter=
''
,
''
)
print
(
y
)
[
[
1
.
2
.
3
.
]
[
4
.
5
.
6
.
]
[
7
.
8
.
9
.
]
]
noth
new
,
if
we
read
in
our
text
,
in
which
we
use
a
smiley
to
separ
:
y
=
np.loadtxt
(
``
test3.txt
''
,
delimiter=
''
:
-
)
``
)
print
(
y
)
[
[
1
.
2
.
3
.
]
[
4
.
5
.
6
.
]
[
7
.
8
.
9
.
]
]
It
's
also
possibl
to
choos
the
column
by
index
:
y
=
np.loadtxt
(
``
test3.txt
''
,
delimiter=
''
:
-
)
``
,
usecols=
(
0,2
)
)
print
(
y
)
[
[
1
.
3
.
]
[
4
.
6
.
]
[
7
.
9
.
]
]
We
will
read
in
our
next
exampl
the
file
``
times_and_temperatures.txt
''
,
which
we
have
creat
in
our
chapter
on
gener
of
our
python
tutori
.
everi
line
contain
a
time
in
the
format
``
hh
:
:mm
:
:ss
''
and
random
temperatur
between
10.0
and
25.0
degre
.
We
have
to
convert
the
time
string
into
float
number
.
the
time
will
be
in
minut
with
second
in
the
hundr
.
We
defin
first
a
function
which
convert
``
hh
:
:mm
:
:ss
''
into
minut
:
def
time2float_minut
(
time
)
:
if
type
(
time
)
==
byte
:
time
=
time.decod
(
)
t
=
time.split
(
``
:
''
)
minut
=
float
(
t
[
0
]
)
*60
+
float
(
t
[
1
]
)
+
float
(
t
[
2
]
)
*
0.05
/
3
return
minut
for
t
in
[
``
06:00:10
''
,
``
06:27:45
''
,
``
12:59:59
''
]
:
print
(
time2float_minut
(
t
)
)
360.1666666666667
387.75
779.9833333333333
you
might
have
notic
that
we
check
the
type
of
time
for
binari
.
the
reason
for
thi
is
the
use
of
our
function
``
time2float_minut
in
loadtxt
in
the
follow
exampl
.
the
keyword
paramet
convert
contain
a
dictionari
which
can
hold
a
function
for
a
column
(
the
key
of
the
column
correspond
to
the
key
of
the
dictionari
)
to
convert
the
string
data
of
thi
column
into
a
float
.
the
string
data
is
a
byte
string
.
that
is
whi
we
had
to
transfer
it
into
a
a
unicod
string
in
our
function
:
y
=
np.loadtxt
(
``
times_and_temperatures.txt
''
,
converters=
{
0
:
time2float_minut
}
)
print
(
y
)
[
[
360
.
20.1
]
[
361.5
16.1
]
[
363
.
16.9
]
...
,
[
1375.5
22.5
]
[
1377
.
11.1
]
[
1378.5
15.2
]
]
#
delimit
=
``
;
''
,
#
i.e
.
use
``
;
''
as
delimit
instead
of
whitespac
tofil
tofil
is
a
function
to
write
the
content
of
an
array
to
a
file
both
in
binari
,
which
is
the
default
,
and
text
format
.
a.tofil
(
fid
,
sep=
''
''
,
format=
''
%
s
''
)
the
data
of
the
A
ndarri
is
alway
written
in
'
C
'
order
,
regardless
of
the
order
of
A
.
the
data
file
written
by
thi
method
can
be
reload
with
the
function
fromfil
(
)
.
paramet
mean
fid
can
be
either
an
open
file
object
,
or
a
string
contain
a
filenam
.
sep
the
string
'sep
'
defin
the
separ
between
array
item
for
text
output
.
If
it
is
empti
(
``
)
,
a
binari
file
is
written
,
equival
to
file.writ
(
a.tostr
(
)
)
.
format
format
string
for
text
file
output
.
each
entri
in
the
array
is
format
to
text
by
first
convert
it
to
the
closest
python
type
,
and
then
use
'format
'
%
item
.
remark
:
inform
on
endian
and
precis
is
lost
.
therefor
it
may
not
be
a
good
idea
to
use
the
function
to
archiv
data
or
transport
data
between
machin
with
differ
endian
.
some
of
these
problem
can
be
overcom
by
output
the
data
as
text
file
,
at
the
expens
of
speed
and
file
size
.
dt
=
np.dtype
(
[
(
'time
'
,
[
(
'min
'
,
int
)
,
(
'sec
'
,
int
)
]
)
,
(
'temp
'
,
float
)
]
)
x
=
np.zero
(
(
1
,
)
,
dtype=dt
)
x
[
'time
'
]
[
'min
'
]
=
10
x
[
'temp
'
]
=
98.25
print
(
x
)
fh
=
open
(
``
test6.txt
''
,
``
bw
''
)
x.tofil
(
fh
)
[
(
(
10
,
0
)
,
98.25
)
]
fromfil
fromfil
to
read
in
data
,
which
ha
been
written
with
the
tofil
function
.
It
's
possibl
to
read
binari
data
,
if
the
data
type
is
known
.
It
's
also
possibl
to
pars
simpli
format
text
file
.
the
data
from
the
file
is
turn
into
an
array
.
the
gener
syntax
look
like
thi
:
numpy.fromfil
(
file
,
dtype=float
,
count=-1
,
sep=
''
)
paramet
mean
file
'file
'
can
be
either
a
file
object
or
the
name
of
the
file
to
read
.
dtype
defin
the
data
type
of
the
array
,
which
will
be
construct
from
the
file
data
.
for
binari
file
,
it
is
use
to
determin
the
size
and
byte-ord
of
the
item
in
the
file
.
count
defin
the
number
of
item
,
which
will
be
read
.
-1
mean
all
item
will
be
read
.
sep
the
string
'sep
'
defin
the
separ
between
the
item
,
if
the
file
is
a
text
file
.
If
it
is
empti
(
``
)
,
the
file
will
be
treat
as
a
binari
file
.
A
space
(
``
``
)
in
a
separ
match
zero
or
more
whitespac
charact
.
A
separ
consist
sole
of
space
ha
to
match
at
least
one
whitespac
.
fh
=
open
(
``
test4.txt
''
,
``
rb
''
)
np.fromfil
(
fh
,
dtype=dt
)
thi
get
us
the
follow
:
array
(
[
(
(
4294967296
,
12884901890
)
,
1.0609978957e-313
)
,
(
(
30064771078
,
38654705672
)
,
2.33419537056e-313
)
,
(
(
55834574860
,
64424509454
)
,
3.60739284543e-313
)
,
(
(
81604378642
,
90194313236
)
,
4.8805903203e-313
)
,
(
(
107374182424
,
115964117018
)
,
6.1537877952e-313
)
,
(
(
133143986206
,
141733920800
)
,
7.42698527006e-313
)
,
(
(
158913789988
,
167503724582
)
,
8.70018274493e-313
)
,
(
(
184683593770
,
193273528364
)
,
9.9733802198e-313
)
]
,
dtype=
[
(
'time
'
,
[
(
'min
'
,
'
<
i8
'
)
,
(
'sec
'
,
'
<
i8
'
)
]
)
,
(
'temp
'
,
'
<
f8
'
)
]
)
import
numpi
as
np
import
os
#
platform
depend
:
differ
between
linux
and
window
#
data
=
np.arang
(
50
,
dtype=np.int
)
data
=
np.arang
(
50
,
dtype=np.int32
)
data.tofil
(
``
test4.txt
''
)
fh
=
open
(
``
test4.txt
''
,
``
rb
''
)
#
4
*
32
=
128
fh.seek
(
128
,
os.seek_set
)
x
=
np.fromfil
(
fh
,
dtype=np.int32
)
print
(
x
)
[
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
]
attent
:
It
can
caus
problem
to
use
tofil
and
fromfil
for
data
storag
,
becaus
the
binari
file
gener
are
not
platform
independ
.
there
is
no
byte-ord
or
data-typ
inform
save
by
tofil
.
data
can
be
store
in
the
platform
independ
.npi
format
use
save
and
load
instead
.
best
practic
to
load
and
save
data
the
recommend
way
to
store
and
load
data
with
numpi
in
python
consist
in
use
load
and
save
.
We
also
use
a
temporari
file
in
the
follow
:
import
numpi
as
np
print
(
x
)
from
tempfil
import
temporaryfil
outfil
=
temporaryfil
(
)
x
=
np.arang
(
10
)
np.save
(
outfil
,
x
)
outfile.seek
(
0
)
#
onli
need
here
to
simul
close
&
reopen
file
np.load
(
outfil
)
[
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
]
the
abov
code
return
the
follow
output
:
array
(
[
0
,
1
,
2
,
3
,
4
,
5
,
6
,
7
,
8
,
9
]
)
and
yet
anoth
way
:
genfromtxt
there
is
yet
anoth
way
to
read
tabular
input
from
file
to
creat
array
.
As
the
name
impli
,
the
input
file
is
suppos
to
be
a
text
file
.
the
text
file
can
be
in
the
form
of
an
archiv
file
as
well
.
genfromtxt
can
process
the
archiv
format
gzip
and
bzip2
.
the
type
of
the
archiv
is
determin
by
the
extens
of
the
file
,
i.e
.
'.gz
'
for
gzip
and
bz2
'
for
an
bzip2
.
genfromtxt
is
slower
than
loadtxt
,
but
it
is
capabl
of
cope
with
miss
data
.
It
process
the
file
data
in
two
pass
.
At
first
it
convert
the
line
of
the
file
into
string
.
thereupon
it
convert
the
string
into
the
request
data
type
.
loadtxt
on
the
other
hand
work
in
one
go
,
which
is
the
reason
,
whi
it
is
faster
.
recfromcsv
(
fname
,
**kwarg
)
thi
is
not
realli
anoth
way
to
read
in
csv
data
.
'recfromcsv
'
basic
a
shortcut
for
np.genfromtxt
(
filenam
,
delimiter=
''
,
''
,
dtype=non
)
previou
chapter
:
matrix
arithmet
next
chapter
:
matplotlib
introduct
©
2011
-
2018
,
bernd
klein
,
bodenseo
;
design
by
denis
mitchinson
adapt
for
python-course.eu
by
bernd
klein
