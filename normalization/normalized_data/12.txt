python
advanc
:
ture
machin
in
python
python
advanc
cours
topic
advanc
topic
introduct
into
the
sy
modulepython
and
the
shellfork
and
fork
in
pythonintroduct
into
threadspip
,
pipe
and
``
99
bottl
of
beer
''
python
network
scannergraph
theori
and
graph
in
pythongraph
:
pygraphgraphsa
python
class
for
polynomi
functionscurri
in
pythonfinit
state
machin
in
pythontur
machin
in
pythonlevenshtein
distanceexampl
for
recurs
program
:
tower
of
hanoimastermind
/
bull
and
cowscreat
dynam
websit
with
wsgidynam
websit
with
mod_pythondynam
websit
with
pylonspython
,
sql
,
mysql
and
sqlitepython
score
alan
ture
alan
mathison
ture
(
23
june
1912
-
7
june
1954
)
wa
an
english
mathematician
,
logician
,
cryptanalyst
,
and
comput
scientist
.
He
develop
the
concept
of
a
ture
machin
.
``
machin
''
is
mislead
,
becaus
the
ture
machin
ha
never
been
intend
as
a
practic
comput
technolog
.
It
's
a
theoret
model
of
a
devic
that
is
repres
a
real
comput
.
A
ture
machin
is
use
to
get
to
the
bottom
of
``
algorithm
''
and
the
theori
of
``
comput
''
.
It
's
use
to
explor
the
limit
of
comput
.
He
is
also
famou
for
hi
``
ture
test
''
.
He
devis
thi
test
to
answer
the
question
,
when
a
machin
could
be
call
``
intellig
''
.
A
comput
could
be
said
to
``
think
''
if
a
human
interrog
could
not
tell
it
apart
,
through
convers
,
from
a
human
be
.
thi
websit
is
creat
by
:
python
train
cours
in
toronto
,
canada
On
site
train
in
europ
,
canada
and
the
US
.
thi
websit
is
free
of
annoy
ad
.
We
want
to
keep
it
like
thi
.
you
can
help
with
your
donat
:
the
need
for
donat
bernd
klein
on
facebook
search
thi
websit
:
thi
topic
in
german
/
deutsch
übersetzung
:
turingmaschin
in
pythonclassroom
train
cours
thi
websit
contain
a
free
and
extens
onlin
tutori
by
bernd
klein
,
use
materi
from
hi
classroom
python
train
cours
.
If
you
are
interest
in
an
instructor-l
classroom
train
cours
,
you
may
have
a
look
at
the
python
class
by
bernd
klein
at
bodenseo
.
©
kabliczech
-
fotolia.com
quot
of
the
day
:
''
some
program
languag
manag
to
absorb
chang
,
but
withstand
progress.
``
(
alan
perli
)
If
you
have
the
choic
work
with
python
2
or
python
3
,
we
recomend
to
switch
to
python
3
!
you
can
read
our
python
tutori
to
see
what
the
differ
are
.
data
protect
declar
data
protect
declar
previou
chapter
:
finit
state
machin
in
python
next
chapter
:
levenshtein
distanc
ture
machin
just
to
let
you
know
straight-away
:
the
ture
machin
is
not
a
machin
.
It
is
a
mathemat
model
,
which
wa
formul
by
the
english
mathematician
alan
ture
in
1936
.
It
's
a
veri
simpl
model
of
a
comput
,
yet
it
ha
the
complet
comput
capabl
of
a
gener
purpos
comput
.
the
ture
machin
(
TM
)
serv
two
need
in
theoret
comput
scienc
:
the
class
of
languag
defin
by
a
TM
,
i.e
.
structur
or
recurs
enumer
languag
the
class
of
function
a
TM
is
capabl
to
comput
,
i.e
.
the
partial
recurs
function
A
ture
machin
consist
onli
of
a
few
compon
:
A
tape
on
which
data
can
be
sequenti
store
.
the
tape
consist
of
field
,
which
are
sequenti
arrang
.
each
field
can
contain
a
charact
of
a
finit
alphabet
.
thi
tape
ha
no
limit
,
it
goe
on
infinit
in
both
direct
.
In
a
real
machin
,
the
tape
would
have
to
be
larg
enough
to
contain
all
the
data
for
the
algorithm
.
A
TM
also
contain
a
head
move
in
both
direct
over
the
tape
.
thi
head
can
read
and
write
one
charact
from
the
field
over
which
the
head
resid
.
the
ture
machin
is
at
everi
moment
in
a
certain
state
,
one
of
a
finit
number
of
state
.
A
ture
program
is
a
list
of
transit
,
which
determin
for
a
given
state
and
charact
(
``
under
''
the
head
)
a
new
state
,
a
charact
which
ha
to
be
written
into
the
field
under
the
head
and
a
movement
direct
for
the
head
,
i.e
.
either
left
,
right
or
static
(
motionless
)
.
formal
definit
of
a
ture
machin
A
determinist
ture
machin
can
be
defin
as
a
7-tupl
M
=
(
Q
,
Σ
,
Γ
,
δ
,
b
,
q0
,
qf
)
with
Q
is
a
finit
,
non-empti
set
of
state
Γ
is
a
finit
,
non-empti
set
of
the
tape
alphabet
Σ
is
the
set
of
input
symbol
with
Σ
⊂
Γ
δ
is
a
partial
defin
function
,
the
transit
function
:
δ
:
(
Q
\
{
qf
}
)
x
Γ
→
Q
x
Γ
x
{
L
,
N
,
R
}
b
∈
&
gamma
\
Σ
is
the
blank
symbol
q0
∈
Q
is
the
initi
state
qf
∈
Q
is
the
set
of
accept
or
final
state
exampl
:
binari
complement
function
let
's
defin
a
ture
machin
,
which
complement
a
binari
input
on
the
tape
,
i.e
.
an
input
``
1100111
''
e.g
.
will
be
turn
into
``
0011000
''
.
Σ
=
{
0
,
1
}
Q
=
{
init
,
final
}
q0
=
init
qf
=
final
function
definit
descript
δ
(
init,0
)
=
(
init
,
1
,
R
)
If
the
machin
is
in
state
``
init
''
and
a
0
is
read
by
the
head
,
a
1
will
be
written
,
the
state
will
chang
to
``
init
''
(
so
actual
,
it
will
not
chang
)
and
the
head
will
be
move
one
field
to
the
right
.
δ
(
init,1
)
=
(
init
,
0
,
R
)
If
the
machin
is
in
state
``
init
''
and
a
1
is
read
by
the
head
,
a
0
will
be
written
,
the
state
will
chang
to
``
init
''
(
so
actual
,
it
will
not
chang
)
and
the
head
will
be
move
one
field
to
the
right
.
δ
(
init
,
b
)
=
(
final
,
b
,
N
)
If
a
blank
(
``
b
''
)
,
defin
the
end
of
the
input
string
,
is
read
,
the
TM
reach
the
final
state
``
final
''
and
halt
.
implement
of
a
ture
machin
in
python
We
implement
a
ture
machin
in
python
as
a
class
.
We
defin
anoth
class
for
the
read/writ
tape
of
the
ture
machin
.
the
core
of
the
tape
insid
the
class
tape
is
a
dictionari
,
which
contain
the
entri
of
the
tape
.
thi
way
,
we
can
have
neg
indic
.
A
python
list
is
not
a
conveni
data
structur
,
becaus
python
list
are
bound
on
one
side
,
i.e
.
bound
by
0
.
We
defin
the
method
__str__
(
self
)
for
the
class
tape
.
__str__
(
self
)
is
call
by
the
built-in
str
(
)
function
.
the
print
function
use
also
the
str
function
to
calcul
the
``
inform
''
string
represent
of
an
object
,
in
our
case
the
tape
of
the
TM
.
the
method
get_tap
(
)
of
our
class
turingmachin
make
use
of
the
str
represent
return
by
__str__
.
with
the
aid
of
the
method
__getitem__
(
)
,
we
provid
a
read
access
to
the
tape
via
indic
.
the
definit
of
the
method
__setitem__
(
)
allow
a
write
access
as
well
,
as
we
can
see
e.g
.
in
the
statement
self.__tap
[
self.__head_posit
]
=
y
[
1
]
of
our
class
turingmachin
implement
.
the
class
turingmachin
:
We
defin
the
method
__str__
(
self
)
,
which
is
call
by
the
str
(
)
built-in
function
and
by
the
print
statement
to
comput
the
``
inform
''
string
represent
of
an
object
,
in
our
case
the
string
represent
of
a
tape
.
class
tape
(
object
)
:
blank_symbol
=
``
``
def
__init__
(
self
,
tape_str
=
``
''
)
:
self.__tap
=
dict
(
(
enumer
(
tape_str
)
)
)
#
last
line
is
equival
to
the
follow
three
line
:
#
self.__tap
=
{
}
#
for
i
in
rang
(
len
(
tape_str
)
)
:
#
self.__tap
[
i
]
=
input
[
i
]
def
__str__
(
self
)
:
s
=
``
''
min_used_index
=
min
(
self.__tape.key
(
)
)
max_used_index
=
max
(
self.__tape.key
(
)
)
for
i
in
rang
(
min_used_index
,
max_used_index
)
:
s
+=
self.__tap
[
i
]
return
s
def
__getitem__
(
self
,
index
)
:
if
index
in
self.__tap
:
return
self.__tap
[
index
]
els
:
return
tape.blank_symbol
def
__setitem__
(
self
,
po
,
char
)
:
self.__tap
[
po
]
=
char
class
turingmachin
(
object
)
:
def
__init__
(
self
,
tape
=
``
''
,
blank_symbol
=
``
``
,
initial_st
=
``
''
,
final_st
=
none
,
transition_funct
=
none
)
:
self.__tap
=
tape
(
tape
)
self.__head_posit
=
0
self.__blank_symbol
=
blank_symbol
self.__current_st
=
initial_st
if
transition_funct
==
none
:
self.__transition_funct
=
{
}
els
:
self.__transition_funct
=
transition_funct
if
final_st
==
none
:
self.__final_st
=
set
(
)
els
:
self.__final_st
=
set
(
final_st
)
def
get_tap
(
self
)
:
return
str
(
self.__tap
)
def
step
(
self
)
:
char_under_head
=
self.__tap
[
self.__head_posit
]
x
=
(
self.__current_st
,
char_under_head
)
if
x
in
self.__transition_funct
:
y
=
self.__transition_funct
[
x
]
self.__tap
[
self.__head_posit
]
=
y
[
1
]
if
y
[
2
]
==
``
R
''
:
self.__head_posit
+=
1
elif
y
[
2
]
==
``
L
''
:
self.__head_posit
-=
1
self.__current_st
=
y
[
0
]
def
final
(
self
)
:
if
self.__current_st
in
self.__final_st
:
return
true
els
:
return
fals
use
the
turingmachin
class
:
from
turing_machin
import
turingmachin
initial_st
=
``
init
''
,
accepting_st
=
[
``
final
''
]
,
transition_funct
=
{
(
``
init
''
,
''
0
''
)
:
(
``
init
''
,
``
1
''
,
``
R
''
)
,
(
``
init
''
,
''
1
''
)
:
(
``
init
''
,
``
0
''
,
``
R
''
)
,
(
``
init
''
,
''
``
)
:
(
``
final
''
,
''
``
,
``
N
''
)
,
}
final_st
=
{
``
final
''
}
t
=
turingmachin
(
``
010011
``
,
initial_st
=
``
init
''
,
final_st
=
final_st
,
transition_function=transition_funct
)
print
(
``
input
on
tape
:
\n
''
+
t.get_tap
(
)
)
while
not
t.final
(
)
:
t.step
(
)
print
(
``
result
of
the
ture
machin
calcul
:
''
)
print
(
t.get_tap
(
)
)
the
previou
program
print
the
follow
result
:
input
on
tape
:
010011
result
of
the
ture
machin
calcul
:
101100
previou
chapter
:
finit
state
machin
in
python
next
chapter
:
levenshtein
distanc
©
2011
-
2018
,
bernd
klein
,
bodenseo
;
design
by
denis
mitchinson
adapt
for
python-course.eu
by
bernd
klein
