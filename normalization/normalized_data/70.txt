numer
&
scientif
comput
with
python
:
panda
tutori
:
datafram
numer
python
cours
numer
program
numpi
introductioncr
numpi
arraysdata
type
object
,
dtypenumer
oper
on
numpi
arrayschang
the
dimens
of
arrayspython
,
numpi
and
probabilityweight
choic
and
weight
samplescr
of
synthet
test
databoolean
mask
of
arraysmatrix
arithmeticread
and
write
ndarraysmatplotlib
introductionspin
and
tickslegend
and
annotationsmultipl
figur
and
axeshistogramscontour
plotspython
imag
process
tutorialimag
process
techniquespanda
tutorialpanda
dataframespanda
data
filesd
with
nanbin
datapanda
tutori
continu
:
multi-level
indexingdata
visual
with
panda
and
pythonpython
,
date
and
timepython
,
panda
and
timeserieslinear
combin
python
In
greek
mytholog
,
python
is
the
name
of
a
a
huge
serpent
and
sometim
a
dragon
.
python
had
been
kill
by
the
god
apollo
at
delphi
.
python
wa
creat
out
of
the
slime
and
mud
left
after
the
great
flood
.
He
wa
appoint
by
gaia
(
mother
earth
)
to
guard
the
oracl
of
delphi
,
known
as
pytho
.
the
program
languag
python
ha
not
been
creat
out
of
slime
and
mud
but
out
of
the
program
languag
abc
.
It
ha
been
devis
by
a
dutch
programm
,
name
guido
van
rossum
,
in
amsterdam
.
origin
of
python
guido
van
rossum
wrote
the
follow
about
the
origin
of
python
in
a
foreword
for
the
book
``
program
python
''
by
mark
lutz
in
1996
:
``
over
six
year
ago
,
in
decemb
1989
,
I
wa
look
for
a
``
hobbi
''
program
project
that
would
keep
me
occupi
dure
the
week
around
christma
.
My
offic
(
a
government-run
research
lab
in
amsterdam
)
would
be
close
,
but
I
had
a
home
comput
,
and
not
much
els
on
my
hand
.
I
decid
to
write
an
interpret
for
the
new
script
languag
I
had
been
think
about
late
:
a
descend
of
abc
that
would
appeal
to
unix/c
hacker
.
I
chose
python
as
a
work
titl
for
the
project
,
be
in
a
slightli
irrever
mood
(
and
a
big
fan
of
monti
python
's
fli
circu
)
.
''
thi
websit
is
free
of
annoy
ad
.
We
want
to
keep
it
like
thi
.
you
can
help
with
your
donat
:
the
need
for
donat
bernd
klein
on
facebook
search
thi
websit
:
thi
topic
in
german
/
deutsch
übersetzung
:
pandas-tutori
:
dataframeclassroom
train
cours
thi
websit
contain
a
free
and
extens
onlin
tutori
by
bernd
klein
,
use
materi
from
hi
classroom
python
train
cours
.
If
you
are
interest
in
an
instructor-l
classroom
train
cours
,
you
may
have
a
look
at
the
python
class
by
bernd
klein
at
bodenseo
.
©
kabliczech
-
fotolia.com
quot
of
the
day
:
''
clearli
,
program
cours
should
teach
method
of
design
and
construct
,
and
the
select
exampl
should
be
such
that
a
gradual
develop
can
be
nice
demonstr
.
''
(
niklau
wirth
)
If
you
have
the
choic
work
with
python
2
or
python
3
,
we
recomend
to
switch
to
python
3
!
you
can
read
our
python
tutori
to
see
what
the
differ
are
.
data
protect
declar
data
protect
declar
previou
chapter
:
panda
tutori
next
chapter
:
panda
data
file
datafram
the
underli
idea
of
a
datafram
is
base
on
spreadsheet
.
We
can
see
the
data
structur
of
a
datafram
as
tabular
and
spreadsheet-lik
.
A
datafram
logic
correspond
to
a
``
sheet
''
of
an
excel
document
.
A
datafram
ha
both
a
row
and
a
column
index
.
like
a
spreadsheet
or
excel
sheet
,
a
datafram
object
contain
an
order
collect
of
column
.
each
column
consist
of
a
uniqu
data
typy
,
but
differ
column
can
have
differ
type
,
e.g
.
the
first
column
may
consist
of
integ
,
while
the
second
one
consist
of
boolean
valu
and
so
on
.
there
is
a
close
connect
between
the
datafram
and
the
seri
of
panda
.
A
datafram
can
be
seen
as
a
concaten
of
seri
,
each
seri
have
the
same
index
,
i.e
.
the
index
of
the
datafram
.
We
will
demonstr
thi
in
the
follow
exampl
.
We
defin
the
follow
three
seri
:
import
panda
as
pd
year
=
rang
(
2014
,
2018
)
shop1
=
pd.seri
(
[
2409.14
,
2941.01
,
3496.83
,
3119.55
]
,
index=year
)
shop2
=
pd.seri
(
[
1203.45
,
3441.62
,
3007.83
,
3619.53
]
,
index=year
)
shop3
=
pd.seri
(
[
3412.12
,
3491.16
,
3457.19
,
1963.10
]
,
index=year
)
what
happen
,
if
we
concaten
these
``
shop
''
seri
?
panda
provid
a
concat
function
for
thi
purpos
:
pd.concat
(
[
shop1
,
shop2
,
shop3
]
)
the
previou
python
code
return
the
follow
output
:
2014
2409.14
2015
2941.01
2016
3496.83
2017
3119.55
2014
1203.45
2015
3441.62
2016
3007.83
2017
3619.53
2014
3412.12
2015
3491.16
2016
3457.19
2017
1963.10
dtype
:
float64
thi
result
is
not
what
we
have
intend
or
expect
.
the
reason
is
that
concat
use
0
as
the
default
for
the
axi
paramet
.
let
's
do
it
with
``
axis=1
''
:
shops_df
=
pd.concat
(
[
shop1
,
shop2
,
shop3
]
,
axis=1
)
shops_df
the
abov
python
code
return
the
follow
result
:
0
1
2
2014
2409.14
1203.45
3412.12
2015
2941.01
3441.62
3491.16
2016
3496.83
3007.83
3457.19
2017
3119.55
3619.53
1963.10
let
's
do
some
fine
sand
by
give
name
to
the
column
:
citi
=
[
``
zürich
''
,
``
winterthur
''
,
``
freiburg
''
]
shops_df.column
=
citi
print
(
shops_df
)
#
altern
way
:
give
name
to
seri
:
shop1.nam
=
``
zürich
''
shop2.nam
=
``
winterthur
''
shop3.nam
=
``
freiburg
''
print
(
``
--
--
--
''
)
shops_df2
=
pd.concat
(
[
shop1
,
shop2
,
shop3
]
,
axis=1
)
print
(
shops_df2
)
zürich
winterthur
freiburg
2014
2409.14
1203.45
3412.12
2015
2941.01
3441.62
3491.16
2016
3496.83
3007.83
3457.19
2017
3119.55
3619.53
1963.10
--
--
--
zürich
winterthur
freiburg
2014
2409.14
1203.45
3412.12
2015
2941.01
3441.62
3491.16
2016
3496.83
3007.83
3457.19
2017
3119.55
3619.53
1963.10
thi
wa
nice
,
but
what
kind
of
data
type
is
our
result
?
print
(
type
(
shops_df
)
)
<
class
'pandas.core.frame.datafram
'
>
thi
mean
,
we
can
arrang
or
concat
seri
into
datafram
!
datafram
from
dictionariesa
datafram
ha
a
row
and
column
index
;
it
's
like
a
dict
of
seri
with
a
common
index
.
citi
=
{
``
name
''
:
[
``
london
''
,
``
berlin
''
,
``
madrid
''
,
``
rome
''
,
``
pari
''
,
``
vienna
''
,
``
bucharest
''
,
``
hamburg
''
,
``
budapest
''
,
``
warsaw
''
,
``
barcelona
''
,
``
munich
''
,
``
milan
''
]
,
``
popul
''
:
[
8615246
,
3562166
,
3165235
,
2874038
,
2273305
,
1805681
,
1803425
,
1760433
,
1754000
,
1740119
,
1602386
,
1493900
,
1350680
]
,
``
countri
''
:
[
``
england
''
,
``
germani
''
,
``
spain
''
,
``
itali
''
,
``
franc
''
,
``
austria
''
,
``
romania
''
,
``
germani
''
,
``
hungari
''
,
``
poland
''
,
``
spain
''
,
``
germani
''
,
``
itali
''
]
}
city_fram
=
pd.datafram
(
citi
)
city_fram
the
abov
python
code
return
the
follow
:
countri
name
popul
0
england
london
8615246
1
germani
berlin
3562166
2
spain
madrid
3165235
3
itali
rome
2874038
4
franc
pari
2273305
5
austria
vienna
1805681
6
romania
bucharest
1803425
7
germani
hamburg
1760433
8
hungari
budapest
1754000
9
poland
warsaw
1740119
10
spain
barcelona
1602386
11
germani
munich
1493900
12
itali
milan
1350680
retriev
the
column
namesit
's
possibl
to
get
the
name
of
the
column
as
a
list
:
city_frame.columns.valu
the
abov
code
return
the
follow
:
array
(
[
'countri
'
,
'name
'
,
'popul
'
]
,
dtype=object
)
custom
indexw
can
see
that
an
index
(
0,1,2
,
...
)
ha
been
automat
assign
to
the
datafram
.
We
can
also
assign
a
custom
index
to
the
datafram
object
:
ordin
=
[
``
first
''
,
``
second
''
,
``
third
''
,
``
fourth
''
,
``
fifth
''
,
``
sixth
''
,
``
seventh
''
,
``
eigth
''
,
``
ninth
''
,
``
tenth
''
,
``
eleventh
''
,
``
twelvth
''
,
``
thirteenth
''
]
city_fram
=
pd.datafram
(
citi
,
index=ordin
)
city_fram
after
have
execut
the
python
code
abov
we
receiv
the
follow
:
countri
name
popul
first
england
london
8615246
second
germani
berlin
3562166
third
spain
madrid
3165235
fourth
itali
rome
2874038
fifth
franc
pari
2273305
sixth
austria
vienna
1805681
seventh
romania
bucharest
1803425
eigth
germani
hamburg
1760433
ninth
hungari
budapest
1754000
tenth
poland
warsaw
1740119
eleventh
spain
barcelona
1602386
twelvth
germani
munich
1493900
thirteenth
itali
milan
1350680
rearrang
the
order
of
columnsw
can
also
defin
and
rearrang
the
order
of
the
column
at
the
time
of
creation
of
the
datafram
.
thi
make
also
sure
that
we
will
have
a
defin
order
of
our
column
,
if
we
creat
the
datafram
from
a
dictionari
.
dictionari
are
not
order
,
as
you
have
seen
in
our
chapter
on
dictionari
in
our
python
tutori
,
so
we
can
not
know
in
advanc
what
the
order
of
our
column
will
be
:
city_fram
=
pd.datafram
(
citi
,
columns=
[
``
name
''
,
``
countri
''
,
``
popul
''
]
)
city_fram
We
receiv
the
follow
result
:
name
countri
popul
0
london
england
8615246
1
berlin
germani
3562166
2
madrid
spain
3165235
3
rome
itali
2874038
4
pari
franc
2273305
5
vienna
austria
1805681
6
bucharest
romania
1803425
7
hamburg
germani
1760433
8
budapest
hungari
1754000
9
warsaw
poland
1740119
10
barcelona
spain
1602386
11
munich
germani
1493900
12
milan
itali
1350680
We
chang
both
the
column
order
and
the
order
of
the
index
with
the
function
reindex
with
the
follow
code
:
city_frame.reindex
(
index=
[
0
,
2
,
4
,
6
,
8
,
10
,
12
,
1
,
3
,
5
,
7
,
9
,
11
]
,
columns=
[
'countri
'
,
'name
'
,
'popul
'
]
)
the
previou
code
return
the
follow
output
:
countri
name
popul
0
england
london
8615246
2
spain
madrid
3165235
4
franc
pari
2273305
6
romania
bucharest
1803425
8
hungari
budapest
1754000
10
spain
barcelona
1602386
12
itali
milan
1350680
1
germani
berlin
3562166
3
itali
rome
2874038
5
austria
vienna
1805681
7
germani
hamburg
1760433
9
poland
warsaw
1740119
11
germani
munich
1493900
now
,
we
want
to
renam
our
column
.
for
thi
purpos
,
we
will
use
the
datafram
method
'renam
'
.
thi
method
support
two
call
convent
(
index=index_mapp
,
columns=columns_mapp
,
...
)
(
mapper
,
axis=
{
'index
'
,
'column
'
}
,
...
)
We
will
renam
the
column
of
our
datafram
into
romanian
name
in
the
follow
exampl
.
We
set
the
paramet
inplac
to
true
so
that
our
datafram
will
be
chang
instead
of
return
a
new
datafram
,
if
inplac
is
set
to
fals
,
which
is
the
default
!
city_frame.renam
(
columns=
{
``
name
''
:
''
nume
''
,
``
countri
''
:
''
țară
''
,
``
popul
''
:
''
populați
''
}
,
inplace=tru
)
city_fram
the
abov
python
code
return
the
follow
result
:
nume
țară
populați
0
london
england
8615246
1
berlin
germani
3562166
2
madrid
spain
3165235
3
rome
itali
2874038
4
pari
franc
2273305
5
vienna
austria
1805681
6
bucharest
romania
1803425
7
hamburg
germani
1760433
8
budapest
hungari
1754000
9
warsaw
poland
1740119
10
barcelona
spain
1602386
11
munich
germani
1493900
12
milan
itali
1350680
exist
column
as
the
index
of
a
dataframew
want
to
creat
a
more
use
index
in
the
follow
exampl
.
We
will
use
the
countri
name
as
the
index
,
i.e
.
the
list
valu
associ
to
the
key
``
countri
''
of
our
citi
dictionari
:
city_fram
=
pd.datafram
(
citi
,
columns=
[
``
name
''
,
``
popul
''
]
,
index=c
[
``
countri
''
]
)
city_fram
the
previou
code
return
the
follow
result
:
name
popul
england
london
8615246
germani
berlin
3562166
spain
madrid
3165235
itali
rome
2874038
franc
pari
2273305
austria
vienna
1805681
romania
bucharest
1803425
germani
hamburg
1760433
hungari
budapest
1754000
poland
warsaw
1740119
spain
barcelona
1602386
germani
munich
1493900
itali
milan
1350680
altern
,
we
can
chang
an
exist
datafram
.
We
can
us
the
method
set_index
to
turn
a
column
into
an
index
.
``
set_index
''
doe
not
work
in-plac
,
it
return
a
new
data
frame
with
the
chosen
column
as
the
index
:
city_fram
=
pd.datafram
(
citi
)
city_frame2
=
city_frame.set_index
(
``
countri
''
)
print
(
city_frame2
)
name
popul
countri
england
london
8615246
germani
berlin
3562166
spain
madrid
3165235
itali
rome
2874038
franc
pari
2273305
austria
vienna
1805681
romania
bucharest
1803425
germani
hamburg
1760433
hungari
budapest
1754000
poland
warsaw
1740119
spain
barcelona
1602386
germani
munich
1493900
itali
milan
1350680
We
saw
in
the
previou
exampl
that
the
set_index
method
return
a
new
datafram
object
and
doe
n't
chang
the
origin
datafram
.
If
we
set
the
option
paramet
``
inplac
''
to
true
,
the
datafram
will
be
chang
in
place
,
i.e
.
no
new
object
will
be
creat
:
city_fram
=
pd.datafram
(
citi
)
city_frame.set_index
(
``
countri
''
,
inplace=tru
)
print
(
city_fram
)
name
popul
countri
england
london
8615246
germani
berlin
3562166
spain
madrid
3165235
itali
rome
2874038
franc
pari
2273305
austria
vienna
1805681
romania
bucharest
1803425
germani
hamburg
1760433
hungari
budapest
1754000
poland
warsaw
1740119
spain
barcelona
1602386
germani
munich
1493900
itali
milan
1350680
label-index
on
the
rowsso
far
we
have
index
datafram
via
the
column
.
We
will
demonstr
now
,
how
we
can
access
row
from
datafram
via
the
locat
'loc
'
and
'iloc
'
.
(
'ix
'
is
deprec
and
will
be
remov
in
the
futur
)
city_fram
=
pd.datafram
(
citi
,
columns=
(
``
name
''
,
``
popul
''
)
,
index=c
[
``
countri
''
]
)
print
(
city_frame.loc
[
``
germani
''
]
)
name
popul
germani
berlin
3562166
germani
hamburg
1760433
germani
munich
1493900
print
(
city_frame.loc
[
[
``
germani
''
,
``
franc
''
]
]
)
name
popul
germani
berlin
3562166
germani
hamburg
1760433
germani
munich
1493900
franc
pari
2273305
print
(
city_frame.loc
[
city_frame.popul
>
2000000
]
)
name
popul
england
london
8615246
germani
berlin
3562166
spain
madrid
3165235
itali
rome
2874038
franc
pari
2273305
sum
and
cumul
sumw
can
calcul
the
sum
of
all
the
column
of
a
datafram
or
the
sum
of
certain
column
:
print
(
city_frame.sum
(
)
)
name
londonberlinmadridromeparisviennabucharesthamb
...
popul
33800614
dtype
:
object
city_fram
[
``
popul
''
]
.sum
(
)
the
code
abov
return
the
follow
:
33800614
We
can
use
``
cumsum
''
to
calcul
the
cumul
sum
:
x
=
city_fram
[
``
popul
''
]
.cumsum
(
)
print
(
x
)
england
8615246
germani
12177412
spain
15342647
itali
18216685
franc
20489990
austria
22295671
romania
24099096
germani
25859529
hungari
27613529
poland
29353648
spain
30956034
germani
32449934
itali
33800614
name
:
popul
,
dtype
:
int64
assign
new
valu
to
columnsx
is
a
panda
seri
.
We
can
reassign
the
previous
calcul
cumul
sum
to
the
popul
column
:
city_fram
[
``
popul
''
]
=
x
print
(
city_fram
)
name
popul
england
london
8615246
germani
berlin
12177412
spain
madrid
15342647
itali
rome
18216685
franc
pari
20489990
austria
vienna
22295671
romania
bucharest
24099096
germani
hamburg
25859529
hungari
budapest
27613529
poland
warsaw
29353648
spain
barcelona
30956034
germani
munich
32449934
itali
milan
33800614
instead
of
replac
the
valu
of
the
popul
column
with
the
cumul
sum
,
we
want
to
add
the
cumul
popul
sum
as
a
new
culumn
with
the
name
``
cum_popul
''
.
city_fram
=
pd.datafram
(
citi
,
columns=
[
``
countri
''
,
``
popul
''
,
``
cum_popul
''
]
,
index=c
[
``
name
''
]
)
city_fram
after
have
execut
the
python
code
abov
we
receiv
the
follow
output
:
countri
popul
cum_popul
london
england
8615246
nan
berlin
germani
3562166
nan
madrid
spain
3165235
nan
rome
itali
2874038
nan
pari
franc
2273305
nan
vienna
austria
1805681
nan
bucharest
romania
1803425
nan
hamburg
germani
1760433
nan
budapest
hungari
1754000
nan
warsaw
poland
1740119
nan
barcelona
spain
1602386
nan
munich
germani
1493900
nan
milan
itali
1350680
nan
We
can
see
that
the
column
``
cum_popul
''
is
set
to
nan
,
as
we
have
n't
provid
ani
data
for
it
.
We
will
assign
now
the
cumul
sum
to
thi
column
:
city_fram
[
``
cum_popul
''
]
=
city_fram
[
``
popul
''
]
.cumsum
(
)
city_fram
the
code
abov
return
the
follow
:
countri
popul
cum_popul
london
england
8615246
8615246
berlin
germani
3562166
12177412
madrid
spain
3165235
15342647
rome
itali
2874038
18216685
pari
franc
2273305
20489990
vienna
austria
1805681
22295671
bucharest
romania
1803425
24099096
hamburg
germani
1760433
25859529
budapest
hungari
1754000
27613529
warsaw
poland
1740119
29353648
barcelona
spain
1602386
30956034
munich
germani
1493900
32449934
milan
itali
1350680
33800614
We
can
also
includ
a
column
name
which
is
not
contain
in
the
dictionari
,
when
we
creat
the
datafram
from
the
dictionari
.
In
thi
case
,
all
the
valu
of
thi
column
will
be
set
to
nan
:
city_fram
=
pd.datafram
(
citi
,
columns=
[
``
countri
''
,
``
area
''
,
``
popul
''
]
,
index=c
[
``
name
''
]
)
print
(
city_fram
)
countri
area
popul
london
england
nan
8615246
berlin
germani
nan
3562166
madrid
spain
nan
3165235
rome
itali
nan
2874038
pari
franc
nan
2273305
vienna
austria
nan
1805681
bucharest
romania
nan
1803425
hamburg
germani
nan
1760433
budapest
hungari
nan
1754000
warsaw
poland
nan
1740119
barcelona
spain
nan
1602386
munich
germani
nan
1493900
milan
itali
nan
1350680
access
the
column
of
a
dataframether
are
two
way
to
access
a
column
of
a
datafram
.
the
result
is
in
both
case
a
seri
:
#
in
a
dictionary-lik
way
:
print
(
city_fram
[
``
popul
''
]
)
london
8615246
berlin
3562166
madrid
3165235
rome
2874038
pari
2273305
vienna
1805681
bucharest
1803425
hamburg
1760433
budapest
1754000
warsaw
1740119
barcelona
1602386
munich
1493900
milan
1350680
name
:
popul
,
dtype
:
int64
#
as
an
attribut
print
(
city_frame.popul
)
london
8615246
berlin
3562166
madrid
3165235
rome
2874038
pari
2273305
vienna
1805681
bucharest
1803425
hamburg
1760433
budapest
1754000
warsaw
1740119
barcelona
1602386
munich
1493900
milan
1350680
name
:
popul
,
dtype
:
int64
print
(
type
(
city_frame.popul
)
)
<
class
'pandas.core.series.seri
'
>
city_frame.popul
the
previou
python
code
return
the
follow
result
:
london
8615246
berlin
3562166
madrid
3165235
rome
2874038
pari
2273305
vienna
1805681
bucharest
1803425
hamburg
1760433
budapest
1754000
warsaw
1740119
barcelona
1602386
munich
1493900
milan
1350680
name
:
popul
,
dtype
:
int64
from
the
previou
exampl
,
we
can
see
that
we
have
not
copi
the
popul
column
.
``
p
''
is
a
view
on
the
data
of
city_fram
.
assign
new
valu
to
a
columnth
column
area
is
still
not
defin
.
We
can
set
all
element
of
the
column
to
the
same
valu
:
city_fram
[
``
area
''
]
=
1572
print
(
city_fram
)
countri
area
popul
london
england
1572
8615246
berlin
germani
1572
3562166
madrid
spain
1572
3165235
rome
itali
1572
2874038
pari
franc
1572
2273305
vienna
austria
1572
1805681
bucharest
romania
1572
1803425
hamburg
germani
1572
1760433
budapest
hungari
1572
1754000
warsaw
poland
1572
1740119
barcelona
spain
1572
1602386
munich
germani
1572
1493900
milan
itali
1572
1350680
In
thi
case
,
it
will
be
definit
better
to
assign
the
exact
area
to
the
citi
.
the
list
with
the
area
valu
need
to
have
the
same
length
as
the
number
of
row
in
our
datafram
.
#
area
in
squar
km
:
area
=
[
1572
,
891.85
,
605.77
,
1285
,
105.4
,
414.6
,
228
,
755
,
525.2
,
517
,
101.9
,
310.4
,
181.8
]
#
area
could
have
been
design
as
a
list
,
a
seri
,
an
array
or
a
scalar
city_fram
[
``
area
''
]
=
area
print
(
city_fram
)
countri
area
popul
london
england
1572.00
8615246
berlin
germani
891.85
3562166
madrid
spain
605.77
3165235
rome
itali
1285.00
2874038
pari
franc
105.40
2273305
vienna
austria
414.60
1805681
bucharest
romania
228.00
1803425
hamburg
germani
755.00
1760433
budapest
hungari
525.20
1754000
warsaw
poland
517.00
1740119
barcelona
spain
101.90
1602386
munich
germani
310.40
1493900
milan
itali
181.80
1350680
sort
dataframeslet
's
sort
our
datafram
accord
to
the
citi
area
:
city_fram
=
city_frame.sort_valu
(
by=
''
area
''
,
ascending=fals
)
print
(
city_fram
)
countri
area
popul
london
england
1572.00
8615246
rome
itali
1285.00
2874038
berlin
germani
891.85
3562166
hamburg
germani
755.00
1760433
madrid
spain
605.77
3165235
budapest
hungari
525.20
1754000
warsaw
poland
517.00
1740119
vienna
austria
414.60
1805681
munich
germani
310.40
1493900
bucharest
romania
228.00
1803425
milan
itali
181.80
1350680
pari
franc
105.40
2273305
barcelona
spain
101.90
1602386
let
's
assum
,
we
have
onli
the
area
of
london
,
hamburg
and
milan
.
the
area
are
in
a
seri
with
the
correct
indic
.
We
can
assign
thi
seri
as
well
:
city_fram
=
pd.datafram
(
citi
,
columns=
[
``
countri
''
,
``
area
''
,
``
popul
''
]
,
index=c
[
``
name
''
]
)
some_area
=
pd.seri
(
[
1572
,
755
,
181.8
]
,
index=
[
'london
'
,
'hamburg
'
,
'milan
'
]
)
city_fram
[
'area
'
]
=
some_area
print
(
city_fram
)
countri
area
popul
london
england
1572.0
8615246
berlin
germani
nan
3562166
madrid
spain
nan
3165235
rome
itali
nan
2874038
pari
franc
nan
2273305
vienna
austria
nan
1805681
bucharest
romania
nan
1803425
hamburg
germani
755.0
1760433
budapest
hungari
nan
1754000
warsaw
poland
nan
1740119
barcelona
spain
nan
1602386
munich
germani
nan
1493900
milan
itali
181.8
1350680
insert
new
column
into
exist
dataframesin
the
previou
exampl
we
have
ad
the
column
area
at
creation
time
.
quit
often
it
will
be
necessari
to
add
or
insert
column
into
exist
datafram
.
for
thi
purpos
the
datafram
class
provid
a
method
``
insert
''
,
which
allow
us
to
insert
a
column
into
a
datafram
at
a
specifi
locat
:
insert
(
self
,
loc
,
column
,
valu
,
allow_duplicates=fals
)
`
the
paramet
are
specifi
as
:
paramet
mean
loc
int
thi
valu
should
be
within
the
rang
0
<
=
loc
<
=
len
(
column
)
column
the
column
name
valu
can
be
a
list
,
a
seri
an
array
or
a
scalar
allow_dupl
If
allow_dupl
is
fals
,
an
except
will
be
rais
,
if
column
is
alreadi
containedin
the
datafram
.
city_fram
=
pd.datafram
(
citi
,
columns=
[
``
countri
''
,
``
popul
''
]
,
index=c
[
``
name
''
]
)
idx
=
1
city_frame.insert
(
loc=idx
,
column='area
'
,
value=area
)
city_fram
the
previou
python
code
return
the
follow
:
countri
area
popul
london
england
1572.00
8615246
berlin
germani
891.85
3562166
madrid
spain
605.77
3165235
rome
itali
1285.00
2874038
pari
franc
105.40
2273305
vienna
austria
414.60
1805681
bucharest
romania
228.00
1803425
hamburg
germani
755.00
1760433
budapest
hungari
525.20
1754000
warsaw
poland
517.00
1740119
barcelona
spain
101.90
1602386
munich
germani
310.40
1493900
milan
itali
181.80
1350680
datafram
from
nest
dictionariesa
nest
dictionari
of
dict
can
be
pass
to
a
datafram
as
well
.
the
indic
of
the
outer
dictionari
are
taken
as
the
the
column
and
the
inner
key
.
i.e
.
the
key
of
the
nest
dictionari
,
are
use
as
the
row
indic
:
growth
=
{
``
switzerland
''
:
{
``
2010
''
:
3.0
,
``
2011
''
:
1.8
,
``
2012
''
:
1.1
,
``
2013
''
:
1.9
}
,
``
germani
''
:
{
``
2010
''
:
4.1
,
``
2011
''
:
3.6
,
``
2012
''
:
0.4
,
``
2013
''
:
0.1
}
,
``
franc
''
:
{
``
2010
''
:2.0
,
``
2011
''
:2.1
,
``
2012
''
:
0.3
,
``
2013
''
:
0.3
}
,
``
greec
''
:
{
``
2010
''
:
-5.4
,
``
2011
''
:
-8.9
,
``
2012
''
:
-6.6
,
``
2013
''
:
-3.3
}
,
``
itali
''
:
{
``
2010
''
:1.7
,
``
2011
''
:
0.6
,
``
2012
''
:
-2.3
,
``
2013
''
:
-1.9
}
}
growth_fram
=
pd.datafram
(
growth
)
growth_fram
the
previou
code
return
the
follow
output
:
franc
germani
greec
itali
switzerland
2010
2.0
4.1
-5.4
1.7
3.0
2011
2.1
3.6
-8.9
0.6
1.8
2012
0.3
0.4
-6.6
-2.3
1.1
2013
0.3
0.1
-3.3
-1.9
1.9
you
like
to
have
the
year
in
the
column
and
the
countri
in
the
row
?
No
problem
,
you
can
transpos
the
data
:
growth_frame.t
the
previou
python
code
return
the
follow
output
:
2010
2011
2012
2013
franc
2.0
2.1
0.3
0.3
germani
4.1
3.6
0.4
0.1
greec
-5.4
-8.9
-6.6
-3.3
itali
1.7
0.6
-2.3
-1.9
switzerland
3.0
1.8
1.1
1.9
growth_fram
=
growth_frame.t
growth_frame2
=
growth_frame.reindex
(
[
``
switzerland
''
,
``
itali
''
,
``
germani
''
,
``
greec
''
]
)
print
(
growth_frame2
)
2010
2011
2012
2013
switzerland
3.0
1.8
1.1
1.9
itali
1.7
0.6
-2.3
-1.9
germani
4.1
3.6
0.4
0.1
greec
-5.4
-8.9
-6.6
-3.3
fill
a
datafram
with
random
valu
:
import
numpi
as
np
name
=
[
'frank
'
,
'eve
'
,
'stella
'
,
'guido
'
,
'lara
'
]
index
=
[
``
januari
''
,
``
februari
''
,
``
march
''
,
``
april
''
,
``
may
''
,
``
june
''
,
``
juli
''
,
``
august
''
,
``
septemb
''
,
``
octob
''
,
``
novemb
''
,
``
decemb
''
]
df
=
pd.datafram
(
(
np.random.randn
(
12
,
5
)
*1000
)
.round
(
2
)
,
columns=nam
,
index=index
)
df
after
have
execut
the
python
code
abov
we
receiv
the
follow
output
:
frank
eve
stella
guido
lara
januari
-368.36
331.54
-724.05
-461.15
-243.98
februari
688.92
-46.79
590.58
433.88
353.69
march
-45.12
-30.79
185.01
-1860.11
483.82
april
1640.49
824.92
-254.50
18.88
-422.22
may
-456.31
306.34
-479.41
-1339.50
1343.17
june
199.46
-265.89
-1972.07
-1170.65
-953.38
juli
628.83
-1412.50
-276.20
1242.49
-814.17
august
1000.72
19.01
664.81
261.63
1622.36
septemb
836.30
-946.11
433.53
499.66
2267.20
octob
388.00
-891.88
267.87
-642.04
1049.18
novemb
-23.38
346.94
815.81
597.91
2209.41
decemb
594.83
-2009.37
626.31
-511.81
280.32
In
[
]
:
previou
chapter
:
panda
tutori
next
chapter
:
panda
data
file
©
2011
-
2018
,
bernd
klein
,
bodenseo
;
design
by
denis
mitchinson
adapt
for
python-course.eu
by
bernd
klein
