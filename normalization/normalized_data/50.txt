gui
program
with
python
:
event
and
bind
python
tkinter
cours
tkinter
tutori
say
hello
with
labelsmessag
widgetbuttonsvari
classesradiobuttonscheckboxesentri
widgetscanva
widgetssliderstext
widgetdialogslayout
managementbul
and
cow
/
mastermind
in
tkcreat
menusev
and
bind
event
comput
In
comput
an
event
is
an
action
that
is
usual
initi
outsid
the
scope
of
a
program
and
that
is
handl
by
a
piec
of
code
insid
the
program
.
event
includ
,
for
exampl
,
mous
click
,
mous
movement
or
a
keystrok
of
a
user
,
i.e
.
he
or
she
press
a
key
on
the
keyboard
.
anoth
sourc
can
be
a
hardwar
devic
such
as
a
timer
.
A
program
or
a
script
whose
behaviour
depend
on
event
is
said
to
be
event-driven
.
thi
websit
is
creat
by
bernd
klein
from
:
python
train
cours
event
philosoph
An
event
is
an
occurr
regard
as
a
bare
instant
of
space-tim
as
contrast
with
an
object
which
fill
space
and
ha
endur
.
It
can
also
be
an
occurr
regard
in
isol
from
,
or
contrast
with
,
human
agenc
compar
act
.
We
also
like
to
thank
denis
mitchinson
for
provid
the
style
sheet
of
thi
websit
.
thi
websit
is
free
of
annoy
ad
.
We
want
to
keep
it
like
thi
.
you
can
help
with
your
donat
:
the
need
for
donat
bernd
klein
on
facebook
search
thi
websit
:
classroom
train
thi
websit
contain
a
free
and
extens
onlin
tutori
by
bernd
klein
,
use
materi
from
hi
live
python
class
.
If
you
are
interest
in
an
instructor-l
classroom
train
cours
,
you
may
have
a
look
at
the
python
and
tkinter
cours
by
bernd
klein
at
bodenseo
.
you
can
attend
one
of
hi
python
cours
in
pari
,
london
,
toronto
,
berlin
,
munich
,
hamburg
,
amsterdam
,
den
haag
(
the
hagu
)
or
lake
constanc
/
zurich
.
It
is
also
possibl
to
book
an
on-sit
train
cours
at
your
compani
or
institut
.
quot
of
the
day
:
``
the
question
of
whether
a
comput
can
think
is
no
more
interest
than
the
question
of
whether
a
submarin
can
swim
.
''
(
edsger
wybe
dijkstra
)
graphic
user
interfac
A
graphic
user
interfac
(
gui
)
is
a
type
of
user
interfac
that
allow
user
to
interact
with
electron
devic
in
a
graphic
way
,
i.e
.
with
imag
,
rather
than
text
command
.
origin
interact
user
interfac
to
comput
were
not
graphic
,
they
were
text
orient
and
usual
consist
of
command
,
which
had
to
be
rememb
.
the
do
oper
system
from
microsoft
and
the
bourn
shell
under
linux
are
exampl
of
such
user-comput
interfac
.
data
protect
declar
data
protect
declar
previou
chapter
:
creat
menu
event
and
bind
introduct
A
tkinter
applic
run
most
of
it
time
insid
an
event
loop
,
which
is
enter
via
the
mainloop
method
.
It
wait
for
event
to
happen
.
event
can
be
key
press
or
mous
oper
by
the
user
.
tkinter
provid
a
mechan
to
let
the
programm
deal
with
event
.
for
each
widget
,
it
's
possibl
to
bind
python
function
and
method
to
an
event
.
widget.bind
(
event
,
handler
)
If
the
defin
event
occur
in
the
widget
,
the
``
handler
''
function
is
call
with
an
event
object
.
describ
the
event
.
#
!
/usr/bin/python3
#
write
tkinter
as
tkinter
to
be
python
2.x
compat
from
tkinter
import
*
def
hello
(
event
)
:
print
(
``
singl
click
,
button-l
''
)
def
quit
(
event
)
:
print
(
``
doubl
click
,
so
let
's
stop
''
)
import
sy
;
sys.exit
(
)
widget
=
button
(
none
,
text='mous
click
'
)
widget.pack
(
)
widget.bind
(
'
<
button-1
>
'
,
hello
)
widget.bind
(
'
<
double-1
>
'
,
quit
)
widget.mainloop
(
)
let
's
have
anoth
simpl
exampl
,
which
show
how
to
use
the
motion
event
,
i.e
.
if
the
mous
is
move
insid
of
a
widget
:
from
tkinter
import
*
def
motion
(
event
)
:
print
(
``
mous
posit
:
(
%
s
%
s
)
''
%
(
event.x
,
event.i
)
)
return
master
=
Tk
(
)
whatever_you_do
=
``
whatev
you
do
will
be
insignific
,
but
it
is
veri
import
that
you
do
it.\n
(
mahatma
gandhi
)
''
msg
=
messag
(
master
,
text
=
whatever_you_do
)
msg.config
(
bg='lightgreen
'
,
font=
(
'time
'
,
24
,
'ital
'
)
)
msg.bind
(
'
<
motion
>
'
,
motion
)
msg.pack
(
)
mainloop
(
)
everi
time
we
move
the
mous
in
the
messag
widget
,
the
posit
of
the
mous
pointer
will
be
print
.
when
we
leav
thi
widget
,
the
function
motion
(
)
is
not
call
anymor
.
event
tkinter
use
so-cal
event
sequenc
for
allow
the
user
to
defin
which
event
,
both
specif
and
gener
,
he
or
she
want
to
bind
to
handler
.
It
is
the
first
argument
``
event
''
of
the
bind
method
.
the
event
sequenc
is
given
as
a
string
,
use
the
follow
syntax
:
<
modifier-type-detail
>
the
type
field
is
the
essenti
part
of
an
event
specifi
,
wherea
the
``
modifi
''
and
``
detail
''
field
are
not
obligatori
and
are
left
out
in
mani
case
.
they
are
use
to
provid
addit
inform
for
the
chosen
``
type
''
.
the
event
``
type
''
describ
the
kind
of
event
to
be
bound
,
e.g
.
action
like
mous
click
,
key
press
or
the
widget
got
the
input
focu
.
event
descript
<
button
>
A
mous
button
is
press
with
the
mous
pointer
over
the
widget
.
the
detail
part
specifi
which
button
,
e.g
.
the
left
mous
button
is
defin
by
the
event
<
button-1
>
,
the
middl
button
by
<
button-2
>
,
and
the
rightmost
mous
button
by
<
button-3
>
.
<
button-4
>
defin
the
scroll
up
event
on
mice
with
wheel
support
and
and
<
button-5
>
the
scroll
down
.
If
you
press
down
a
mous
button
over
a
widget
and
keep
it
press
,
tkinter
will
automat
``
grab
''
the
mous
pointer
.
further
mous
event
like
motion
and
releas
event
will
be
sent
to
the
current
widget
,
even
if
the
mous
is
move
outsid
the
current
widget
.
the
current
posit
,
rel
to
the
widget
,
of
the
mous
pointer
is
provid
in
the
x
and
y
member
of
the
event
object
pass
to
the
callback
.
you
can
use
buttonpress
instead
of
button
,
or
even
leav
it
out
complet
:
,
,
and
<
1
>
are
all
synonym
.
<
motion
>
the
mous
is
move
with
a
mous
button
be
held
down
.
To
specifi
the
left
,
middl
or
right
mous
button
use
<
b1-motion
>
,
<
b2-motion
>
and
<
b3-motion
>
respect
.
the
current
posit
of
the
mous
pointer
is
provid
in
the
x
and
y
member
of
the
event
object
pass
to
the
callback
,
i.e
.
event.x
,
event.i
<
buttonreleas
>
event
,
if
a
button
is
releas
.
To
specifi
the
left
,
middl
or
right
mous
button
use
<
buttonrelease-1
>
,
<
buttonrelease-2
>
,
and
<
buttonrelease-3
>
respect
.
the
current
posit
of
the
mous
pointer
is
provid
in
the
x
and
y
member
of
the
event
object
pass
to
the
callback
,
i.e
.
event.x
,
event.i
<
double-button
>
similar
to
the
button
event
,
see
abov
,
but
the
button
is
doubl
click
instead
of
a
singl
click
.
To
specifi
the
left
,
middl
or
right
mous
button
use
<
double-button-1
>
,
<
double-button-2
>
,
and
<
double-button-3
>
respect
.
you
can
use
doubl
or
tripl
as
prefix
.
note
that
if
you
bind
to
both
a
singl
click
(
<
button-1
>
)
and
a
doubl
click
(
<
double-button-1
>
)
,
both
bind
will
be
call
.
<
enter
>
the
mous
pointer
enter
the
widget.attent
:
thi
doe
n't
mean
that
the
user
press
the
enter
key
!
.
<
return
>
is
use
for
thi
purpos
.
<
leav
>
the
mous
pointer
left
the
widget
.
<
focusin
>
keyboard
focu
wa
move
to
thi
widget
,
or
to
a
child
of
thi
widget
.
<
focusout
>
keyboard
focu
wa
move
from
thi
widget
to
anoth
widget
.
<
return
>
the
user
press
the
enter
key
.
you
can
bind
to
virtual
all
key
on
the
keyboard
:
the
special
key
are
cancel
(
the
break
key
)
,
backspac
,
tab
,
return
(
the
enter
key
)
,
shift_l
(
ani
shift
key
)
,
control_l
(
ani
control
key
)
,
alt_l
(
ani
alt
key
)
,
paus
,
caps_lock
,
escap
,
prior
(
page
Up
)
,
next
(
page
down
)
,
end
,
home
,
left
,
Up
,
right
,
down
,
print
,
insert
,
delet
,
F1
,
F2
,
F3
,
F4
,
F5
,
F6
,
F7
,
F8
,
F9
,
f10
,
f11
,
f12
,
num_lock
,
and
scroll_lock
.
<
key
>
the
user
press
ani
key
.
the
key
is
provid
in
the
char
member
of
the
event
object
pass
to
the
callback
(
thi
is
an
empti
string
for
special
key
)
.
a
the
user
type
an
``
a
''
key
.
most
printabl
charact
can
be
use
as
is
.
the
except
are
space
(
<
space
>
)
and
less
than
(
<
less
>
)
.
note
that
1
is
a
keyboard
bind
,
while
<
1
>
is
a
button
bind
.
<
shift-up
>
the
user
press
the
Up
arrow
,
while
hold
the
shift
key
press
.
you
can
use
prefix
like
alt
,
shift
,
and
control
.
<
configur
>
the
size
of
the
widget
chang
.
the
new
size
is
provid
in
the
width
and
height
attribut
of
the
event
object
pass
to
the
callback
.
On
some
platform
,
it
can
mean
that
the
locat
chang
.
previou
chapter
:
creat
menu
Â©
2011
-
2018
,
bernd
klein
,
bodenseo
;
design
by
denis
mitchinson
adapt
for
python-course.eu
by
bernd
klein
