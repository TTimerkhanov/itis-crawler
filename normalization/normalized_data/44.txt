python2
tutori
:
inherit
exampl
python
cours
python
2
tutori
histori
and
philosophi
of
pythonwhi
python
?
interact
modeexecut
a
scriptstructur
with
indentationdata
type
and
variablesoperatorsinput
and
raw_input
via
the
keyboardcondit
statementswhil
loopsfor
loopsformat
outputoutput
with
printsequenti
data
typeslist
manipulationdictionariesset
and
frozen
setsshallow
and
deep
copyfunctionsrecurs
and
recurs
functionstest
,
doctest
,
unittestsdecoratorsmemo
with
decoratorspass
argumentsnamespacesglob
vs.
local
variablesfil
managementmodular
program
and
modulesintroduct
in
regular
expressionsregular
express
,
advancedlambda
oper
,
filter
,
reduc
and
maplist
comprehensiongeneratorsexcept
handlingobject
orient
programminginherit
exampleslotsclass
and
class
creationroad
to
metaclassesmetaclassesmetaclass
exampl
:
count
function
callsabstract
class
inherit
merriam-webst
's
definit
of
inherit
:
the
act
of
inherit
properti
the
recept
of
genet
qualiti
by
transmiss
from
parent
to
offspr
the
acquisit
of
a
possess
,
condit
,
or
trait
from
past
gener
tradit
a
valuabl
possess
that
is
a
common
heritag
from
natur
thi
websit
is
creat
by
:
python
train
cours
in
canada
,
the
US
,
and
europ
clock
and
calendar
``
I
must
govern
the
clock
,
not
be
govern
by
it
.
''
(
golda
meir
)
``
We
must
not
allow
the
clock
and
the
calendar
to
blind
us
to
the
fact
that
each
moment
of
life
is
a
miracl
and
mysteri
.
''
(
h.g
.
well
)
the
famou
novel
1984
by
georg
orwel
start
with
clock
out-of-ord
:
``
It
wa
a
bright
cold
day
in
april
,
and
the
clock
were
strike
thirteen
.
''
thi
websit
is
free
of
annoy
ad
.
We
want
to
keep
it
like
thi
.
you
can
help
with
your
donat
:
the
need
for
donat
bernd
klein
on
facebook
search
thi
websit
:
python
2.7thi
tutori
deal
with
python
version
2.7thi
chapter
from
our
cours
is
avail
in
a
version
for
python3
:
inherit
examplepython
train
cours
If
you
want
to
learn
python
fast
and
effici
,
you
should
consid
a
python
train
cours
at
bodenseo
.
there
are
also
special
seminar
for
advanc
student
like
the
python
&
xml
train
cours
.
If
you
want
to
acquir
special
knowledg
in
text
process
and
text
classif
,
then
``
python
text
process
cours
''
will
be
the
right
one
for
you
.
all
the
python
seminar
are
avail
in
german
as
well
:
python-kurs
''
you
can
also
book
bernd
klein
for
on-sit
train
cours
inherit
in
python
one
of
the
greatest
advantag
of
object
orient
program
(
oop
)
is
the
possibl
of
reus
of
code
.
one
way
to
achiev
thi
consist
in
use
inherit
.
data
protect
declar
data
protect
declar
previou
chapter
:
object
orient
program
next
chapter
:
slot
inherit
exampl
introduct
there
are
n't
mani
good
exampl
on
inherit
avail
on
the
web
.
they
are
either
extrem
simpl
and
artifici
or
they
are
way
to
complic
.
We
want
to
close
the
gap
by
provid
an
exampl
which
is
on
the
one
hand
more
realist
-
but
still
not
realist
-
and
on
the
other
hand
simpl
enough
to
see
and
understand
the
basic
aspect
of
inherit
.
In
our
previou
chapter
,
we
introduc
inherit
formal
.
To
thi
purpos
we
defin
two
base
class
:
one
is
an
implement
of
a
clock
and
the
other
one
of
a
calendar
.
base
on
these
two
class
,
we
defin
a
class
calendarclock
,
which
inherit
both
from
the
class
calendar
and
from
the
class
clock
.
the
clock
class
class
clock
(
object
)
:
def
__init__
(
self
,
hours=0
,
minutes=0
,
seconds=0
)
:
self.__hour
=
hour
self.__minut
=
minut
self.__second
=
second
def
set
(
self
,
hour
,
minut
,
seconds=0
)
:
self.__hour
=
hour
self.__minut
=
minut
self.__second
=
second
def
tick
(
self
)
:
``
''
''
time
will
be
advanc
by
one
second
``
''
''
if
self.__second
==
59
:
self.__second
=
0
if
(
self.__minut
==
59
)
:
self.__minut
=
0
self.__hour
=
0
if
self.__hours==23
els
self.__hours+1
els
:
self.__minut
+=
1
;
els
:
self.__second
+=
1
;
def
display
(
self
)
:
print
(
``
%
d
:
%
d
:
%
d
''
%
(
self.__hour
,
self.__minut
,
self.__second
)
)
def
__str__
(
self
)
:
return
``
%
2d
:
%
2d
:
%
2d
''
%
(
self.__hour
,
self.__minut
,
self.__second
)
x
=
clock
(
)
print
(
x
)
for
i
in
xrang
(
10000
)
:
x.tick
(
)
print
(
x
)
the
calendar
class
class
calendar
(
object
)
:
month
=
(
31,28,31,30,31,30,31,31,30,31,30,31
)
def
__init__
(
self
,
day=1
,
month=1
,
year=1900
)
:
self.__day
=
day
self.__month
=
month
self.__year
=
year
def
leapyear
(
self
,
y
)
:
if
y
%
4
:
#
not
a
leap
year
return
0
;
els
:
if
y
%
100
:
return
1
;
els
:
if
y
%
400
:
return
0
els
:
return
1
;
def
set
(
self
,
day
,
month
,
year
)
:
self.__day
=
day
self.__month
=
month
self.__year
=
year
def
get
(
)
:
return
(
self
,
self.__day
,
self.__month
,
self.__year
)
def
advanc
(
self
)
:
month
=
calendar.month
max_day
=
month
[
self.__month-1
]
if
self.__month
==
2
:
max_day
+=
self.leapyear
(
self.__year
)
if
self.__day
==
max_day
:
self.__day
=
1
if
(
self.__month
==
12
)
:
self.__month
=
1
self.__year
+=
1
els
:
self.__month
+=
1
els
:
self.__day
+=
1
def
__str__
(
self
)
:
return
str
(
self.__day
)
+
''
/
''
+
str
(
self.__month
)
+
``
/
''
+
str
(
self.__year
)
if
__name__
==
``
__main__
''
:
x
=
calendar
(
)
print
(
x
)
x.advanc
(
)
print
(
x
)
the
calendar-clock
class
from
clock
import
clock
from
calendar
import
calendar
class
calendarclock
(
clock
,
calendar
)
:
def
__init__
(
self
,
day
,
month
,
year
,
hours=0
,
minutes=0
,
seconds=0
)
:
calendar.__init__
(
self
,
day
,
month
,
year
)
clock.__init__
(
self
,
hour
,
minut
,
second
)
def
__str__
(
self
)
:
return
calendar.__str__
(
self
)
+
``
,
``
+
clock.__str__
(
self
)
if
__name__
==
``
__main__
''
:
x
=
calendarclock
(
24,12,57
)
print
(
x
)
for
i
in
rang
(
1000
)
:
x.tick
(
)
for
i
in
rang
(
1000
)
:
x.advanc
(
)
print
(
x
)
previou
chapter
:
object
orient
program
next
chapter
:
slot
Â©
2011
-
2018
,
bernd
klein
,
bodenseo
;
design
by
denis
mitchinson
adapt
for
python-course.eu
by
bernd
klein
