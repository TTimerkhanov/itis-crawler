python2
tutori
:
gener
python
cours
python
2
tutori
histori
and
philosophi
of
pythonwhi
python
?
interact
modeexecut
a
scriptstructur
with
indentationdata
type
and
variablesoperatorsinput
and
raw_input
via
the
keyboardcondit
statementswhil
loopsfor
loopsformat
outputoutput
with
printsequenti
data
typeslist
manipulationdictionariesset
and
frozen
setsshallow
and
deep
copyfunctionsrecurs
and
recurs
functionstest
,
doctest
,
unittestsdecoratorsmemo
with
decoratorspass
argumentsnamespacesglob
vs.
local
variablesfil
managementmodular
program
and
modulesintroduct
in
regular
expressionsregular
express
,
advancedlambda
oper
,
filter
,
reduc
and
maplist
comprehensiongeneratorsexcept
handlingobject
orient
programminginherit
exampleslotsclass
and
class
creationroad
to
metaclassesmetaclassesmetaclass
exampl
:
count
function
callsabstract
class
python
In
greek
mytholog
,
python
is
the
name
of
a
a
huge
serpent
and
sometim
a
dragon
.
python
had
been
kill
by
the
god
apollo
at
delphi
.
python
wa
creat
out
of
the
slime
and
mud
left
after
the
great
flood
.
He
wa
appoint
by
gaia
(
mother
earth
)
to
guard
the
oracl
of
delphi
,
known
as
pytho
.
the
program
languag
python
ha
not
been
creat
out
of
slime
and
mud
but
out
of
the
program
languag
abc
.
It
ha
been
devis
by
a
dutch
programm
,
name
guido
van
rossum
,
in
amsterdam
.
origin
of
python
guido
van
rossum
wrote
the
follow
about
the
origin
of
python
in
a
foreword
for
the
book
``
program
python
''
by
mark
lutz
in
1996
:
``
over
six
year
ago
,
in
decemb
1989
,
I
wa
look
for
a
``
hobbi
''
program
project
that
would
keep
me
occupi
dure
the
week
around
christma
.
My
offic
(
a
government-run
research
lab
in
amsterdam
)
would
be
close
,
but
I
had
a
home
comput
,
and
not
much
els
on
my
hand
.
I
decid
to
write
an
interpret
for
the
new
script
languag
I
had
been
think
about
late
:
a
descend
of
abc
that
would
appeal
to
unix/c
hacker
.
I
chose
python
as
a
work
titl
for
the
project
,
be
in
a
slightli
irrever
mood
(
and
a
big
fan
of
monti
python
's
fli
circu
)
.
''
thi
websit
is
free
of
annoy
ad
.
We
want
to
keep
it
like
thi
.
you
can
help
with
your
donat
:
the
need
for
donat
bernd
klein
on
facebook
search
thi
websit
:
thi
topic
in
german
/
deutsch
übersetzung
:
generatorenpython
2.7thi
tutori
deal
with
python
version
2.7thi
chapter
from
our
cours
is
avail
in
a
version
for
python3
:
generatorsclassroom
train
cours
thi
websit
contain
a
free
and
extens
onlin
tutori
by
bernd
klein
,
use
materi
from
hi
classroom
python
train
cours
.
If
you
are
interest
in
an
instructor-l
classroom
train
cours
,
you
may
have
a
look
at
the
python
class
by
bernd
klein
at
bodenseo
.
©
kabliczech
-
fotolia.com
quot
of
the
day
:
''
for
instanc
,
on
the
planet
earth
,
man
had
alway
assum
that
he
wa
more
intellig
than
dolphin
becaus
he
had
achiev
so
much
-
the
wheel
,
new
york
,
war
and
so
on
-
whilst
all
the
dolphin
had
ever
done
wa
muck
about
in
the
water
have
a
good
time
.
but
convers
,
the
dolphin
had
alway
believ
that
they
were
far
more
intellig
than
man
for
precis
the
same
reason
''
(
dougla
adam
,
the
hitchhik
's
guid
to
the
galaxi
)
If
you
have
the
choic
work
with
python
2
or
python
3
,
we
recomend
to
switch
to
python
3
!
you
can
read
our
python
tutori
to
see
what
the
differ
are
.
data
protect
declar
data
protect
declar
previou
chapter
:
list
comprehens
next
chapter
:
except
handl
gener
introduct
gener
are
a
simpl
and
power
possibl
to
creat
or
to
gener
iter
.
On
the
surfac
they
look
like
function
,
but
there
is
both
a
syntact
and
a
semant
differ
.
instead
of
return
statement
you
will
find
insid
of
the
bodi
of
a
gener
onli
yield
statement
,
i.e
.
one
or
more
yield
statement
.
anoth
import
featur
of
gener
is
that
the
local
variabl
and
the
execut
start
is
automat
save
between
call
.
thi
is
necessari
,
becaus
unlik
an
ordinari
function
success
call
to
a
gener
function
do
n't
start
execut
at
the
begin
of
the
function
.
instead
,
the
new
call
to
a
gener
function
will
resum
execut
right
after
the
yield
statement
in
the
code
,
where
the
last
call
exit
.
In
other
word
:
when
the
python
interpret
find
a
yield
statement
insid
of
an
iter
gener
by
a
gener
,
it
record
the
posit
of
thi
statement
and
the
local
variabl
,
and
return
from
the
iter
.
the
next
time
thi
iter
is
call
,
it
will
resum
execut
at
the
line
follow
the
previou
yield
statement
.
there
may
be
more
than
one
yield
statement
in
the
code
of
a
gener
or
the
yield
statement
might
be
insid
the
bodi
of
a
loop
.
If
there
is
a
return
statement
in
the
code
of
a
gener
,
the
execut
will
stop
with
a
stopiter
except
error
if
thi
code
is
execut
by
the
python
interpret
.
everyth
what
can
be
done
with
a
gener
can
be
implement
with
a
class
base
iter
as
well
.
but
the
crucial
advantag
of
gener
consist
in
automat
creat
the
method
__iter__
(
)
and
next
(
)
.
gener
provid
a
veri
neat
way
of
produc
data
which
is
huge
or
infinit
.
the
follow
is
a
simpl
exampl
of
a
gener
,
which
is
capabl
of
produc
four
citi
name
:
def
city_gener
(
)
:
yield
(
``
konstanz
''
)
yield
(
``
zurich
''
)
yield
(
``
schaffhausen
''
)
yield
(
``
stuttgart
''
)
It
's
possibl
to
creat
an
iter
with
thi
gener
,
which
gener
one
after
the
other
the
four
citi
konstanz
,
zurich
,
schaffhausen
and
stuttgart
.
>
>
>
from
city_gener
import
city_gener
>
>
>
x
=
city_gener
(
)
>
>
>
print
x.next
(
)
konstanz
>
>
>
print
x.next
(
)
zurich
>
>
>
print
x.next
(
)
schaffhausen
>
>
>
print
x.next
(
)
stuttgart
>
>
>
print
x.next
(
)
traceback
(
most
recent
call
last
)
:
file
``
<
stdin
>
''
,
line
1
,
in
<
modul
>
stopiter
>
>
>
As
we
can
see
,
we
have
gener
an
iter
x
in
the
interact
shell
.
everi
call
of
the
method
next
(
)
return
anoth
citi
.
after
the
last
citi
,
i.e
.
stuttgart
,
ha
been
creat
,
anoth
call
of
x.next
(
)
rais
an
error
,
say
that
the
iter
ha
stop
,
i.e
.
``
stopiter
''
.
can
we
send
a
reset
to
an
iter
is
a
frequent
ask
question
,
so
that
it
can
start
the
iter
all
over
again
.
there
is
no
reset
,
but
it
's
possibl
to
creat
anoth
gener
.
thi
can
be
done
e.g
.
by
have
the
statement
``
x
=
city_gener
(
)
''
again
.
thought
at
first
sight
the
yield
statement
look
like
the
return
statement
of
a
function
,
we
can
see
in
thi
exampl
that
there
is
a
big
differ
.
If
we
had
a
return
statement
instead
of
a
yield
in
the
previou
exampl
,
it
would
be
a
function
.
but
thi
function
would
alway
return
``
konstanz
''
and
never
ani
of
the
other
citi
,
i.e
.
zurich
,
schaffhausen
or
stuttgart
.
method
of
oper
As
we
have
elabor
in
the
introduct
of
thi
chapter
,
the
gener
offer
a
comfort
method
to
gener
iter
,
and
that
's
whi
they
are
call
gener
.
method
of
work
:
A
gener
is
call
like
a
function
.
It
's
return
valu
is
an
iter
object
.
the
code
of
the
gener
will
not
be
execut
in
thi
stage
.
the
iter
can
be
use
by
call
the
next
method
.
the
first
time
the
execut
start
like
a
function
,
i.e
.
the
first
line
of
code
within
the
bodi
of
the
iter
.
the
code
is
execut
until
a
yield
statement
is
reach
.
yield
return
the
valu
of
the
express
,
which
is
follow
the
keyword
yield
.
thi
is
like
a
function
,
but
python
keep
track
of
the
posit
of
thi
yield
and
the
state
of
the
local
variabl
is
store
for
the
next
call
.
At
the
next
call
,
the
execut
continu
with
the
statement
follow
the
yield
statement
and
the
variabl
have
the
same
valu
as
they
had
in
the
previou
call
.
the
iter
is
finish
,
if
the
gener
bodi
is
complet
work
through
or
if
the
program
flow
encount
a
return
statement
without
a
valu
.
We
will
illustr
thi
behaviour
in
the
follow
exampl
of
a
gener
which
gener
the
fibonacci
number
.
the
fibonacci
sequenc
is
name
after
leonardo
of
pisa
,
who
wa
known
as
fibonacci
(
a
contract
of
filiu
bonacci
,
``
son
of
bonaccio
''
)
.
In
hi
textbook
liber
abaci
,
which
appear
in
the
year
1202
)
he
had
an
exercis
about
the
rabbit
and
their
breed
:
It
start
with
a
newly-born
pair
of
rabbit
,
i.e
.
a
male
and
a
femal
anim
.
It
take
one
month
until
they
can
mate
.
At
the
end
of
the
second
month
the
femal
give
birth
to
a
new
pair
of
rabbit
.
now
let
's
suppos
that
everi
femal
rabbit
will
bring
forth
anoth
pair
of
rabbit
everi
month
after
the
end
of
the
first
month
.
We
have
to
mention
that
fibonacci
's
rabbit
never
die
.
they
question
is
how
larg
the
popul
will
be
after
a
certain
period
of
time
.
thi
produc
a
sequenc
of
number
:
0,1,1,2,3,5,8,13
thi
sequenc
can
be
defin
in
mathemat
term
like
thi
:
Fn
=
Fn
-
1
+
Fn
-
2
with
the
seed
valu
:
F0
=
0
and
F1
=
1
def
fibonacci
(
n
)
:
``
''
''
fibonacci
number
gener
,
first
n
''
''
''
a
,
b
,
counter
=
0
,
1
,
0
while
true
:
if
(
counter
>
n
)
:
return
yield
a
a
,
b
=
b
,
a
+
b
counter
+=
1
f
=
fibonacci
(
5
)
for
x
in
f
:
print
x
,
print
the
gener
abov
can
be
use
to
creat
the
first
n
fibonacci
number
,
or
better
(
n+1
)
number
becaus
the
0th
number
is
also
includ
.
In
the
next
exampl
we
show
you
a
version
which
is
capabl
of
return
an
endless
iter
.
We
have
to
take
care
when
we
use
thi
iter
that
a
termin
criterium
is
use
:
def
fibonacci
(
)
:
``
''
''
fibonacci
number
gener
''
''
''
a
,
b
=
0
,
1
while
true
:
yield
a
a
,
b
=
b
,
a
+
b
f
=
fibonacci
(
)
counter
=
0
for
x
in
f
:
print
x
,
counter
+=
1
if
(
counter
>
10
)
:
break
print
recurs
gener
like
function
gener
can
be
recurs
program
.
the
follow
exampl
is
a
gener
to
creat
all
the
permut
of
a
given
list
of
item
.
for
those
who
do
n't
know
what
permut
are
,
we
have
a
short
introduct
:
formal
definit
:
A
permut
is
a
rearrang
of
the
element
of
an
order
list
.
In
other
word
:
everi
arrang
of
n
element
is
call
a
permut
.
In
the
follow
line
we
show
you
all
the
permut
of
the
letter
a
,
b
and
c
:
a
b
c
a
c
b
b
a
c
b
c
a
c
a
b
c
b
a
the
number
of
permut
on
a
set
of
n
element
is
given
by
n
!
n
!
=
n*
(
n-1
)
*
(
n-2
)
...
2
*
1
the
permut
gener
can
be
call
with
an
arbitrari
list
of
object
.
the
iter
return
by
thi
gener
gener
all
the
possibl
permut
:
def
permut
(
item
)
:
n
=
len
(
item
)
if
n==0
:
yield
[
]
els
:
for
i
in
rang
(
len
(
item
)
)
:
for
cc
in
permut
(
item
[
:
i
]
+item
[
i+1
:
]
)
:
yield
[
item
[
i
]
]
+cc
for
p
in
permut
(
[
'
r
'
,
'
e
'
,
'd
'
]
)
:
print
``
.join
(
p
)
for
p
in
permut
(
list
(
``
game
''
)
)
:
print
``
.join
(
p
)
A
gener
of
gener
the
second
gener
of
our
fibonacci
sequenc
exampl
gener
an
iter
,
which
can
theoret
produc
all
the
fibonacci
number
,
i.e
.
an
infinit
number
.
but
you
should
n't
tri
to
produc
all
these
number
,
as
we
would
do
in
the
follow
exampl
:
list
(
fibonacci
(
)
)
thi
will
show
you
veri
fast
the
limit
of
your
comput
.
In
most
practic
applic
,
we
onli
need
the
first
n
element
of
an
``
endless
''
iter
.
We
can
use
anoth
gener
,
in
our
exampl
firstn
,
to
creat
the
first
n
element
of
a
gener
g
:
def
firstn
(
g
,
n
)
:
for
i
in
rang
(
n
)
:
yield
g.next
(
)
the
follow
script
return
the
first
10
element
of
the
fibonacci
sequenc
:
#
!
/usr/bin/env
python
def
fibonacci
(
)
:
``
''
''
ein
fibonacci-zahlen-gener
''
''
''
a
,
b
=
0
,
1
while
true
:
yield
a
a
,
b
=
b
,
a
+
b
def
firstn
(
g
,
n
)
:
for
i
in
rang
(
n
)
:
yield
g.next
(
)
print
list
(
firstn
(
fibonacci
(
)
,
10
)
)
previou
chapter
:
list
comprehens
next
chapter
:
except
handl
©
2011
-
2018
,
bernd
klein
,
bodenseo
;
design
by
denis
mitchinson
adapt
for
python-course.eu
by
bernd
klein
