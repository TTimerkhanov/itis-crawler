python2
tutori
:
extens
python
exampl
python
cours
python
3
tutori
the
origin
of
pythonstart
with
python
:
the
interact
shellexecut
a
scriptindentationdata
type
and
variablesoperatorssequenti
data
type
:
list
and
stringslist
manipulationsshallow
and
deep
copydictionariesset
and
frozen
setsan
extens
exampl
use
setsinput
via
the
keyboardcondit
statementsloop
,
while
loopfor
loopsdiffer
between
inter
und
iterablesoutput
with
printformat
output
with
string
modulo
and
the
format
methodfunctionsrecurs
and
recurs
functionsparamet
pass
in
functionsnamespacesglob
and
local
variablesdecoratorsmemo
with
decoratorsread
and
write
filesmodular
program
and
modulespackag
in
pythonregular
expressionsregular
express
,
advancedlambda
oper
,
filter
,
reduc
and
maplist
comprehensioniter
and
generatorsexcept
handlingtest
,
doctest
,
unittestsobject
orient
programmingclass
and
instanc
attributesproperti
vs.
getter
and
settersinheritancemultipl
inheritancemag
method
and
oper
overloadingoop
,
inherit
exampleslotsclass
and
class
creationroad
to
metaclassesmetaclassesmetaclass
use
case
:
count
function
callsabstract
class
jame
joyc
jame
joyc
wa
born
in
rathgar
,
dublin
,
ireland
on
the
2nd
of
februari
1882
.
He
wrote
poetri
,
novel
and
short
stori
.
He
is
regard
as
one
of
the
most
import
and
influenti
author
of
the
20th
centuri
.
hi
most
famou
work
is
ulyss
,
publish
in
1922
.
He
also
publish
the
short-stori
collect
dublin
in
1914
,
and
the
novel
A
portrait
of
the
artist
as
a
young
man
(
1916
)
and
finnegan
wake
(
1939
)
.
joyc
frequent
travel
to
switzerland
for
eye
surgeri
and
for
treatment
for
hi
daughter
lucia
.
she
suffer
from
from
schizophrenia
.
jung
,
who
treat
lucia
in
1934
,
told
the
joyc
biograph
richard
ellmann
that
lucia
and
her
father
were
``
like
two
peopl
go
to
the
bottom
of
a
river
,
one
fall
and
the
other
dive
.
''
He
die
1941
in
zurich
.
thi
websit
is
creat
by
:
python
train
cours
in
canada
,
the
US
,
and
europ
thi
websit
is
free
of
annoy
ad
.
We
want
to
keep
it
like
thi
.
you
can
help
with
your
donat
:
the
need
for
donat
bernd
klein
on
facebook
search
thi
websit
:
classroom
train
cours
thi
websit
contain
a
free
and
extens
onlin
tutori
by
bernd
klein
,
use
materi
from
hi
classroom
python
train
cours
.
If
you
are
interest
in
an
instructor-l
classroom
train
cours
,
you
may
have
a
look
at
the
python
class
by
bernd
klein
at
bodenseo
.
©
kabliczech
-
fotolia.com
quot
of
the
day
:
''
If
you
use
the
origin
world
wide
web
program
,
you
never
see
a
url
or
have
to
deal
with
html
.
that
wa
a
surpris
to
me
that
peopl
were
prepar
to
painstakingli
write
html
.
''
(
tim
berner
lee
)
If
you
have
the
choic
work
with
python
2
or
python
3
,
we
recomend
to
switch
to
python
3
!
you
can
read
our
python
tutori
to
see
what
the
differ
are
.
data
protect
declar
data
protect
declar
previou
chapter
:
set
and
frozen
set
next
chapter
:
input
via
the
keyboard
An
extens
exampl
for
set
python
and
the
best
novel
thi
chapter
deal
with
natur
languag
and
literatur
.
It
will
be
also
an
extens
exampl
and
use
case
for
python
set
.
novic
in
python
often
think
that
set
are
just
a
toy
for
mathematician
and
that
there
is
no
real
use
case
in
program
.
the
contrari
is
true
.
there
are
multipl
use
case
for
set
.
they
are
use
for
exampl
to
get
rid
of
doublet
-
multipl
occurr
of
element
-
in
a
list
,
i.e
.
to
make
a
list
uniqu
.
In
the
follow
exampl
we
will
use
set
to
determin
the
differ
word
occur
in
a
novel
.
our
use
case
is
build
around
a
novel
which
ha
been
prais
by
mani
as
the
best
novel
in
the
english
languag
and
also
as
the
hardest
to
read
.
We
are
talk
about
the
novel
``
ulyss
''
by
jame
joyc
.
We
will
not
talk
about
or
examin
the
beauti
of
the
languag
or
the
languag
style
.
We
will
studi
the
novel
by
have
a
close
look
at
the
word
use
in
the
novel
.
our
approach
will
be
pure
statit
.
the
claim
is
that
jame
joyc
use
in
hi
novel
more
word
than
ani
other
author
.
actual
hi
vocabulari
is
abov
and
beyond
all
other
author
,
mayb
even
shakespear
.
besid
ulyss
we
will
use
the
novel
``
son
and
lover
''
by
d.h.
lawrenc
,
``
the
way
of
all
flesh
''
by
samuel
butler
,
``
robinson
cruso
''
by
daniel
defo
,
``
To
the
lighthous
''
by
virginia
woolf
,
``
mobi
dick
''
by
herman
melvil
and
the
short
stori
``
metamorphosi
''
by
franz
kafka
.
befor
you
continu
with
thi
chapter
of
our
tutori
it
might
be
a
good
idea
to
read
the
chapter
set
and
frozen
set
and
the
two
chapter
on
regular
express
and
advanc
regular
express
.
differ
word
of
a
text
To
cut
out
all
the
word
of
the
novel
``
ulyss
''
we
can
use
the
function
findal
from
the
modul
``
re
''
:
import
re
#
we
do
n't
care
about
case
sensit
and
therefor
use
lower
:
ulysses_txt
=
open
(
``
books/james_joyce_ulysses.txt
''
)
.read
(
)
.lower
(
)
word
=
re.findal
(
r
''
\b
[
\w-
]
+\b
''
,
ulysses_txt
)
print
(
``
the
novel
ulyss
contain
``
+
str
(
len
(
word
)
)
)
the
novel
ulyss
contain
272452
thi
number
is
the
sum
of
all
the
word
and
mani
word
occur
multipl
time
:
for
word
in
[
``
the
''
,
``
while
''
,
``
good
''
,
``
bad
''
,
``
ireland
''
,
``
irish
''
]
:
print
(
``
the
word
'
''
+
word
+
``
'
occur
``
+
\
str
(
words.count
(
word
)
)
+
``
time
in
the
novel
!
''
)
the
word
'the
'
occur
15112
time
in
the
novel
!
the
word
'while
'
occur
123
time
in
the
novel
!
the
word
'good
'
occur
321
time
in
the
novel
!
the
word
'bad
'
occur
90
time
in
the
novel
!
the
word
'ireland
'
occur
90
time
in
the
novel
!
the
word
'irish
'
occur
117
time
in
the
novel
!
272452
sure
is
a
huge
number
of
word
for
a
novel
,
but
on
the
other
hand
there
are
lot
of
novel
with
even
more
word
.
more
interest
and
say
more
about
the
qualiti
of
a
novel
is
the
number
of
differ
word
.
thi
is
the
moment
where
we
will
final
need
``
set
''
.
We
will
turn
the
list
of
word
``
word
''
into
a
set
.
appli
``
len
''
to
thi
set
will
give
us
the
number
of
differ
word
:
diff_word
=
set
(
word
)
print
(
``
'ulyss
'
contain
``
+
str
(
len
(
diff_word
)
)
+
``
differ
word
!
''
)
'ulyss
'
contain
29422
differ
word
!
thi
is
inde
an
impress
number
.
you
can
see
thi
,
if
you
look
at
the
other
novel
in
our
folder
book
:
novel
=
[
'sons_and_lovers_lawrence.txt
'
,
'metamorphosis_kafka.txt
'
,
'the_way_of_all_flash_butler.txt
'
,
'robinson_crusoe_defoe.txt
'
,
'to_the_lighthouse_woolf.txt
'
,
'james_joyce_ulysses.txt
'
,
'moby_dick_melville.txt
'
]
for
novel
in
novel
:
txt
=
open
(
``
books/
''
+
novel
)
.read
(
)
.lower
(
)
word
=
re.findal
(
r
''
\b
[
\w-
]
+\b
''
,
txt
)
diff_word
=
set
(
word
)
n
=
len
(
diff_word
)
print
(
``
{
name:38
}
:
{
n:5d
}
''
.format
(
name=novel
[
:
-4
]
,
n=n
)
)
sons_and_lovers_lawr
:
10822
metamorphosis_kafka
:
3027
the_way_of_all_flash_butl
:
11434
robinson_crusoe_defo
:
6595
to_the_lighthouse_woolf
:
11415
james_joyce_ulyss
:
29422
moby_dick_melvil
:
18922
special
word
in
ulyssesw
will
subtract
all
the
word
occur
in
the
other
novel
from
``
ulyss
''
in
the
follow
littl
python
program
.
It
is
amaz
how
mani
word
are
use
by
jame
joyc
and
by
none
of
the
other
author
:
words_in_novel
=
{
}
for
novel
in
novel
:
txt
=
open
(
``
books/
''
+
novel
)
.read
(
)
.lower
(
)
word
=
re.findal
(
r
''
\b
[
\w-
]
+\b
''
,
txt
)
words_in_novel
[
novel
]
=
word
words_only_in_ulyss
=
set
(
words_in_novel
[
'james_joyce_ulysses.txt
'
]
)
novels.remov
(
'james_joyce_ulysses.txt
'
)
for
novel
in
novel
:
words_only_in_ulyss
-=
set
(
words_in_novel
[
novel
]
)
with
open
(
``
books/words_only_in_ulysses.txt
''
,
``
w
''
)
as
fh
:
txt
=
``
``
.join
(
words_only_in_ulyss
)
fh.write
(
txt
)
print
(
len
(
words_only_in_ulyss
)
)
15314
By
the
way
,
dr.
seuss
wrote
a
book
with
onli
50
differ
word
:
green
egg
and
ham
the
file
with
the
word
onli
occur
in
ulyss
contain
strang
or
seldom
use
word
like
:
huntingcrop
tramtrack
pappin
kithogu
pennyweight
undergar
scission
nagyaságo
wheedl
begad
dogwhip
hawthornden
turnbul
calumet
covey
repudi
pendenni
waistcoatpocket
nostrum
common
wordsit
is
also
possibl
to
find
the
word
which
occur
in
everi
book
.
To
accomplish
thi
,
we
need
the
set
intersect
:
#
we
start
with
the
word
in
ulyss
common_word
=
set
(
words_in_novel
[
'james_joyce_ulysses.txt
'
]
)
for
novel
in
novel
:
common_word
&
=
set
(
words_in_novel
[
novel
]
)
print
(
len
(
common_word
)
)
1745
do
it
rightw
made
a
slight
mistak
in
the
previou
calcul
.
If
you
look
at
the
text
,
you
will
notic
that
they
have
a
header
and
footer
part
ad
by
project
gutenberg
,
which
doe
n't
belong
to
the
text
.
the
text
are
posit
between
the
line
:
***start
OF
the
project
gutenberg
ebook
the
way
OF
all
flesh***
and
***end
OF
the
project
gutenberg
ebook
the
way
OF
all
flesh***
or
***
start
OF
thi
project
gutenberg
ebook
ulyss
***
and
***
end
OF
thi
project
gutenberg
ebook
ulyss
***
the
function
read_text
take
care
of
thi
:
def
read_text
(
fname
)
:
beg_
=
re.compil
(
r
''
\*\*\*
?
start
of
(
this|th
)
project
gutenberg
ebook
[
^*
]
*\*\*\*
''
)
end_
=
re.compil
(
r
''
\*\*\*
?
end
of
(
this|th
)
project
gutenberg
ebook
[
^*
]
*\*\*\*
''
)
txt
=
open
(
``
books/
''
+
fname
)
.read
(
)
.lower
(
)
beg
=
beg_e.search
(
txt
)
.end
(
)
end
=
end_e.search
(
txt
)
.start
(
)
return
txt
[
beg
:
end
]
words_in_novel
=
{
}
for
novel
in
novel
+
[
'james_joyce_ulysses.txt
'
]
:
txt
=
read_text
(
novel
)
word
=
re.findal
(
r
''
\b
[
\w-
]
+\b
''
,
txt
)
words_in_novel
[
novel
]
=
word
words_in_ulyss
=
set
(
words_in_novel
[
'james_joyce_ulysses.txt
'
]
)
for
novel
in
novel
:
words_in_ulyss
-=
set
(
words_in_novel
[
novel
]
)
with
open
(
``
books/words_in_ulysses.txt
''
,
``
w
''
)
as
fh
:
txt
=
``
``
.join
(
words_in_ulyss
)
fh.write
(
txt
)
print
(
len
(
words_in_ulyss
)
)
15341
#
we
start
with
the
word
in
ulyss
common_word
=
set
(
words_in_novel
[
'james_joyce_ulysses.txt
'
]
)
for
novel
in
novel
:
common_word
&
=
set
(
words_in_novel
[
novel
]
)
print
(
len
(
common_word
)
)
1279
the
word
of
the
set
``
common_word
''
are
word
belong
to
the
most
frequent
use
word
of
the
english
languag
.
let
's
have
a
look
at
30
arbitrari
word
of
thi
set
:
counter
=
0
for
word
in
common_word
:
print
(
word
,
end=
''
,
``
)
counter
+=
1
if
counter
==
30
:
break
ancient
,
broke
,
breath
,
laugh
,
divid
,
forc
,
wealth
,
ring
,
outsid
,
throw
,
person
,
spend
,
better
,
errand
,
school
,
sought
,
knock
,
tell
,
inner
,
run
,
pack
,
anoth
,
sinc
,
touch
,
bear
,
repeat
,
bitter
,
experienc
,
often
,
one
,
previou
chapter
:
set
and
frozen
set
next
chapter
:
input
via
the
keyboard
©
2011
-
2018
,
bernd
klein
,
bodenseo
;
design
by
denis
mitchinson
adapt
for
python-course.eu
by
bernd
klein
