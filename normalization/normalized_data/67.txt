numer
&
scientif
comput
with
python
:
bin
data
with
python
and
with
panda
numer
python
cours
numer
program
numpi
introductioncr
numpi
arraysdata
type
object
,
dtypenumer
oper
on
numpi
arrayschang
the
dimens
of
arrayspython
,
numpi
and
probabilityweight
choic
and
weight
samplescr
of
synthet
test
databoolean
mask
of
arraysmatrix
arithmeticread
and
write
ndarraysmatplotlib
introductionspin
and
tickslegend
and
annotationsmultipl
figur
and
axeshistogramscontour
plotspython
imag
process
tutorialimag
process
techniquespanda
tutorialpanda
dataframespanda
data
filesd
with
nanbin
datapanda
tutori
continu
:
multi-level
indexingdata
visual
with
panda
and
pythonpython
,
date
and
timepython
,
panda
and
timeserieslinear
combin
python
In
greek
mytholog
,
python
is
the
name
of
a
a
huge
serpent
and
sometim
a
dragon
.
python
had
been
kill
by
the
god
apollo
at
delphi
.
python
wa
creat
out
of
the
slime
and
mud
left
after
the
great
flood
.
He
wa
appoint
by
gaia
(
mother
earth
)
to
guard
the
oracl
of
delphi
,
known
as
pytho
.
the
program
languag
python
ha
not
been
creat
out
of
slime
and
mud
but
out
of
the
program
languag
abc
.
It
ha
been
devis
by
a
dutch
programm
,
name
guido
van
rossum
,
in
amsterdam
.
origin
of
python
guido
van
rossum
wrote
the
follow
about
the
origin
of
python
in
a
foreword
for
the
book
``
program
python
''
by
mark
lutz
in
1996
:
``
over
six
year
ago
,
in
decemb
1989
,
I
wa
look
for
a
``
hobbi
''
program
project
that
would
keep
me
occupi
dure
the
week
around
christma
.
My
offic
(
a
government-run
research
lab
in
amsterdam
)
would
be
close
,
but
I
had
a
home
comput
,
and
not
much
els
on
my
hand
.
I
decid
to
write
an
interpret
for
the
new
script
languag
I
had
been
think
about
late
:
a
descend
of
abc
that
would
appeal
to
unix/c
hacker
.
I
chose
python
as
a
work
titl
for
the
project
,
be
in
a
slightli
irrever
mood
(
and
a
big
fan
of
monti
python
's
fli
circu
)
.
''
thi
websit
is
free
of
annoy
ad
.
We
want
to
keep
it
like
thi
.
you
can
help
with
your
donat
:
the
need
for
donat
bernd
klein
on
facebook
search
thi
websit
:
thi
topic
in
german
/
deutsch
Ã¼bersetzung
:
bin
mit
python
und
mit
pandasclassroom
train
cours
thi
websit
contain
a
free
and
extens
onlin
tutori
by
bernd
klein
,
use
materi
from
hi
classroom
python
train
cours
.
If
you
are
interest
in
an
instructor-l
classroom
train
cours
,
you
may
have
a
look
at
the
python
class
by
bernd
klein
at
bodenseo
.
Â©
kabliczech
-
fotolia.com
quot
of
the
day
:
''
much
of
my
work
ha
come
from
be
lazi
.
I
did
n't
like
write
program
,
and
so
,
when
I
wa
work
on
the
ibm
701
,
write
program
for
comput
missil
trajectori
,
I
start
work
on
a
program
system
to
make
it
easier
to
write
program
.
''
(
john
W.
backu
)
If
you
have
the
choic
work
with
python
2
or
python
3
,
we
recomend
to
switch
to
python
3
!
you
can
read
our
python
tutori
to
see
what
the
differ
are
.
data
protect
declar
data
protect
declar
previou
chapter
:
deal
with
nan
next
chapter
:
panda
tutori
continu
:
multi-level
index
bin
in
python
and
panda
introduct
data
bin
,
which
is
also
known
as
bucket
or
discret
,
is
a
techniqu
use
in
data
process
and
statist
.
bin
can
be
use
for
exampl
,
if
there
are
more
possibl
data
point
than
observ
data
point
.
An
exampl
is
to
bin
the
bodi
height
of
peopl
into
interv
or
categori
.
let
us
assum
,
we
take
the
height
of
30
peopl
.
the
length
valu
can
be
between
-
roughli
guess
-
1.30
metr
to
2.50
metr
.
theoret
,
there
are
120
differ
cm
valu
possibl
,
but
we
can
have
at
most
30
differ
valu
from
our
sampl
group
.
one
way
to
group
them
could
be
to
put
the
measur
valu
into
bin
rang
from
1.30
-
1.50
metr
,
1.50
-
1.70
metr
,
1.70
-
1.90
metr
and
so
on
.
thi
mean
that
the
origin
data
valu
,
will
be
assign
to
a
bin
into
wich
they
fit
accord
to
their
size
.
the
origin
valu
will
be
replac
by
valu
repres
the
correspond
interv
.
bin
is
a
form
of
quantiz
.
bin
do
not
necessarili
have
to
be
numer
,
they
can
be
categor
valu
of
ani
kind
,
like
``
dog
''
,
``
cat
''
,
``
hamster
''
,
and
so
on
.
bin
is
also
use
in
imag
process
,
bin
.
It
can
be
use
to
reduc
the
amount
of
data
,
by
combin
neighbor
pixel
into
singl
pixel
.
kxk
bin
reduc
area
of
k
x
k
pixel
into
singl
pixel
.
panda
provid
easi
way
to
creat
bin
and
to
bin
data
.
befor
we
describ
these
panda
function
,
we
will
introduc
basic
python
function
,
work
on
python
list
and
tupl
.
bin
in
pythonth
follow
python
function
can
be
use
to
creat
bin
.
def
create_bin
(
lower_bound
,
width
,
quantiti
)
:
``
''
''
create_bin
return
an
equal-width
(
distanc
)
partit
.
It
return
an
ascend
list
of
tupl
,
repres
the
interv
.
A
tupl
bin
[
i
]
,
i.e
.
(
bin
[
i
]
[
0
]
,
bin
[
i
]
[
1
]
)
with
i
>
0
and
i
<
quantiti
,
satisfi
the
follow
condit
:
(
1
)
bin
[
i
]
[
0
]
+
width
==
bin
[
i
]
[
1
]
(
2
)
bin
[
i-1
]
[
0
]
+
width
==
bin
[
i
]
[
0
]
and
bin
[
i-1
]
[
1
]
+
width
==
bin
[
i
]
[
1
]
``
''
''
bin
=
[
]
for
low
in
rang
(
lower_bound
,
lower_bound
+
quantity*width
+
1
,
width
)
:
bins.append
(
(
low
,
low+width
)
)
return
bin
We
will
creat
now
five
bin
(
quantity=5
)
with
a
width
of
10
(
width=10
)
start
from
10
(
lower_bound=10
)
:
bin
=
create_bin
(
lower_bound=10
,
width=10
,
quantity=5
)
bin
after
have
execut
the
python
code
abov
we
receiv
the
follow
:
[
(
10
,
20
)
,
(
20
,
30
)
,
(
30
,
40
)
,
(
40
,
50
)
,
(
50
,
60
)
,
(
60
,
70
)
]
the
next
function
'find_bin
'
is
call
with
a
list
or
tupl
of
bin
'bin
'
,
which
have
to
be
two-tupl
or
list
of
two
element
.
the
function
find
the
index
of
the
interv
,
where
the
valu
'valu
'
is
contain
:
def
find_bin
(
valu
,
bin
)
:
``
''
''
bin
is
a
list
of
tupl
,
like
[
(
0,20
)
,
(
20
,
40
)
,
(
40
,
60
)
]
,
bin
return
the
smallest
index
i
of
bin
so
that
bin
[
i
]
[
0
]
<
=
valu
<
bin
[
i
]
[
1
]
``
''
''
for
i
in
rang
(
0
,
len
(
bin
)
)
:
if
bin
[
i
]
[
0
]
<
=
valu
<
bin
[
i
]
[
1
]
:
return
i
return
-1
from
collect
import
counter
bin
=
create_bin
(
lower_bound=50
,
width=4
,
quantity=10
)
print
(
bin
)
weights_of_person
=
[
73.4
,
69.3
,
64.9
,
75.6
,
74.9
,
80.3
,
78.6
,
84.1
,
88.9
,
90.3
,
83.4
,
69.3
,
52.4
,
58.3
,
67.4
,
74.0
,
89.3
,
63.4
]
binned_weight
=
[
]
for
valu
in
weights_of_person
:
bin_index
=
find_bin
(
valu
,
bin
)
print
(
valu
,
bin_index
,
bin
[
bin_index
]
)
binned_weights.append
(
bin_index
)
frequenc
=
counter
(
binned_weight
)
print
(
frequenc
)
[
(
50
,
54
)
,
(
54
,
58
)
,
(
58
,
62
)
,
(
62
,
66
)
,
(
66
,
70
)
,
(
70
,
74
)
,
(
74
,
78
)
,
(
78
,
82
)
,
(
82
,
86
)
,
(
86
,
90
)
,
(
90
,
94
)
]
73.4
5
(
70
,
74
)
69.3
4
(
66
,
70
)
64.9
3
(
62
,
66
)
75.6
6
(
74
,
78
)
74.9
6
(
74
,
78
)
80.3
7
(
78
,
82
)
78.6
7
(
78
,
82
)
84.1
8
(
82
,
86
)
88.9
9
(
86
,
90
)
90.3
10
(
90
,
94
)
83.4
8
(
82
,
86
)
69.3
4
(
66
,
70
)
52.4
0
(
50
,
54
)
58.3
2
(
58
,
62
)
67.4
4
(
66
,
70
)
74.0
6
(
74
,
78
)
89.3
9
(
86
,
90
)
63.4
3
(
62
,
66
)
counter
(
{
4
:
3
,
6
:
3
,
3
:
2
,
7
:
2
,
8
:
2
,
9
:
2
,
5
:
1
,
10
:
1
,
0
:
1
,
2
:
1
}
)
bin
with
pandasth
modul
panda
of
python
provid
power
function
for
the
bin
of
data
.
We
will
demonstr
thi
by
use
our
previou
data
.
bin
use
by
pandasw
use
a
list
of
tupl
as
bin
in
our
previou
exampl
.
We
have
to
turn
thi
list
into
a
usabl
data
structur
for
the
panda
function
``
cut
''
.
thi
data
structur
is
an
intervalindex
.
We
can
do
thi
with
pd.intervalindex.from_tupl
:
import
panda
as
pd
bins2
=
pd.intervalindex.from_tupl
(
bin
)
``
cut
''
is
the
name
of
the
panda
function
,
which
is
need
to
bin
valu
into
bin
.
``
cut
''
take
mani
paramet
but
the
most
import
one
are
``
x
''
for
the
actual
valu
und
``
bin
''
,
defin
the
intervalindex
.
``
x
''
can
be
ani
1-dimension
array-lik
structur
,
e.g
.
tupl
,
list
,
nd-array
and
so
on
:
categorical_object
=
pd.cut
(
weights_of_person
,
bins2
)
print
(
categorical_object
)
[
(
70
,
74
]
,
(
66
,
70
]
,
(
62
,
66
]
,
(
74
,
78
]
,
(
74
,
78
]
,
...
,
(
58
,
62
]
,
(
66
,
70
]
,
(
70
,
74
]
,
(
86
,
90
]
,
(
62
,
66
]
]
length
:
18
categori
(
11
,
interv
[
int64
]
)
:
[
(
50
,
54
]
<
(
54
,
58
]
<
(
58
,
62
]
<
(
62
,
66
]
...
(
78
,
82
]
<
(
82
,
86
]
<
(
86
,
90
]
<
(
90
,
94
]
]
the
result
of
the
panda
function
``
cut
''
is
a
so-cal
``
categor
object
''
.
each
bin
is
a
categori
.
the
categori
are
describ
in
a
mathemat
notat
.
``
(
70
,
74
]
''
mean
that
thi
bin
contain
valu
from
70
to
74
wherea
70
is
not
includ
but
74
is
includ
.
mathemat
,
thi
is
a
half-open
interv
,
i.e
.
nn
interv
in
which
one
endpoint
is
includ
but
not
the
other
.
sometim
it
is
also
call
an
half-clos
interv
.
We
had
also
defin
the
bin
in
our
previou
chapter
as
half-open
interv
,
but
the
other
way
round
,
i.e
.
left
side
close
and
the
right
side
open
.
when
we
use
pd.intervalindex.from_tupl
,
we
could
have
defin
the
``
open
''
of
thi
bin
by
set
the
paramet
``
close
''
to
one
of
the
valu
:
'left
'
:
close
on
the
left
side
and
open
on
the
right
'right
'
:
(
the
default
)
open
on
the
left
side
and
close
on
the
right
'both
'
:
close
on
both
side
'neither
'
:
open
on
both
side
To
have
the
same
behaviour
as
in
our
previou
chapter
,
we
will
set
the
paramet
close
to
``
left
''
:
bins2
=
pd.intervalindex.from_tupl
(
bin
,
closed=
''
left
''
)
categorical_object
=
pd.cut
(
weights_of_person
,
bins2
)
print
(
categorical_object
)
[
[
70
,
74
)
,
[
66
,
70
)
,
[
62
,
66
)
,
[
74
,
78
)
,
[
74
,
78
)
,
...
,
[
58
,
62
)
,
[
66
,
70
)
,
[
74
,
78
)
,
[
86
,
90
)
,
[
62
,
66
)
]
length
:
18
categori
(
11
,
interv
[
int64
]
)
:
[
[
50
,
54
)
<
[
54
,
58
)
<
[
58
,
62
)
<
[
62
,
66
)
...
[
78
,
82
)
<
[
82
,
86
)
<
[
86
,
90
)
<
[
90
,
94
)
]
other
way
to
defin
binsw
use
an
intervalindex
as
a
bin
for
bin
the
weight
data
.
the
function
``
cut
''
can
also
cope
with
two
other
kind
of
bin
represent
:
an
integ
:
defin
the
number
of
equal-width
bin
in
the
rang
of
the
valu
``
x
''
.
the
rang
of
``
x
''
is
extend
by
.1
%
on
each
side
to
includ
the
minimum
and
maximum
valu
of
``
x
''
.
sequenc
of
scalar
:
defin
the
bin
edg
allow
for
non-uniform
width
.
No
extens
of
the
rang
of
``
x
''
is
done
.
categorical_object
=
pd.cut
(
weights_of_person
,
18
)
print
(
categorical_object
)
[
(
72.465
,
74.694
]
,
(
68.006
,
70.235
]
,
(
63.547
,
65.776
]
,
(
74.694
,
76.924
]
,
(
74.694
,
76.924
]
,
...
,
(
56.859
,
59.088
]
,
(
65.776
,
68.006
]
,
(
72.465
,
74.694
]
,
(
88.071
,
90.3
]
,
(
61.318
,
63.547
]
]
length
:
18
categori
(
17
,
interv
[
float64
]
)
:
[
(
52.362
,
54.629
]
<
(
54.629
,
56.859
]
<
(
56.859
,
59.088
]
<
(
59.088
,
61.318
]
...
(
81.382
,
83.612
]
<
(
83.612
,
85.841
]
<
(
85.841
,
88.071
]
<
(
88.071
,
90.3
]
]
sequence_of_scalar
=
[
x
[
0
]
for
x
in
bin
]
sequence_of_scalars.append
(
bin
[
-1
]
[
1
]
)
print
(
sequence_of_scalar
)
categorical_object
=
pd.cut
(
weights_of_person
,
sequence_of_scalar
,
right=fals
)
print
(
categorical_object
)
[
50
,
54
,
58
,
62
,
66
,
70
,
74
,
78
,
82
,
86
,
90
,
94
]
[
[
70
,
74
)
,
[
66
,
70
)
,
[
62
,
66
)
,
[
74
,
78
)
,
[
74
,
78
)
,
...
,
[
58
,
62
)
,
[
66
,
70
)
,
[
74
,
78
)
,
[
86
,
90
)
,
[
62
,
66
)
]
length
:
18
categori
(
11
,
interv
[
int64
]
)
:
[
[
50
,
54
)
<
[
54
,
58
)
<
[
58
,
62
)
<
[
62
,
66
)
...
[
78
,
82
)
<
[
82
,
86
)
<
[
86
,
90
)
<
[
90
,
94
)
]
bin
count
and
valu
countsth
next
and
most
interest
question
is
now
how
we
can
see
the
actual
bin
count
.
thi
can
be
accomplish
with
the
function
``
value_count
''
:
pd.value_count
(
categorical_object
)
the
previou
python
code
return
the
follow
result
:
[
74
,
78
)
3
[
66
,
70
)
3
[
86
,
90
)
2
[
82
,
86
)
2
[
78
,
82
)
2
[
62
,
66
)
2
[
90
,
94
)
1
[
70
,
74
)
1
[
58
,
62
)
1
[
50
,
54
)
1
[
54
,
58
)
0
dtype
:
int64
``
categorical_object.cod
''
provid
you
with
a
label
of
the
input
valu
into
the
bin
categori
:
label
=
categorical_object.cod
label
thi
get
us
the
follow
:
array
(
[
5
,
4
,
3
,
6
,
6
,
7
,
7
,
8
,
9
,
10
,
8
,
4
,
0
,
2
,
4
,
6
,
9
,
3
]
,
dtype=int8
)
categori
is
the
intervalindex
of
the
categori
of
the
label
indic
:
categori
=
categorical_object.categori
categori
the
previou
python
code
return
the
follow
output
:
intervalindex
(
[
[
50
,
54
)
,
[
54
,
58
)
,
[
58
,
62
)
,
[
62
,
66
)
,
[
66
,
70
)
...
[
74
,
78
)
,
[
78
,
82
)
,
[
82
,
86
)
,
[
86
,
90
)
,
[
90
,
94
)
]
closed='left
'
,
dtype='interv
[
int64
]
'
)
correspond
from
weight
data
to
bin
:
for
index
in
rang
(
len
(
weights_of_person
)
)
:
label_index
=
label
[
index
]
print
(
weights_of_person
[
index
]
,
label_index
,
categori
[
label_index
]
)
73.4
5
[
70
,
74
)
69.3
4
[
66
,
70
)
64.9
3
[
62
,
66
)
75.6
6
[
74
,
78
)
74.9
6
[
74
,
78
)
80.3
7
[
78
,
82
)
78.6
7
[
78
,
82
)
84.1
8
[
82
,
86
)
88.9
9
[
86
,
90
)
90.3
10
[
90
,
94
)
83.4
8
[
82
,
86
)
69.3
4
[
66
,
70
)
52.4
0
[
50
,
54
)
58.3
2
[
58
,
62
)
67.4
4
[
66
,
70
)
74.0
6
[
74
,
78
)
89.3
9
[
86
,
90
)
63.4
3
[
62
,
66
)
categorical_object.categori
the
abov
code
return
the
follow
output
:
intervalindex
(
[
[
50
,
54
)
,
[
54
,
58
)
,
[
58
,
62
)
,
[
62
,
66
)
,
[
66
,
70
)
...
[
74
,
78
)
,
[
78
,
82
)
,
[
82
,
86
)
,
[
86
,
90
)
,
[
90
,
94
)
]
closed='left
'
,
dtype='interv
[
int64
]
'
)
name
binslet
's
imagin
,
we
have
an
univers
,
which
confer
three
level
of
latin
honor
depend
on
the
grade
point
averag
(
gpa
)
:
``
summa
cum
laud
''
requir
a
gpa
abov
3.9
``
magna
cum
laud
''
if
the
gpa
is
abov
3.8
``
cum
laud
''
if
the
gpa
of
3.6
or
abov
degre
=
[
``
none
''
,
``
cum
laud
''
,
``
magna
cum
laud
''
,
``
summa
cum
laud
''
]
student_result
=
[
3.93
,
3.24
,
2.80
,
2.83
,
3.91
,
3.698
,
3.731
,
3.25
,
3.24
,
3.82
,
3.22
]
student_results_degre
=
pd.cut
(
student_result
,
[
0
,
3.6
,
3.8
,
3.9
,
4.0
]
,
labels=degre
)
pd.value_count
(
student_results_degre
)
the
previou
code
return
the
follow
result
:
none
6
summa
cum
laud
2
cum
laud
2
magna
cum
laud
1
dtype
:
int64
let
's
have
a
look
at
the
individu
degre
of
each
student
:
label
=
student_results_degrees.cod
categori
=
student_results_degrees.categori
for
index
in
rang
(
len
(
student_result
)
)
:
label_index
=
label
[
index
]
print
(
student_result
[
index
]
,
label_index
,
categori
[
label_index
]
)
3.93
3
summa
cum
laud
3.24
0
none
2.8
0
none
2.83
0
none
3.91
3
summa
cum
laud
3.698
1
cum
laud
3.731
1
cum
laud
3.25
0
none
3.24
0
none
3.82
2
magna
cum
laud
3.22
0
none
previou
chapter
:
deal
with
nan
next
chapter
:
panda
tutori
continu
:
multi-level
index
Â©
2011
-
2018
,
bernd
klein
,
bodenseo
;
design
by
denis
mitchinson
adapt
for
python-course.eu
by
bernd
klein
