gui
program
with
python
:
bull
and
cow
/
mastermind
in
tkinter
python
tkinter
cours
tkinter
tutori
say
hello
with
labelsmessag
widgetbuttonsvari
classesradiobuttonscheckboxesentri
widgetscanva
widgetssliderstext
widgetdialogslayout
managementbul
and
cow
/
mastermind
in
tkcreat
menusev
and
bind
python
In
greek
mytholog
,
python
is
the
name
of
a
a
huge
serpent
and
sometim
a
dragon
.
python
had
been
kill
by
the
god
apollo
at
delphi
.
python
wa
creat
out
of
the
slime
and
mud
left
after
the
great
flood
.
He
wa
appoint
by
gaia
(
mother
earth
)
to
guard
the
oracl
of
delphi
,
known
as
pytho
.
the
program
languag
python
ha
not
been
creat
out
of
slime
and
mud
but
out
of
the
program
languag
abc
.
It
ha
been
devis
by
a
dutch
programm
,
name
guido
van
rossum
,
in
amsterdam
.
origin
of
python
guido
van
rossum
wrote
the
follow
about
the
origin
of
python
in
a
foreword
for
the
book
``
program
python
''
by
mark
lutz
in
1996
:
``
over
six
year
ago
,
in
decemb
1989
,
I
wa
look
for
a
``
hobbi
''
program
project
that
would
keep
me
occupi
dure
the
week
around
christma
.
My
offic
(
a
government-run
research
lab
in
amsterdam
)
would
be
close
,
but
I
had
a
home
comput
,
and
not
much
els
on
my
hand
.
I
decid
to
write
an
interpret
for
the
new
script
languag
I
had
been
think
about
late
:
a
descend
of
abc
that
would
appeal
to
unix/c
hacker
.
I
chose
python
as
a
work
titl
for
the
project
,
be
in
a
slightli
irrever
mood
(
and
a
big
fan
of
monti
python
's
fli
circu
)
.
''
thi
websit
is
free
of
annoy
ad
.
We
want
to
keep
it
like
thi
.
you
can
help
with
your
donat
:
the
need
for
donat
bernd
klein
on
facebook
search
thi
websit
:
classroom
train
cours
thi
websit
contain
a
free
and
extens
onlin
tutori
by
bernd
klein
,
use
materi
from
hi
classroom
python
train
cours
.
If
you
are
interest
in
an
instructor-l
classroom
train
cours
,
you
may
have
a
look
at
the
python
class
by
bernd
klein
at
bodenseo
.
©
kabliczech
-
fotolia.com
quot
of
the
day
:
''
how
to
test
?
''
is
a
question
that
can
not
be
answer
in
gener
.
``
when
to
test
?
''
howev
,
doe
have
a
gener
answer
:
as
earli
and
as
often
as
possibl
.
''
(
bjarn
stroustrup
)
If
you
have
the
choic
work
with
python
2
or
python
3
,
we
recomend
to
switch
to
python
3
!
you
can
read
our
python
tutori
to
see
what
the
differ
are
.
data
protect
declar
data
protect
declar
previou
chapter
:
layout
manag
next
chapter
:
creat
menu
mastermind
/
bull
and
cow
implement
in
python
use
tkinter
In
thi
chapter
of
our
advanc
python
topic
we
present
an
implement
of
the
game
bull
and
cow
use
tkinter
as
the
gui
.
thi
game
,
which
is
also
known
as
``
cow
and
bull
''
or
``
pig
and
bull
''
,
is
an
old
code-break
game
play
by
two
player
.
the
game
goe
back
to
the
19th
centuri
and
can
be
play
with
paper
and
pencil
.
bull
and
cow
--
also
known
as
cow
and
bull
or
pig
and
bull
or
bull
and
cleot
--
wa
the
inspir
sourc
of
mastermind
,
a
game
invent
in
1970
by
mordecai
meirowitz
.
the
game
is
play
by
two
player
.
mastermind
and
``
bull
and
cow
''
are
veri
similar
and
the
underli
idea
is
essenti
the
same
,
but
mastermind
is
sold
in
a
box
with
a
decod
board
and
peg
for
the
code
and
the
feedback
peg
.
mastermind
use
colour
as
the
underli
code
inform
,
while
bull
and
cow
use
digit
.
the
algorithm
is
explain
in
detail
in
our
chapter
``
mastermind
/
bull
and
cow
''
in
advanc
topic
.
you
can
also
find
the
code
for
the
modul
combinator
.
the
code
for
mastermind
from
tkinter
import
*
from
tkinter.messagebox
import
*
import
random
from
combinator
import
all_colour
def
inconsist
(
p
,
guess
)
:
``
''
''
the
function
check
,
if
a
permut
p
,
i.e
.
a
list
of
colour
like
p
=
[
'pink
'
,
'yellow
'
,
'green
'
,
'red
'
]
is
consist
with
the
previou
colour
.
each
previou
colour
permuat
guess
[
0
]
compar
(
check
(
)
)
with
p
ha
to
return
the
same
amount
of
black
(
rightli
posit
colour
)
and
white
(
right
colour
at
wrong
posit
)
as
the
correspond
evalu
(
guess
[
1
]
in
the
list
guess
)
``
''
''
for
guess
in
guess
:
re
=
check
(
guess
[
0
]
,
p
)
(
rightly_posit
,
permut
)
=
guess
[
1
]
if
re
!
=
[
rightly_posit
,
permut
]
:
return
true
#
inconsist
return
fals
#
i.e
.
consist
def
answer_ok
(
a
)
:
``
''
''
check
of
an
evaul
given
by
the
human
player
make
sens
.
3
black
and
1
white
make
no
sens
,
for
example.
``
''
''
(
rightly_posit
,
permut
)
=
a
if
(
rightly_posit
+
permut
>
number_of_posit
)
\
or
(
rightly_posit
+
permut
<
len
(
colour
)
-
number_of_posit
)
:
return
fals
if
rightly_posit
==
3
and
permut
==
1
:
return
fals
return
true
def
get_evalu
(
)
:
``
''
''
get
evalu
from
entri
field
``
''
''
rightly_posit
=
int
(
entrywidget_both.get
(
)
)
permut
=
int
(
entrywidget_only_colours.get
(
)
)
return
(
rightly_posit
,
permut
)
def
new_evalu
(
current_colour_choic
)
:
``
''
''
thi
funtion
get
an
evalu
of
the
current
guess
,
check
the
consist
of
thi
evalu
,
add
the
guess
togeth
with
the
evalu
to
the
list
of
guess
,
show
the
previou
guess
and
creat
a
ne
guess
``
''
''
rightly_posit
,
permut
=
get_evalu
(
)
if
rightly_posit
==
number_of_posit
:
return
(
current_colour_choic
,
(
rightly_posit
,
permut
)
)
if
not
answer_ok
(
(
rightly_posit
,
permut
)
)
:
print
(
``
input
error
:
sorri
,
the
input
make
no
sens
''
)
return
(
current_colour_choic
,
(
-1
,
permut
)
)
guesses.append
(
(
current_colour_choic
,
(
rightly_posit
,
permut
)
)
)
view_guess
(
)
current_colour_choic
=
create_new_guess
(
)
show_current_guess
(
current_colour_choic
)
if
not
current_colour_choic
:
return
(
current_colour_choic
,
(
-1
,
permut
)
)
return
(
current_colour_choic
,
(
rightly_posit
,
permut
)
)
def
check
(
p1
,
p2
)
:
``
''
''
check
(
)
calcualt
the
number
of
bull
(
black
)
and
cow
(
white
)
of
two
permut
``
''
''
black
=
0
white
=
0
for
i
in
rang
(
len
(
p1
)
)
:
if
p1
[
i
]
==
p2
[
i
]
:
black
+=
1
els
:
if
p1
[
i
]
in
p2
:
white
+=
1
return
[
black
,
white
]
def
create_new_guess
(
)
:
``
''
''
a
new
guess
is
creat
,
which
is
consist
to
the
previou
guess
``
''
''
next_choic
=
next
(
permutation_iter
)
while
inconsist
(
next_choic
,
guess
)
:
tri
:
next_choic
=
next
(
permutation_iter
)
except
stopiter
:
print
(
``
error
:
your
answer
were
inconsist
!
''
)
return
(
)
return
next_choic
def
new_evaluation_tk
(
)
:
global
current_colour_choic
re
=
new_evalu
(
current_colour_choic
)
current_colour_choic
=
re
[
0
]
def
show_current_guess
(
new_guess
)
:
row
=
1
label
(
root
,
text=
''
new
guess
:
``
)
.grid
(
row=row
,
column=0
,
columnspan=4
)
row
+=1
col_count
=
0
for
c
in
new_guess
:
print
(
c
)
l
=
label
(
root
,
text=
''
``
,
bg=c
)
l.grid
(
row=row
,
column=col_count
,
sticky=w
,
padx=2
)
col_count
+=
1
def
view_guess
(
)
:
row
=
3
label
(
root
,
text=
''
old
guess
''
)
.grid
(
row=row
,
column=0
,
columnspan=4
)
label
(
root
,
text=
''
c
&
p
''
)
.grid
(
row=row
,
padx=5
,
column=number_of_posit
+
1
)
label
(
root
,
text=
''
p
''
)
.grid
(
row=row
,
padx=5
,
column=number_of_posit
+
2
)
#
dummi
label
for
distanc
:
label
(
root
,
text=
''
``
)
.grid
(
row=row
,
column=number_of_posit
+
3
)
row
+=
1
#
vertic
dummi
label
for
distanc
:
label
(
root
,
text=
''
``
)
.grid
(
row=row
,
column=0
,
columnspan=5
)
for
guess
in
guess
:
guessed_colour
=
guess
[
0
]
col_count
=
0
row
+=
1
for
c
in
guessed_colour
:
print
(
guessed_colour
[
col_count
]
)
l
=
label
(
root
,
text=
''
``
,
bg=guessed_colour
[
col_count
]
)
l.grid
(
row=row
,
column=col_count
,
sticky=w
,
padx=2
)
col_count
+=
1
#
evalu
:
for
i
in
(
0,1
)
:
l
=
label
(
root
,
text=str
(
guess
[
1
]
[
i
]
)
)
l.grid
(
row=row
,
column=col_count
+
i
+
1
,
padx=2
)
if
__name__
==
``
__main__
''
:
colour
=
[
``
red
''
,
''
green
''
,
''
blue
''
,
''
yellow
''
,
''
orang
''
,
''
pink
''
]
guess
=
[
]
number_of_posit
=
4
permutation_iter
=
all_colour
(
colour
,
number_of_posit
)
current_colour_choic
=
next
(
permutation_iter
)
new_guess
=
(
current_colour_choic
,
(
0,0
)
)
row_offset
=
1
root
=
Tk
(
)
root.titl
(
``
mastermind
''
)
root
[
``
padx
''
]
=
30
root
[
``
padi
''
]
=
20
entrylabel
=
label
(
root
)
entrylabel
[
``
text
''
]
=
``
complet
correct
:
''
entrylabel.grid
(
row=row_offset
,
sticky=
,
padx=5
,
column=number_of_posit
+
4
)
entrywidget_both
=
entri
(
root
)
entrywidget_both
[
``
width
''
]
=
5
entrywidget_both.grid
(
row=row_offset
,
column=number_of_posit
+
5
)
entrylabel
=
label
(
root
)
entrylabel
[
``
text
''
]
=
``
wrong
posit
:
''
entrylabel.grid
(
row=row_offset+1
,
sticky=
,
padx=5
,
column=
number_of_posit
+
4
)
entrywidget_only_colour
=
entri
(
root
)
entrywidget_only_colour
[
``
width
''
]
=
5
entrywidget_only_colours.grid
(
row=row_offset+1
,
column=number_of_posit
+
5
)
submit_button
=
button
(
root
,
text=
''
submit
''
,
command=new_evaluation_tk
)
submit_button.grid
(
row=4
,
column=number_of_posit
+
4
)
quit_button
=
button
(
root
,
text=
''
quit
''
,
command=root.quit
)
quit_button.grid
(
row=4
,
column=number_of_posit
+
5
)
show_current_guess
(
current_colour_choic
)
root.mainloop
(
)
previou
chapter
:
layout
manag
next
chapter
:
creat
menu
©
2011
-
2018
,
bernd
klein
,
bodenseo
;
design
by
denis
mitchinson
adapt
for
python-course.eu
by
bernd
klein
