python
tutori
:
A
tutori
python
cours
python
3
tutori
the
origin
of
pythonstart
with
python
:
the
interact
shellexecut
a
scriptindentationdata
type
and
variablesoperatorssequenti
data
type
:
list
and
stringslist
manipulationsshallow
and
deep
copydictionariesset
and
frozen
setsan
extens
exampl
use
setsinput
via
the
keyboardcondit
statementsloop
,
while
loopfor
loopsdiffer
between
inter
und
iterablesoutput
with
printformat
output
with
string
modulo
and
the
format
methodfunctionsrecurs
and
recurs
functionsparamet
pass
in
functionsnamespacesglob
and
local
variablesdecoratorsmemo
with
decoratorsread
and
write
filesmodular
program
and
modulespackag
in
pythonregular
expressionsregular
express
,
advancedlambda
oper
,
filter
,
reduc
and
maplist
comprehensioniter
and
generatorsexcept
handlingtest
,
doctest
,
unittestsobject
orient
programmingclass
and
instanc
attributesproperti
vs.
getter
and
settersinheritancemultipl
inheritancemag
method
and
oper
overloadingoop
,
inherit
exampleslotsclass
and
class
creationroad
to
metaclassesmetaclassesmetaclass
use
case
:
count
function
callsabstract
class
list
elector
list
,
to-do
list
,
best-of
list
,
inventori
list
,
brainstorm
list
,
check
list
,
timelin
list
,
shop
list
these
list
can
be
all
implement
in
python
!
support
by
:
train
cours
in
python
thi
websit
is
free
of
annoy
ad
.
We
want
to
keep
it
like
thi
.
you
can
help
with
your
donat
:
the
need
for
donat
bernd
klein
on
facebook
search
thi
websit
:
thi
topic
in
german
/
deutsch
Ã¼bersetzung
:
listen
und
listen-manipulationpython
3thi
is
a
tutori
in
python3
,
but
thi
chapter
of
our
cours
is
avail
in
a
version
for
python
2.x
as
well
:
in
python
2.x
book
a
dedic
cours
the
goal
of
thi
websit
is
to
provid
educ
materi
,
allow
you
to
learn
python
on
your
own
.
nevertheless
,
it
is
faster
and
more
effici
to
attend
a
``
real
''
python
cours
in
a
classroom
,
with
an
experienc
trainer
.
So
whi
not
attend
one
of
the
live
python
cours
in
pari
,
london
,
berlin
,
munich
or
lake
constanc
by
bernd
klein
,
the
author
of
thi
tutori
?
onsit
train
cours
let
us
come
to
your
compani
or
institut
and
train
your
employe
,
as
we
've
done
it
mani
time
in
amsterdam
(
the
netherland
)
,
berlin
(
germani
)
,
bern
(
switzerland
)
,
basel
(
switzerland
)
,
zurich
(
switzerland
)
,
locarno
(
switzerland
)
,
den
haag
(
the
hagu
)
,
hamburg
(
germani
)
,
frankfurt
(
germani
)
,
toronto
(
canada
)
,
edmonton
(
canada
)
,
munich
(
germani
)
and
mani
other
citi
.
We
do
train
cours
in
england
,
switzerland
,
liechtenstein
,
austria
,
germani
,
franc
,
belgium
,
the
netherland
,
luxembourg
,
poland
,
UK
,
itali
and
other
locat
in
europ
and
in
canada
.
thi
way
you
will
get
a
perfect
train
up
to
your
need
and
it
will
be
extrem
cost
effici
as
well
.
contact
us
so
we
can
defin
and
find
the
best
cours
curriculum
to
meet
your
need
,
and
schedul
cours
session
to
be
held
at
your
locat
.
skill
python
programm
you
can
hire
skill
python
programm
or
even
a
skill
team
of
python
develop
to
work
exclus
on
your
project
.
contact
us
,
if
you
want
more
inform
.
quot
of
the
day
:
''
much
of
my
work
ha
come
from
be
lazi
.
I
did
n't
like
write
program
,
and
so
,
when
I
wa
work
on
the
ibm
701
,
write
program
for
comput
missil
trajectori
,
I
start
work
on
a
program
system
to
make
it
easier
to
write
program
.
''
(
john
W.
backu
)
data
protect
declar
data
protect
declar
previou
chapter
:
sequenti
data
type
:
list
and
string
next
chapter
:
shallow
and
deep
copi
list
chang
list
thi
chapter
of
our
tutori
deal
with
further
aspect
of
list
.
you
will
learn
how
to
append
and
insert
object
to
list
and
you
will
also
learn
how
to
delet
and
remov
element
by
use
'remov
'
and
'pop
'
A
list
can
be
seen
as
a
stack
.
A
stack
in
comput
scienc
is
a
data
structur
,
which
ha
at
least
two
oper
:
one
which
can
be
use
to
put
or
push
data
on
the
stack
and
anoth
one
to
take
away
the
most
upper
element
of
the
stack
.
the
way
of
work
can
be
imagin
with
a
stack
of
plate
.
If
you
need
a
plate
you
will
usual
take
the
most
upper
one
.
the
use
plate
will
be
put
back
on
the
top
of
the
stack
after
clean
.
If
a
program
languag
support
a
stack
like
data
structur
,
it
will
also
suppli
at
least
two
oper
:
push
thi
method
is
use
to
put
a
new
object
on
the
stack
.
depend
on
the
point
of
view
,
we
say
that
we
``
push
''
the
object
on
top
or
attach
it
to
the
right
side
.
python
doe
n't
offer
-
contrari
to
other
program
languag
-
no
method
with
the
name
``
push
''
,
but
the
method
``
append
''
ha
the
same
function
.
pop
thi
method
return
the
most
upper
element
of
the
stack
.
the
object
will
be
remov
from
the
stack
as
well
.
peek
some
program
languag
provid
anoth
method
,
which
can
be
use
to
view
what
is
on
the
top
of
the
stack
without
remov
thi
element
.
the
python
list
class
doe
n't
possess
such
a
method
,
becaus
it
is
not
need
.
A
peek
can
be
simul
by
access
the
element
with
the
index
-1
:
>
>
>
lst
=
[
``
easi
''
,
``
simpl
''
,
``
cheap
''
,
``
free
''
]
>
>
>
lst
[
-1
]
'free
'
>
>
>
pop
and
append
s.append
(
x
)
thi
method
append
an
element
to
the
end
of
the
list
``
s
''
.
>
>
>
lst
=
[
3
,
5
,
7
]
>
>
>
lst.append
(
42
)
>
>
>
lst
[
3
,
5
,
7
,
42
]
>
>
>
It
's
import
to
understand
that
append
return
``
none
''
.
thi
mean
that
it
usual
doe
n't
make
sens
to
reassign
the
return
valu
:
>
>
>
lst
=
[
3
,
5
,
7
]
>
>
>
lst
=
lst.append
(
42
)
>
>
>
print
(
lst
)
none
>
>
>
s.pop
(
i
)
'pop
'
return
the
ith
element
of
a
list
s.
the
element
will
be
remov
from
the
list
as
well
.
>
>
>
citi
=
[
``
hamburg
''
,
``
linz
''
,
``
salzburg
''
,
``
vienna
''
]
>
>
>
cities.pop
(
0
)
'hamburg
'
>
>
>
citi
[
'linz
'
,
'salzburg
'
,
'vienna
'
]
>
>
>
cities.pop
(
1
)
'salzburg
'
>
>
>
citi
[
'linz
'
,
'vienna
'
]
>
>
>
the
method
'pop
'
rais
an
indexerror
except
if
the
list
is
empti
or
the
index
is
out
of
rang
.
s.pop
(
)
the
method
'pop
'
can
be
call
without
an
argument
.
In
thi
case
,
the
last
element
will
be
return
.
So
s.pop
(
)
is
equival
to
s.pop
(
-1
)
.
>
>
>
citi
=
[
``
amsterdam
''
,
``
the
hagu
''
,
``
strasbourg
''
]
>
>
>
cities.pop
(
)
'strasbourg
'
>
>
>
citi
[
'amsterdam
'
,
'the
hagu
'
]
>
>
>
extend
We
saw
that
it
is
easi
to
append
an
object
to
a
list
.
but
what
about
ad
more
than
one
element
to
a
list
?
mayb
,
you
want
to
add
all
the
element
of
anoth
list
to
your
list
.
If
you
use
append
,
the
other
list
will
be
append
as
a
sublist
,
as
we
can
see
in
the
follow
exampl
:
>
>
>
lst
=
[
42,98,77
]
>
>
>
lst2
=
[
8,69
]
>
>
>
lst.append
(
lst2
)
>
>
>
lst
[
42
,
98
,
77
,
[
8
,
69
]
]
>
>
>
what
we
want
to
accomplish
is
the
follow
:
[
42
,
98
,
77
,
8
,
69
]
To
thi
purpos
,
python
provid
the
method
'extend
'
.
It
extend
a
list
by
append
all
the
element
of
an
iter
like
a
list
,
a
tupl
or
a
string
to
a
list
:
>
>
>
lst
=
[
42,98,77
]
>
>
>
lst2
=
[
8,69
]
>
>
>
lst.extend
(
lst2
)
>
>
>
lst
[
42
,
98
,
77
,
8
,
69
]
>
>
>
As
we
have
mention
,
the
argument
of
extend
doe
n't
have
to
be
a
list
.
It
can
be
ani
iter
.
thi
mean
that
we
can
use
tupl
and
string
as
well
:
>
>
>
lst
=
[
``
a
''
,
``
b
''
,
``
c
''
]
>
>
>
programming_languag
=
``
python
''
>
>
>
lst.extend
(
programming_languag
)
>
>
>
print
(
lst
)
[
'
a
'
,
'
b
'
,
'
c
'
,
'
P
'
,
'
y
'
,
't
'
,
'
h
'
,
'
o
'
,
'
n
'
]
now
with
a
tupl
:
>
>
>
lst
=
[
``
java
''
,
``
C
''
,
``
php
''
]
>
>
>
t
=
(
``
C
#
''
,
``
jython
''
,
``
python
''
,
``
ironpython
''
)
>
>
>
lst.extend
(
t
)
>
>
>
lst
[
'java
'
,
'
C
'
,
'php
'
,
'
C
#
'
,
'jython
'
,
'python
'
,
'ironpython
'
]
>
>
>
extend
and
append
list
with
the
'+'-oper
there
is
an
altern
to
'append
'
and
'extend
'
.
'+
'
can
be
use
to
combin
list
.
>
>
>
level
=
[
``
beginn
''
,
``
intermedi
''
,
``
advanc
''
]
>
>
>
other_word
=
[
``
novic
''
,
``
expert
''
]
>
>
>
level
+
other_word
[
'beginn
'
,
'intermedi
'
,
'advanc
'
,
'novic
'
,
'expert
'
]
>
>
>
Be
care
.
never
ever
do
the
follow
:
>
>
>
L
=
[
3
,
4
]
>
>
>
L
=
L
+
[
42
]
>
>
>
L
[
3
,
4
,
42
]
>
>
>
even
though
we
get
the
same
result
,
it
is
not
an
altern
to
'append
'
and
'extend
'
:
>
>
>
L
=
[
3
,
4
]
>
>
>
l.append
(
42
)
>
>
>
L
[
3
,
4
,
42
]
>
>
>
>
>
>
>
>
>
L
=
[
3
,
4
]
>
>
>
l.extend
(
[
42
]
)
>
>
>
L
[
3
,
4
,
42
]
>
>
>
the
augment
assign
(
+=
)
is
an
altern
:
>
>
>
L
=
[
3
,
4
]
>
>
>
L
+=
[
42
]
>
>
>
L
[
3
,
4
,
42
]
We
will
compar
in
the
follow
exampl
the
differ
approach
and
calcul
their
run
time
.
To
understand
the
follow
program
,
you
need
to
know
that
time.tim
(
)
return
a
float
number
,
the
time
in
second
sinc
the
so-cal
,
,the
epoch
''
1
.
time.tim
(
)
-
start_tim
calcul
the
time
in
second
consum
for
the
for
loop
:
import
time
n=
100000
start_tim
=
time.tim
(
)
l
=
[
]
for
i
in
rang
(
n
)
:
l
=
l
+
[
i
*
2
]
print
(
time.tim
(
)
-
start_tim
)
start_tim
=
time.tim
(
)
l
=
[
]
for
i
in
rang
(
n
)
:
l
+=
[
i
*
2
]
print
(
time.tim
(
)
-
start_tim
)
start_tim
=
time.tim
(
)
l
=
[
]
for
i
in
rang
(
n
)
:
l.append
(
i
*
2
)
print
(
time.tim
(
)
-
start_tim
)
thi
program
return
shock
result
:
26.3175041676
0.0305399894714
0.0207479000092
We
can
see
that
the
``
+
''
oper
is
about
1268
slower
than
the
append
method
.
the
explan
is
easi
:
If
we
use
the
append
method
,
we
will
simpli
append
a
further
element
to
the
list
in
each
loop
pass
.
now
we
come
to
the
first
loop
,
in
which
we
use
l
=
l
+
[
i
*
2
]
.
the
list
will
be
copi
in
everi
loop
pass
.
the
new
element
will
be
ad
to
the
copi
of
the
list
and
result
will
be
reassign
to
the
variabl
l.
after
thi
the
old
list
will
have
to
be
remov
by
python
,
becaus
it
is
not
referenc
anymor
.
We
can
also
see
that
the
version
with
the
augment
assign
(
``
+=
''
)
,
the
loop
in
the
middl
,
is
onli
slightli
slower
than
the
version
use
``
append
''
.
remov
an
element
with
remov
It
is
possibl
to
remov
with
the
method
``
remov
''
a
certain
valu
from
a
list
without
know
the
posit
.
s.remov
(
x
)
thi
call
will
remov
the
first
occurr
of
x
from
the
list
s.
If
x
is
not
contain
in
the
list
,
a
valueerror
will
be
rais
.
We
will
call
the
remov
method
three
time
in
the
follow
exampl
to
remov
the
colour
``
green
''
.
As
the
colour
``
green
''
occurr
onli
twice
in
the
list
,
we
get
a
valueerror
at
the
third
time
:
>
>
>
colour
=
[
``
red
''
,
``
green
''
,
``
blue
''
,
``
green
''
,
``
yellow
''
]
>
>
>
colours.remov
(
``
green
''
)
>
>
>
colour
[
'red
'
,
'blue
'
,
'green
'
,
'yellow
'
]
>
>
>
colours.remov
(
``
green
''
)
>
>
>
colour
[
'red
'
,
'blue
'
,
'yellow
'
]
>
>
>
colours.remov
(
``
green
''
)
traceback
(
most
recent
call
last
)
:
file
``
<
stdin
>
''
,
line
1
,
in
<
modul
>
valueerror
:
list.remov
(
x
)
:
x
not
in
list
>
>
>
find
the
posit
of
an
element
in
a
list
the
method
``
index
''
can
be
use
to
find
the
posit
of
an
element
within
a
list
:
s.index
(
x
[
,
i
[
,
j
]
]
)
It
return
the
first
index
of
the
valu
x
.
A
valueerror
will
be
rais
,
if
the
valu
is
not
present
.
If
the
option
paramet
i
is
given
,
the
search
will
start
at
the
index
i
.
If
j
is
also
given
,
the
search
will
stop
at
posit
j
.
>
>
>
colour
=
[
``
red
''
,
``
green
''
,
``
blue
''
,
``
green
''
,
``
yellow
''
]
>
>
>
colours.index
(
``
green
''
)
1
>
>
>
colours.index
(
``
green
''
,
2
)
3
>
>
>
colours.index
(
``
green
''
,
3,4
)
3
>
>
>
colours.index
(
``
black
''
)
traceback
(
most
recent
call
last
)
:
file
``
''
,
line
1
,
in
valueerror
:
'black
'
is
not
in
list
>
>
>
insert
We
have
learn
that
we
can
put
an
element
to
the
end
of
a
list
by
use
the
method
``
append
''
.
To
work
effici
with
a
list
,
we
need
also
a
way
to
add
element
to
arbitrari
posit
insid
of
a
list
.
thi
can
be
done
with
the
method
``
insert
''
:
s.insert
(
index
,
object
)
An
object
``
object
''
will
be
includ
in
the
list
``
s
''
.
``
object
''
will
be
place
befor
the
element
s
[
index
]
.
s
[
index
]
will
be
``
object
''
and
all
the
other
element
will
be
move
one
to
the
right
.
>
>
>
lst
=
[
``
german
is
spoken
''
,
``
in
germani
,
''
,
``
austria
''
,
``
switzerland
''
]
>
>
>
lst.insert
(
3
,
``
and
''
)
>
>
>
lst
[
'german
is
spoken
'
,
'in
germani
,
'
,
'austria
'
,
'and
'
,
'switzerland
'
]
>
>
>
the
function
of
the
method
``
append
''
can
be
simul
with
insert
in
the
follow
way
:
>
>
>
abc
=
[
``
a
''
,
''
b
''
,
''
c
''
]
>
>
>
abc.insert
(
len
(
abc
)
,
''
d
''
)
>
>
>
abc
[
'
a
'
,
'
b
'
,
'
c
'
,
'd
'
]
>
>
>
footnot
:
1
epoch
time
(
also
known
as
unix
time
or
posix
time
)
is
a
system
for
describ
instant
in
time
,
defin
as
the
number
of
second
that
have
elaps
sinc
00:00:00
coordin
univers
time
(
utc
)
,
thursday
,
1
januari
1970
,
not
count
leap
second
.
previou
chapter
:
sequenti
data
type
:
list
and
string
next
chapter
:
shallow
and
deep
copi
Â©
2011
-
2018
,
bernd
klein
,
bodenseo
;
design
by
denis
mitchinson
adapt
for
python-course.eu
by
bernd
klein
