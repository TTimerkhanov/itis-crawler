python
tutori
:
count
function
call
with
the
help
of
a
metaclass
python
cours
python
3
tutori
the
origin
of
pythonstart
with
python
:
the
interact
shellexecut
a
scriptindentationdata
type
and
variablesoperatorssequenti
data
type
:
list
and
stringslist
manipulationsshallow
and
deep
copydictionariesset
and
frozen
setsan
extens
exampl
use
setsinput
via
the
keyboardcondit
statementsloop
,
while
loopfor
loopsdiffer
between
inter
und
iterablesoutput
with
printformat
output
with
string
modulo
and
the
format
methodfunctionsrecurs
and
recurs
functionsparamet
pass
in
functionsnamespacesglob
and
local
variablesdecoratorsmemo
with
decoratorsread
and
write
filesmodular
program
and
modulespackag
in
pythonregular
expressionsregular
express
,
advancedlambda
oper
,
filter
,
reduc
and
maplist
comprehensioniter
and
generatorsexcept
handlingtest
,
doctest
,
unittestsobject
orient
programmingclass
and
instanc
attributesproperti
vs.
getter
and
settersinheritancemultipl
inheritancemag
method
and
oper
overloadingoop
,
inherit
exampleslotsclass
and
class
creationroad
to
metaclassesmetaclassesmetaclass
use
case
:
count
function
callsabstract
class
thou
shalt
count
'and
the
lord
spake
,
say
,
``
first
shalt
thou
take
out
the
holi
pin
.
then
,
shalt
thou
count
to
three
.
No
more
.
No
less
.
three
shalt
be
the
number
thou
shalt
count
,
and
the
number
of
the
count
shall
be
three
.
four
shalt
thou
not
count
,
neither
count
thou
two
,
except
that
thou
then
proceed
to
three
.
five
is
right
out
.
onc
at
the
number
three
,
be
the
third
number
to
be
reach
,
then
,
lobbest
thou
thi
holi
hand
grenad
of
antioch
toward
thi
foe
,
who
,
be
naughti
in
My
sight
,
shall
snuff
it
.
''
'
excerp
from
john
clees
,
graham
chapman
,
terri
gilliam
,
eric
idl
,
terri
jone
and
michael
palin
,
monti
python
and
the
holi
grail
:
the
screenplay
,
page
76
,
methuen
,
2003
(
UK
)
profil
gener
,
i.e
.
in
non-comput
term
,
profil
is
often
known
as
profil
one
or
more
person
or
group
of
person
by
use
person
characterist
or
behaviour
pattern
.
In
comput
scienc
profil
is
understood
as
a
dynam
program
analysi
measur
the
behaviour
of
a
program
or
a
softwar
packag
.
thi
may
includ
,
for
exampl
,
determin
the
memori
use
or
the
time
consum
by
a
program
,
or
which
fit
perfetli
to
the
topic
of
our
chapter
,
the
frequenc
or
durat
of
function
call
.
thi
websit
is
support
by
:
linux
and
python
cours
and
seminar
thi
websit
is
free
of
annoy
ad
.
We
want
to
keep
it
like
thi
.
you
can
help
with
your
donat
:
the
need
for
donat
bernd
klein
on
facebook
search
thi
websit
:
thi
topic
in
german
/
deutsch
übersetzung
:
beispielanwendung
für
metaklassenpython
3thi
is
a
tutori
in
python3
,
but
thi
chapter
of
our
cours
is
avail
in
a
version
for
python
2.x
as
well
:
count
function
call
with
the
help
of
a
metaclass
in
python
2.x
classroom
train
cours
the
goal
of
thi
websit
is
to
provid
educ
materi
,
allow
you
to
learn
python
on
your
own
.
nevertheless
,
it
is
faster
and
more
effici
to
attend
a
``
real
''
python
cours
in
a
classroom
,
with
an
experienc
trainer
.
So
whi
not
attend
one
of
the
live
python
cours
in
strasbourg
,
pari
,
luxembourg
,
amsterdam
,
zürich
/
zurich
,
vienna
/
wien
,
london
,
berlin
,
munich
,
hamburg
,
frankfurt
,
stuttgart
,
or
lake
constanc
by
bernd
klein
,
the
author
of
thi
tutori
?
you
can
book
on-sit
class
at
your
compani
or
organ
,
e.g
.
in
england
,
switzerland
,
austria
,
germani
,
franc
,
belgium
,
the
netherland
,
luxembourg
,
poland
,
UK
,
itali
and
other
locat
in
europ
and
in
canada
.
We
had
cours
in
the
follow
citi
:
amsterdam
(
the
netherland
)
,
berlin
(
germani
)
,
bern
(
switzerland
)
,
basel
(
switzerland
)
,
zurich
(
switzerland
)
,
locarno
(
switzerland
)
,
den
haag
(
the
hagu
)
,
hamburg
,
toronto
(
canada
)
,
edmonton
(
canada
)
,
munich
(
germani
)
and
mani
other
citi
.
contact
us
so
we
can
defin
and
find
the
best
cours
curriculum
to
meet
your
need
,
and
schedul
cours
session
to
be
held
at
your
locat
.
skill
python
programm
you
are
look
for
experienc
python
develop
or
programm
?
We
can
help
you
,
pleas
contact
us
.
quot
of
the
day
:
''
I
think
it
is
inevit
that
peopl
program
poorli
.
train
will
not
substanti
help
matter
.
We
have
to
learn
to
live
with
it
.
''
(
alan
perli
)
data
protect
declar
data
protect
declar
previou
chapter
:
metaclass
next
chapter
:
abstract
class
count
method
call
use
a
metaclass
introduct
after
you
have
hope
gone
through
our
chapter
introduct
into
metaclass
you
may
have
ask
yourself
about
possibl
use
case
for
metaclass
.
there
are
some
interest
use
case
and
it
's
not
-
like
some
say
-
a
solut
wait
for
a
problem
.
We
have
mention
alreadi
some
exampl
.
In
thi
chapter
of
our
tutori
on
python
,
we
want
to
elabor
an
exampl
metaclass
,
which
will
decor
the
method
of
the
subclass
.
the
decor
function
return
by
the
decor
make
it
possibl
to
count
the
number
of
time
each
method
of
the
subclass
ha
been
call
.
thi
is
usual
one
of
the
task
,
we
expect
from
a
profil
.
So
we
can
use
thi
metaclass
for
simpl
profil
purpos
.
Of
cours
,
it
will
be
easi
to
extend
our
metaclass
for
further
profil
task
.
preliminari
remark
befor
we
actual
dive
into
the
problem
,
we
want
to
call
to
mind
again
how
we
can
access
the
attribut
of
a
class
.
We
will
demonstr
thi
with
the
list
class
.
We
can
get
the
list
of
all
the
non
privat
attribut
of
a
class
-
in
our
exampl
the
random
class
-
with
the
follow
construct
.
import
random
cl
=
``
random
''
#
name
of
the
class
as
a
string
all_attribut
=
[
x
for
x
in
dir
(
eval
(
cl
)
)
if
not
x.startswith
(
``
__
''
)
]
print
(
all_attribut
)
[
'bpf
'
,
'log4
'
,
'nv_magicconst
'
,
'recip_bpf
'
,
'random
'
,
'sg_magicconst
'
,
'systemrandom
'
,
'twopi
'
,
'_builtinmethodtyp
'
,
'_methodtyp
'
,
'_sequenc
'
,
'_set
'
,
'_aco
'
,
'_ceil
'
,
'_co
'
,
'_e
'
,
'_exp
'
,
'_inst
'
,
'_log
'
,
'_pi
'
,
'_random
'
,
'_sha512
'
,
'_sin
'
,
'_sqrt
'
,
'_test
'
,
'_test_gener
'
,
'_urandom
'
,
'_warn
'
,
'betavari
'
,
'choic
'
,
'expovari
'
,
'gammavari
'
,
'gauss
'
,
'getrandbit
'
,
'getstat
'
,
'lognormvari
'
,
'normalvari
'
,
'paretovari
'
,
'randint
'
,
'random
'
,
'randrang
'
,
'sampl
'
,
'seed
'
,
'setstat
'
,
'shuffl
'
,
'triangular
'
,
'uniform
'
,
'vonmisesvari
'
,
'weibullvari
'
]
now
,
we
are
filter
the
callabl
attribut
,
i.e
.
the
public
method
of
the
class
.
method
=
[
x
for
x
in
dir
(
eval
(
cl
)
)
if
not
x.startswith
(
``
__
''
)
and
callabl
(
eval
(
cl
+
``
.
''
+
x
)
)
]
print
(
method
)
[
'random
'
,
'systemrandom
'
,
'_builtinmethodtyp
'
,
'_methodtyp
'
,
'_sequenc
'
,
'_set
'
,
'_aco
'
,
'_ceil
'
,
'_co
'
,
'_exp
'
,
'_log
'
,
'_sha512
'
,
'_sin
'
,
'_sqrt
'
,
'_test
'
,
'_test_gener
'
,
'_urandom
'
,
'_warn
'
,
'betavari
'
,
'choic
'
,
'expovari
'
,
'gammavari
'
,
'gauss
'
,
'getrandbit
'
,
'getstat
'
,
'lognormvari
'
,
'normalvari
'
,
'paretovari
'
,
'randint
'
,
'random
'
,
'randrang
'
,
'sampl
'
,
'seed
'
,
'setstat
'
,
'shuffl
'
,
'triangular
'
,
'uniform
'
,
'vonmisesvari
'
,
'weibullvari
'
]
get
the
non
callabl
attribut
of
the
class
can
be
easili
achiev
by
negat
callabl
,
i.e
.
ad
``
not
''
:
non_callable_attribut
=
[
x
for
x
in
dir
(
eval
(
cl
)
)
if
not
x.startswith
(
``
__
''
)
and
not
callabl
(
eval
(
cl
+
``
.
''
+
x
)
)
]
print
(
non_callable_attribut
)
[
'bpf
'
,
'log4
'
,
'nv_magicconst
'
,
'recip_bpf
'
,
'sg_magicconst
'
,
'twopi
'
,
'_e
'
,
'_inst
'
,
'_pi
'
,
'_random
'
]
In
normal
python
program
it
is
neither
recommend
nor
necessari
to
appli
method
in
the
follow
way
,
but
it
is
possibl
:
lst
=
[
3,4
]
list.__dict__
[
``
append
''
]
(
lst
,
42
)
lst
the
previou
python
code
return
the
follow
output
:
[
3
,
4
,
42
]
pleas
note
the
remark
from
the
python
document
:
``
becaus
dir
(
)
is
suppli
primarili
as
a
conveni
for
use
at
an
interact
prompt
,
it
tri
to
suppli
an
interest
set
of
name
more
than
it
tri
to
suppli
a
rigor
or
consist
defin
set
of
name
,
and
it
detail
behavior
may
chang
across
releas
.
for
exampl
,
metaclass
attribut
are
not
in
the
result
list
when
the
argument
is
a
class
.
''
A
decor
for
count
function
call
final
,
we
will
begin
to
design
the
metaclass
,
which
we
have
mention
as
our
target
in
the
begin
of
thi
chapter
.
It
will
decor
all
the
method
of
it
subclass
with
a
decor
,
which
count
the
number
of
call
.
We
have
defin
such
a
decor
in
our
chapter
memoiz
and
decor
:
def
call_count
(
func
)
:
def
helper
(
*arg
,
**kwarg
)
:
helper.cal
+=
1
return
func
(
*arg
,
**kwarg
)
helper.cal
=
0
helper.__name__=
func.__name__
return
helper
We
can
use
it
in
the
usual
way
:
@
call_count
def
f
(
)
:
pass
print
(
f.call
)
for
_
in
rang
(
10
)
:
f
(
)
print
(
f.call
)
0
10
It
better
if
you
call
to
mind
the
altern
notat
for
decor
function
.
We
will
need
thi
in
our
final
metaclass
:
def
f
(
)
:
pass
f
=
call_count
(
f
)
print
(
f.call
)
for
_
in
rang
(
10
)
:
f
(
)
print
(
f.call
)
0
10
the
``
count
call
''
metaclass
now
we
have
all
the
necessari
``
ingredi
''
togeth
to
write
our
metaclass
.
We
will
includ
our
call_count
decor
as
a
staticmethod
:
class
funccallcount
(
type
)
:
``
''
''
A
metaclass
which
decor
all
the
method
of
the
subclass
use
call_count
as
the
decor
``
''
''
@
staticmethod
def
call_count
(
func
)
:
``
''
''
decor
for
count
the
number
of
function
or
method
call
to
the
function
or
method
func
``
''
''
def
helper
(
*arg
,
**kwarg
)
:
helper.cal
+=
1
return
func
(
*arg
,
**kwarg
)
helper.cal
=
0
helper.__name__=
func.__name__
return
helper
def
__new__
(
cl
,
clsname
,
superclass
,
attributedict
)
:
``
''
''
everi
method
get
decor
with
the
decor
call_count
,
which
will
do
the
actual
call
count
``
''
''
for
attr
in
attributedict
:
if
callabl
(
attributedict
[
attr
]
)
and
not
attr.startswith
(
``
__
''
)
:
attributedict
[
attr
]
=
cls.call_count
(
attributedict
[
attr
]
)
return
type.__new__
(
cl
,
clsname
,
superclass
,
attributedict
)
class
A
(
metaclass=funccallcount
)
:
def
foo
(
self
)
:
pass
def
bar
(
self
)
:
pass
if
__name__
==
``
__main__
''
:
x
=
A
(
)
print
(
x.foo.cal
,
x.bar.cal
)
x.foo
(
)
print
(
x.foo.cal
,
x.bar.cal
)
x.foo
(
)
x.bar
(
)
print
(
x.foo.cal
,
x.bar.cal
)
0
0
1
0
2
1
previou
chapter
:
metaclass
next
chapter
:
abstract
class
©
2011
-
2018
,
bernd
klein
,
bodenseo
;
design
by
denis
mitchinson
adapt
for
python-course.eu
by
bernd
klein
