python2
tutori
:
list
comprehens
python
cours
python
2
tutori
histori
and
philosophi
of
pythonwhi
python
?
interact
modeexecut
a
scriptstructur
with
indentationdata
type
and
variablesoperatorsinput
and
raw_input
via
the
keyboardcondit
statementswhil
loopsfor
loopsformat
outputoutput
with
printsequenti
data
typeslist
manipulationdictionariesset
and
frozen
setsshallow
and
deep
copyfunctionsrecurs
and
recurs
functionstest
,
doctest
,
unittestsdecoratorsmemo
with
decoratorspass
argumentsnamespacesglob
vs.
local
variablesfil
managementmodular
program
and
modulesintroduct
in
regular
expressionsregular
express
,
advancedlambda
oper
,
filter
,
reduc
and
maplist
comprehensiongeneratorsexcept
handlingobject
orient
programminginherit
exampleslotsclass
and
class
creationroad
to
metaclassesmetaclassesmetaclass
exampl
:
count
function
callsabstract
class
python
In
greek
mytholog
,
python
is
the
name
of
a
a
huge
serpent
and
sometim
a
dragon
.
python
had
been
kill
by
the
god
apollo
at
delphi
.
python
wa
creat
out
of
the
slime
and
mud
left
after
the
great
flood
.
He
wa
appoint
by
gaia
(
mother
earth
)
to
guard
the
oracl
of
delphi
,
known
as
pytho
.
the
program
languag
python
ha
not
been
creat
out
of
slime
and
mud
but
out
of
the
program
languag
abc
.
It
ha
been
devis
by
a
dutch
programm
,
name
guido
van
rossum
,
in
amsterdam
.
origin
of
python
guido
van
rossum
wrote
the
follow
about
the
origin
of
python
in
a
foreword
for
the
book
``
program
python
''
by
mark
lutz
in
1996
:
``
over
six
year
ago
,
in
decemb
1989
,
I
wa
look
for
a
``
hobbi
''
program
project
that
would
keep
me
occupi
dure
the
week
around
christma
.
My
offic
(
a
government-run
research
lab
in
amsterdam
)
would
be
close
,
but
I
had
a
home
comput
,
and
not
much
els
on
my
hand
.
I
decid
to
write
an
interpret
for
the
new
script
languag
I
had
been
think
about
late
:
a
descend
of
abc
that
would
appeal
to
unix/c
hacker
.
I
chose
python
as
a
work
titl
for
the
project
,
be
in
a
slightli
irrever
mood
(
and
a
big
fan
of
monti
python
's
fli
circu
)
.
''
thi
websit
is
free
of
annoy
ad
.
We
want
to
keep
it
like
thi
.
you
can
help
with
your
donat
:
the
need
for
donat
bernd
klein
on
facebook
search
thi
websit
:
thi
topic
in
german
/
deutsch
übersetzung
:
listen-abstrakt
(
list
comprehens
)
python
2.7thi
tutori
deal
with
python
version
2.7thi
chapter
from
our
cours
is
avail
in
a
version
for
python3
:
list
comprehensionclassroom
train
cours
thi
websit
contain
a
free
and
extens
onlin
tutori
by
bernd
klein
,
use
materi
from
hi
classroom
python
train
cours
.
If
you
are
interest
in
an
instructor-l
classroom
train
cours
,
you
may
have
a
look
at
the
python
class
by
bernd
klein
at
bodenseo
.
©
kabliczech
-
fotolia.com
quot
of
the
day
:
''
I
think
it
is
inevit
that
peopl
program
poorli
.
train
will
not
substanti
help
matter
.
We
have
to
learn
to
live
with
it
.
''
(
alan
perli
)
If
you
have
the
choic
work
with
python
2
or
python
3
,
we
recomend
to
switch
to
python
3
!
you
can
read
our
python
tutori
to
see
what
the
differ
are
.
data
protect
declar
data
protect
declar
previou
chapter
:
lambda
oper
,
filter
,
reduc
and
map
next
chapter
:
gener
list
comprehens
introduct
We
learn
in
the
previou
chapter
``
lambda
oper
,
filter
,
reduc
and
map
''
that
guido
van
rossum
prefer
list
comprehens
to
construct
use
map
,
filter
,
reduc
and
lambda
.
In
thi
chapter
we
will
cover
the
essenti
about
list
comprehens
.
list
comprehens
were
ad
with
python
2.0
.
essenti
,
it
is
python
's
way
of
implement
a
well-known
notat
for
set
as
use
by
mathematician
.
In
mathemat
the
squar
number
of
the
natur
number
are
,
for
exampl
,
creat
by
{
x2
|
x
∈
ℕ
}
or
the
set
of
complex
integ
{
(
x
,
y
)
|
x
∈
ℤ
∧
y
∈
ℤ
}
.
list
comprehens
is
an
eleg
way
to
defin
and
creat
list
in
python
.
these
list
have
often
the
qualiti
of
set
,
but
are
not
in
all
case
set
.
list
comprehens
is
a
complet
substitut
for
the
lambda
function
as
well
as
the
function
map
(
)
,
filter
(
)
and
reduc
(
)
.
for
most
peopl
the
syntax
of
list
comprehens
is
easier
to
be
grasp
.
exampl
In
the
chapter
on
lambda
and
map
(
)
we
had
design
a
map
(
)
function
to
convert
celsiu
valu
into
fahrenheit
and
vice
versa
.
It
look
like
thi
with
list
comprehens
:
>
>
>
celsiu
=
[
39.2
,
36.5
,
37.3
,
37.8
]
>
>
>
fahrenheit
=
[
(
(
float
(
9
)
/5
)
*x
+
32
)
for
x
in
celsiu
]
>
>
>
print
fahrenheit
[
102.56
,
97.700000000000003
,
99.140000000000001
,
100.03999999999999
]
>
>
>
the
follow
list
comprehens
creat
the
pythagorean
tripl
:
>
>
>
[
(
x
,
y
,
z
)
for
x
in
rang
(
1,30
)
for
y
in
rang
(
x,30
)
for
z
in
rang
(
y,30
)
if
x**2
+
y**2
==
z**2
]
[
(
3
,
4
,
5
)
,
(
5
,
12
,
13
)
,
(
6
,
8
,
10
)
,
(
7
,
24
,
25
)
,
(
8
,
15
,
17
)
,
(
9
,
12
,
15
)
,
(
10
,
24
,
26
)
,
(
12
,
16
,
20
)
,
(
15
,
20
,
25
)
,
(
20
,
21
,
29
)
]
>
>
>
cross
product
of
two
set
:
>
>
>
colour
=
[
``
red
''
,
``
green
''
,
``
yellow
''
,
``
blue
''
]
>
>
>
thing
=
[
``
hous
''
,
``
car
''
,
``
tree
''
]
>
>
>
coloured_th
=
[
(
x
,
y
)
for
x
in
colour
for
y
in
thing
]
>
>
>
print
coloured_th
[
(
'red
'
,
'hous
'
)
,
(
'red
'
,
'car
'
)
,
(
'red
'
,
'tree
'
)
,
(
'green
'
,
'hous
'
)
,
(
'green
'
,
'car
'
)
,
(
'green
'
,
'tree
'
)
,
(
'yellow
'
,
'hous
'
)
,
(
'yellow
'
,
'car
'
)
,
(
'yellow
'
,
'tree
'
)
,
(
'blue
'
,
'hous
'
)
,
(
'blue
'
,
'car
'
)
,
(
'blue
'
,
'tree
'
)
]
>
>
>
gener
comprehens
gener
comprehens
were
introduc
with
python
2.6
.
they
are
simpli
a
gener
express
with
a
parenthesi
-
round
bracket
-
around
it
.
otherwis
,
the
syntax
and
the
way
of
work
is
like
list
comprehens
,
but
a
gener
comprehens
return
a
gener
instead
of
a
list
.
>
>
>
x
=
(
x
**2
for
x
in
rang
(
20
)
)
>
>
>
print
(
x
)
at
0xb7307aa4
>
>
>
>
x
=
list
(
x
)
>
>
>
print
(
x
)
[
0
,
1
,
4
,
9
,
16
,
25
,
36
,
49
,
64
,
81
,
100
,
121
,
144
,
169
,
196
,
225
,
256
,
289
,
324
,
361
]
A
more
demand
exampl
calcul
of
the
prime
number
between
1
and
100
use
the
siev
of
eratosthen
:
>
>
>
noprim
=
[
j
for
i
in
rang
(
2
,
8
)
for
j
in
rang
(
i*2
,
100
,
i
)
]
>
>
>
prime
=
[
x
for
x
in
rang
(
2
,
100
)
if
x
not
in
noprim
]
>
>
>
print
prime
[
2
,
3
,
5
,
7
,
11
,
13
,
17
,
19
,
23
,
29
,
31
,
37
,
41
,
43
,
47
,
53
,
59
,
61
,
67
,
71
,
73
,
79
,
83
,
89
,
97
]
>
>
>
We
want
to
bring
the
previou
exampl
into
more
gener
form
,
so
that
we
can
calcul
the
list
of
prime
number
up
to
an
arbitrari
number
n
:
>
>
>
from
math
import
sqrt
>
>
>
n
=
100
>
>
>
sqrt_n
=
int
(
sqrt
(
n
)
)
>
>
>
no_prim
=
[
j
for
i
in
rang
(
2
,
sqrt_n
)
for
j
in
rang
(
i*2
,
n
,
i
)
]
If
we
have
a
look
at
the
content
of
no_prim
,
we
can
see
that
we
have
a
problem
.
there
are
lot
of
doubl
entri
contain
in
thi
list
:
>
>
>
no_prim
[
4
,
6
,
8
,
10
,
12
,
14
,
16
,
18
,
20
,
22
,
24
,
26
,
28
,
30
,
32
,
34
,
36
,
38
,
40
,
42
,
44
,
46
,
48
,
50
,
52
,
54
,
56
,
58
,
60
,
62
,
64
,
66
,
68
,
70
,
72
,
74
,
76
,
78
,
80
,
82
,
84
,
86
,
88
,
90
,
92
,
94
,
96
,
98
,
6
,
9
,
12
,
15
,
18
,
21
,
24
,
27
,
30
,
33
,
36
,
39
,
42
,
45
,
48
,
51
,
54
,
57
,
60
,
63
,
66
,
69
,
72
,
75
,
78
,
81
,
84
,
87
,
90
,
93
,
96
,
99
,
8
,
12
,
16
,
20
,
24
,
28
,
32
,
36
,
40
,
44
,
48
,
52
,
56
,
60
,
64
,
68
,
72
,
76
,
80
,
84
,
88
,
92
,
96
,
10
,
15
,
20
,
25
,
30
,
35
,
40
,
45
,
50
,
55
,
60
,
65
,
70
,
75
,
80
,
85
,
90
,
95
,
12
,
18
,
24
,
30
,
36
,
42
,
48
,
54
,
60
,
66
,
72
,
78
,
84
,
90
,
96
,
14
,
21
,
28
,
35
,
42
,
49
,
56
,
63
,
70
,
77
,
84
,
91
,
98
,
16
,
24
,
32
,
40
,
48
,
56
,
64
,
72
,
80
,
88
,
96
,
18
,
27
,
36
,
45
,
54
,
63
,
72
,
81
,
90
,
99
]
>
>
>
the
solut
to
thi
intoler
problem
come
with
the
set
comprehens
,
which
we
will
cover
in
the
next
section
.
set
comprehens
A
set
comprehens
is
similar
to
a
list
comprehens
,
but
return
a
set
and
not
a
list
.
syntact
,
we
use
curli
bracket
instead
of
squar
bracket
to
creat
a
set
.
set
comprehens
is
the
right
function
to
solv
our
problem
from
the
previou
subsect
.
We
are
abl
to
creat
the
set
of
non
prime
without
doublet
:
>
>
>
from
math
import
sqrt
>
>
>
n
=
100
>
>
>
sqrt_n
=
int
(
sqrt
(
n
)
)
>
>
>
no_prim
=
{
j
for
i
in
rang
(
2
,
sqrt_n
)
for
j
in
rang
(
i*2
,
n
,
i
)
}
>
>
>
no_prim
{
4
,
6
,
8
,
9
,
10
,
12
,
14
,
15
,
16
,
18
,
20
,
21
,
22
,
24
,
25
,
26
,
27
,
28
,
30
,
32
,
33
,
34
,
35
,
36
,
38
,
39
,
40
,
42
,
44
,
45
,
46
,
48
,
49
,
50
,
51
,
52
,
54
,
55
,
56
,
57
,
58
,
60
,
62
,
63
,
64
,
65
,
66
,
68
,
69
,
70
,
72
,
74
,
75
,
76
,
77
,
78
,
80
,
81
,
82
,
84
,
85
,
86
,
87
,
88
,
90
,
91
,
92
,
93
,
94
,
95
,
96
,
98
,
99
}
>
>
>
prime
=
{
i
for
i
in
rang
(
n
)
if
i
not
in
no_prim
}
>
>
>
print
(
prime
)
{
0
,
1
,
2
,
3
,
5
,
7
,
11
,
13
,
17
,
19
,
23
,
29
,
31
,
37
,
41
,
43
,
47
,
53
,
59
,
61
,
67
,
71
,
73
,
79
,
83
,
89
,
97
}
>
>
>
recurs
function
to
calcul
the
prime
the
follow
python
script
use
a
recurs
function
to
calcul
the
prime
number
.
It
incorpor
the
fact
that
it
is
enough
to
examin
the
multipl
of
the
prime
number
up
to
the
squar
root
of
n
:
from
math
import
sqrt
def
prime
(
n
)
:
if
n
==
0
:
return
[
]
elif
n
==
1
:
return
[
]
els
:
p
=
prime
(
int
(
sqrt
(
n
)
)
)
no_p
=
{
j
for
i
in
p
for
j
in
xrang
(
i*2
,
n+1
,
i
)
}
p
=
{
x
for
x
in
xrang
(
2
,
n
+
1
)
if
x
not
in
no_p
}
return
p
for
i
in
rang
(
1,50
)
:
print
i
,
prime
(
i
)
previou
chapter
:
lambda
oper
,
filter
,
reduc
and
map
next
chapter
:
gener
©
2011
-
2018
,
bernd
klein
,
bodenseo
;
design
by
denis
mitchinson
adapt
for
python-course.eu
by
bernd
klein
