python
tutori
:
except
handl
python
cours
python
3
tutori
the
origin
of
pythonstart
with
python
:
the
interact
shellexecut
a
scriptindentationdata
type
and
variablesoperatorssequenti
data
type
:
list
and
stringslist
manipulationsshallow
and
deep
copydictionariesset
and
frozen
setsan
extens
exampl
use
setsinput
via
the
keyboardcondit
statementsloop
,
while
loopfor
loopsdiffer
between
inter
und
iterablesoutput
with
printformat
output
with
string
modulo
and
the
format
methodfunctionsrecurs
and
recurs
functionsparamet
pass
in
functionsnamespacesglob
and
local
variablesdecoratorsmemo
with
decoratorsread
and
write
filesmodular
program
and
modulespackag
in
pythonregular
expressionsregular
express
,
advancedlambda
oper
,
filter
,
reduc
and
maplist
comprehensioniter
and
generatorsexcept
handlingtest
,
doctest
,
unittestsobject
orient
programmingclass
and
instanc
attributesproperti
vs.
getter
and
settersinheritancemultipl
inheritancemag
method
and
oper
overloadingoop
,
inherit
exampleslotsclass
and
class
creationroad
to
metaclassesmetaclassesmetaclass
use
case
:
count
function
callsabstract
class
except
``
noth
travel
faster
than
the
speed
of
light
with
the
possibl
except
of
bad
news
,
which
obey
it
own
special
law
.
''
(
dougla
adam
)
``
gener
principl
should
not
be
base
on
except
case
.
''
(
robert
J.
sawyer
)
thi
websit
is
support
by
:
linux
and
python
train
cours
thi
websit
is
free
of
annoy
ad
.
We
want
to
keep
it
like
thi
.
you
can
help
with
your
donat
:
the
need
for
donat
bernd
klein
on
facebook
search
thi
websit
:
thi
topic
in
german
/
deutsch
Ã¼bersetzung
:
ausnahmebehandlungpython
3thi
is
a
tutori
in
python3
,
but
thi
chapter
of
our
cours
is
avail
in
a
version
for
python
2.x
as
well
:
except
handl
in
python
2.x
train
class
thi
websit
aim
at
provid
you
with
educ
materi
suitabl
for
self-learn
.
nevertheless
,
it
is
faster
and
more
effici
to
attend
a
``
real
''
python
cours
in
a
classroom
,
with
an
experienc
trainer
.
So
whi
not
attend
one
of
the
live
python
cours
in
strasbourg
,
pari
,
london
,
berlin
,
munich
,
hamburg
,
frankfurt
,
or
lake
constanc
by
bernd
klein
,
the
author
of
thi
tutori
?
in-hous
train
cours
If
you
like
it
,
we
will
come
to
your
compani
or
institut
and
provid
a
special
train
for
your
employe
,
as
we
've
done
it
mani
time
in
amsterdam
(
the
netherland
)
,
berlin
(
germani
)
,
bern
(
switzerland
)
,
basel
(
switzerland
)
,
zurich
(
switzerland
)
,
frankfurt
(
germani
)
,
locarno
(
switzerland
)
,
den
haag
(
the
hagu
)
,
hamburg
,
munich
(
germani
)
,
bucharest
(
romania
)
,
toronto
(
canada
)
,
edmonton
(
canada
)
,
and
mani
other
citi
.
We
do
train
cours
in
england
,
switzerland
,
liechtenstein
,
austria
,
germani
,
franc
,
belgium
,
the
netherland
,
luxembourg
,
romania
,
UK
,
itali
,
spain
and
other
locat
in
europ
and
in
canada
.
thi
way
you
will
get
a
perfect
train
up
to
your
need
and
it
will
be
extrem
cost
effici
as
well
.
contact
us
so
we
can
find
the
ideal
cours
to
meet
your
need
.
skill
python
programm
you
are
look
for
experienc
python
develop
or
programm
?
We
can
help
you
,
pleas
contact
us
.
quot
of
the
day
:
''
It
scarc
need
mention
that
,
when
you
have
a
decor
insid
a
decor
,
it
's
an
interior
decor
.
''
(
neal
morison
)
data
protect
declar
data
protect
declar
previou
chapter
:
iter
and
gener
next
chapter
:
test
,
doctest
,
unittest
error
and
except
except
handl
An
except
is
an
error
that
happen
dure
the
execut
of
a
program
.
except
are
known
to
non-programm
as
instanc
that
do
not
conform
to
a
gener
rule
.
the
name
``
except
''
in
comput
scienc
ha
thi
mean
as
well
:
It
impli
that
the
problem
(
the
except
)
doe
n't
occur
frequent
,
i.e
.
the
except
is
the
``
except
to
the
rule
''
.
except
handl
is
a
construct
in
some
program
languag
to
handl
or
deal
with
error
automat
.
mani
program
languag
like
c++
,
objective-c
,
php
,
java
,
rubi
,
python
,
and
mani
other
have
built-in
support
for
except
handl
.
error
handl
is
gener
resolv
by
save
the
state
of
execut
at
the
moment
the
error
occur
and
interrupt
the
normal
flow
of
the
program
to
execut
a
special
function
or
piec
of
code
,
which
is
known
as
the
except
handler
.
depend
on
the
kind
of
error
(
``
divis
by
zero
''
,
``
file
open
error
''
and
so
on
)
which
had
occur
,
the
error
handler
can
``
fix
''
the
problem
and
the
programm
can
be
continu
afterward
with
the
previous
save
data
.
except
handl
in
python
except
handl
in
python
is
veri
similar
to
java
.
the
code
,
which
harbour
the
risk
of
an
except
,
is
embed
in
a
tri
block
.
but
wherea
in
java
except
are
caught
by
catch
claus
,
we
have
statement
introduc
by
an
``
except
''
keyword
in
python
.
It
's
possibl
to
creat
``
custom-mad
''
except
:
with
the
rais
statement
it
's
possibl
to
forc
a
specifi
except
to
occur
.
let
's
look
at
a
simpl
exampl
.
assum
we
want
to
ask
the
user
to
enter
an
integ
number
.
If
we
use
a
input
(
)
,
the
input
will
be
a
string
,
which
we
have
to
cast
into
an
integ
.
If
the
input
ha
not
been
a
valid
integ
,
we
will
gener
(
rais
)
a
valueerror
.
We
show
thi
in
the
follow
interact
session
:
>
>
>
n
=
int
(
input
(
``
pleas
enter
a
number
:
``
)
)
pleas
enter
a
number
:
23.5
traceback
(
most
recent
call
last
)
:
file
``
<
stdin
>
''
,
line
1
,
in
<
modul
>
valueerror
:
invalid
liter
for
int
(
)
with
base
10
:
'23.5
'
with
the
aid
of
except
handl
,
we
can
write
robust
code
for
read
an
integ
from
input
:
while
true
:
tri
:
n
=
input
(
``
pleas
enter
an
integ
:
``
)
n
=
int
(
n
)
break
except
valueerror
:
print
(
``
No
valid
integ
!
pleas
tri
again
...
''
)
print
(
``
great
,
you
success
enter
an
integ
!
''
)
It
's
a
loop
,
which
break
onli
,
if
a
valid
integ
ha
been
given
.
the
exampl
script
work
like
thi
:
the
while
loop
is
enter
.
the
code
within
the
tri
claus
will
be
execut
statement
by
statement
.
If
no
except
occur
dure
the
execut
,
the
execut
will
reach
the
break
statement
and
the
while
loop
will
be
left
.
If
an
except
occur
,
i.e
.
in
the
cast
of
n
,
the
rest
of
the
tri
block
will
be
skip
and
the
except
claus
will
be
execut
.
the
rais
error
,
in
our
case
a
valueerror
,
ha
to
match
one
of
the
name
after
except
.
In
our
exampl
onli
one
,
i.e
.
``
valueerror
:
''
.
after
have
print
the
text
of
the
print
statement
,
the
execut
doe
anoth
loop
.
It
start
with
a
new
input
(
)
.
An
exampl
usag
could
look
like
thi
:
$
python
integer_read.pi
pleas
enter
an
integ
:
abc
No
valid
integ
!
pleas
tri
again
...
pleas
enter
an
integ
:
42.0
No
valid
integ
!
pleas
tri
again
...
pleas
enter
an
integ
:
42
great
,
you
success
enter
an
integ
!
$
multipl
except
claus
A
tri
statement
may
have
more
than
one
except
claus
for
differ
except
.
but
at
most
one
except
claus
will
be
execut
.
our
next
exampl
show
a
tri
claus
,
in
which
we
open
a
file
for
read
,
read
a
line
from
thi
file
and
convert
thi
line
into
an
integ
.
there
are
at
least
two
possibl
except
:
an
ioerror
valueerror
just
in
case
we
have
an
addit
unnam
except
claus
for
an
unexpect
error
:
import
sy
tri
:
f
=
open
(
'integers.txt
'
)
s
=
f.readlin
(
)
i
=
int
(
s.strip
(
)
)
except
ioerror
as
e
:
errno
,
strerror
=
e.arg
print
(
``
i/o
error
(
{
0
}
)
:
{
1
}
''
.format
(
errno
,
strerror
)
)
#
e
can
be
print
directli
without
use
.arg
:
#
print
(
e
)
except
valueerror
:
print
(
``
No
valid
integ
in
line
.
''
)
except
:
print
(
``
unexpect
error
:
''
,
sys.exc_info
(
)
[
0
]
)
rais
the
handl
of
the
ioerror
in
the
previou
exampl
is
of
special
interest
.
the
except
claus
for
the
ioerror
specifi
a
variabl
``
e
''
after
the
except
name
(
ioerror
)
.
the
variabl
``
e
''
is
bound
to
an
except
instanc
with
the
argument
store
in
instance.arg
.
If
we
call
the
abov
script
with
a
non-exist
file
,
we
get
the
messag
:
i/o
error
(
2
)
:
No
such
file
or
directori
and
if
the
file
integers.txt
is
not
readabl
,
e.g
.
if
we
do
n't
have
the
permiss
to
read
it
,
we
get
the
follow
messag
:
i/o
error
(
13
)
:
permiss
deni
An
except
claus
may
name
more
than
one
except
in
a
tupl
of
error
name
,
as
we
see
in
the
follow
exampl
:
tri
:
f
=
open
(
'integers.txt
'
)
s
=
f.readlin
(
)
i
=
int
(
s.strip
(
)
)
except
(
ioerror
,
valueerror
)
:
print
(
``
An
i/o
error
or
a
valueerror
occur
''
)
except
:
print
(
``
An
unexpect
error
occur
''
)
rais
We
want
to
demonstr
now
,
what
happen
,
if
we
call
a
function
within
a
tri
block
and
if
an
except
occur
insid
the
function
call
:
def
f
(
)
:
x
=
int
(
``
four
''
)
tri
:
f
(
)
except
valueerror
as
e
:
print
(
``
got
it
:
-
)
``
,
e
)
print
(
``
let
's
get
on
''
)
We
learn
from
the
abov
result
that
the
function
catch
the
except
:
got
it
:
-
)
invalid
liter
for
int
(
)
with
base
10
:
'four
'
let
's
get
on
We
will
extend
our
exampl
now
so
that
the
function
will
catch
the
except
directli
:
def
f
(
)
:
tri
:
x
=
int
(
``
four
''
)
except
valueerror
as
e
:
print
(
``
got
it
in
the
function
:
-
)
``
,
e
)
tri
:
f
(
)
except
valueerror
as
e
:
print
(
``
got
it
:
-
)
``
,
e
)
print
(
``
let
's
get
on
''
)
As
we
have
expect
,
the
except
will
be
caught
insid
of
the
function
and
not
in
the
caller
except
:
got
it
in
the
function
:
-
)
invalid
liter
for
int
(
)
with
base
10
:
'four
'
let
's
get
on
We
add
now
a
``
rais
''
,
which
gener
the
valueerror
again
,
so
that
the
except
will
be
propag
to
the
caller
:
def
f
(
)
:
tri
:
x
=
int
(
``
four
''
)
except
valueerror
as
e
:
print
(
``
got
it
in
the
function
:
-
)
``
,
e
)
rais
tri
:
f
(
)
except
valueerror
as
e
:
print
(
``
got
it
:
-
)
``
,
e
)
print
(
``
let
's
get
on
''
)
We
will
get
the
follow
result
:
got
it
in
the
function
:
-
)
invalid
liter
for
int
(
)
with
base
10
:
'four
'
got
it
:
-
)
invalid
liter
for
int
(
)
with
base
10
:
'four
'
let
's
get
on
custom-mad
except
It
's
possibl
to
creat
except
yourself
:
>
>
>
rais
syntaxerror
(
``
sorri
,
my
fault
!
''
)
traceback
(
most
recent
call
last
)
:
file
``
<
stdin
>
''
,
line
1
,
in
<
modul
&
gt
syntaxerror
:
sorri
,
my
fault
!
the
best
or
the
python
way
to
do
thi
,
consist
in
defin
an
except
class
which
inherit
from
the
except
class
.
you
will
have
to
go
through
the
chapter
on
``
object
orient
program
''
to
fulli
understand
the
follow
exampl
:
class
myexcept
(
except
)
:
pass
rais
myexcept
(
``
An
except
doe
n't
alway
prove
the
rule
!
''
)
If
you
start
thi
program
,
you
will
get
the
follow
result
:
$
python3
exception_eigene_klasse.pi
traceback
(
most
recent
call
last
)
:
file
``
exception_eigene_klasse.pi
''
,
line
4
,
in
<
modul
>
rais
myexcept
(
``
wa
falsch
ist
,
ist
falsch
!
''
)
__main__.myexcept
:
An
except
doe
n't
alway
prove
the
rule
!
clean-up
action
(
tri
...
final
)
So
far
the
tri
statement
had
alway
been
pair
with
except
claus
.
but
there
is
anoth
way
to
use
it
as
well
.
the
tri
statement
can
be
follow
by
a
final
claus
.
final
claus
are
call
clean-up
or
termin
claus
,
becaus
they
must
be
execut
under
all
circumst
,
i.e
.
a
``
final
''
claus
is
alway
execut
regardless
if
an
except
occur
in
a
tri
block
or
not
.
A
simpl
exampl
to
demonstr
the
final
claus
:
tri
:
x
=
float
(
input
(
``
your
number
:
``
)
)
invers
=
1.0
/
x
final
:
print
(
``
there
may
or
may
not
have
been
an
except
.
''
)
print
(
``
the
invers
:
``
,
invers
)
let
's
look
at
the
output
of
the
previou
script
,
if
we
first
input
a
correct
number
and
after
thi
a
string
,
which
is
rais
an
error
:
bernd
@
venu
:
~/tmp
$
python
finally.pi
your
number
:
34
there
may
or
may
not
have
been
an
except
.
the
invers
:
0.0294117647059
bernd
@
venu
:
~/tmp
$
python
finally.pi
your
number
:
python
there
may
or
may
not
have
been
an
except
.
traceback
(
most
recent
call
last
)
:
file
``
finally.pi
''
,
line
3
,
in
<
modul
>
x
=
float
(
input
(
``
your
number
:
``
)
)
valueerror
:
invalid
liter
for
float
(
)
:
python
bernd
@
venu
:
~/tmp
$
combin
tri
,
except
and
final
``
final
''
and
``
except
''
can
be
use
togeth
for
the
same
tri
block
,
as
can
be
seen
the
follow
python
exampl
:
tri
:
x
=
float
(
input
(
``
your
number
:
``
)
)
invers
=
1.0
/
x
except
valueerror
:
print
(
``
you
should
have
given
either
an
int
or
a
float
''
)
except
zerodivisionerror
:
print
(
``
infin
''
)
final
:
print
(
``
there
may
or
may
not
have
been
an
except
.
''
)
the
output
of
the
previou
script
,
if
save
as
``
finally2.pi
''
,
for
variou
valu
look
like
thi
:
bernd
@
venu
:
~/tmp
$
python
finally2.pi
your
number
:
37
there
may
or
may
not
have
been
an
except
.
bernd
@
venu
:
~/tmp
$
python
finally2.pi
your
number
:
seven
you
should
have
given
either
an
int
or
a
float
there
may
or
may
not
have
been
an
except
.
bernd
@
venu
:
~/tmp
$
python
finally2.pi
your
number
:
0
infin
there
may
or
may
not
have
been
an
except
.
bernd
@
venu
:
~/tmp
$
els
claus
the
tri
...
except
statement
ha
an
option
els
claus
.
An
els
block
ha
to
be
posit
after
all
the
except
claus
.
An
els
claus
will
be
execut
if
the
tri
claus
doe
n't
rais
an
except
.
the
follow
exampl
open
a
file
and
read
in
all
the
line
into
a
list
call
``
text
''
:
import
sy
file_nam
=
sys.argv
[
1
]
text
=
[
]
tri
:
fh
=
open
(
file_nam
,
'
r
'
)
text
=
fh.readlin
(
)
fh.close
(
)
except
ioerror
:
print
(
'
can
not
open
'
,
file_nam
)
if
text
:
print
(
text
[
100
]
)
thi
exampl
receiv
the
file
name
via
a
command
line
argument
.
So
make
sure
that
you
call
it
properli
:
let
's
assum
that
you
save
thi
program
as
``
exception_test.pi
''
.
In
thi
case
,
you
have
to
call
it
with
python
exception_test.pi
integers.txt
If
you
do
n't
want
thi
behaviour
,
just
chang
the
line
``
file_nam
=
sys.argv
[
1
]
''
to
``
file_nam
=
'integers.txt
'
''
.
the
previou
exampl
is
nearli
the
same
as
:
import
sy
file_nam
=
sys.argv
[
1
]
text
=
[
]
tri
:
fh
=
open
(
file_nam
,
'
r
'
)
except
ioerror
:
print
(
'
can
not
open
'
,
file_nam
)
els
:
text
=
fh.readlin
(
)
fh.close
(
)
if
text
:
print
(
text
[
100
]
)
the
main
differ
is
that
in
the
first
case
,
all
statement
of
the
tri
block
can
lead
to
the
same
error
messag
``
can
not
open
...
''
,
which
is
wrong
,
if
fh.close
(
)
or
fh.readlin
(
)
rais
an
error
.
previou
chapter
:
iter
and
gener
next
chapter
:
test
,
doctest
,
unittest
Â©
2011
-
2018
,
bernd
klein
,
bodenseo
;
design
by
denis
mitchinson
adapt
for
python-course.eu
by
bernd
klein
