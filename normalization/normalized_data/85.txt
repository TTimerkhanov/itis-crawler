numer
&
scientif
comput
with
python
:
boolean
mask
of
array
numer
python
cours
numer
program
numpi
introductioncr
numpi
arraysdata
type
object
,
dtypenumer
oper
on
numpi
arrayschang
the
dimens
of
arrayspython
,
numpi
and
probabilityweight
choic
and
weight
samplescr
of
synthet
test
databoolean
mask
of
arraysmatrix
arithmeticread
and
write
ndarraysmatplotlib
introductionspin
and
tickslegend
and
annotationsmultipl
figur
and
axeshistogramscontour
plotspython
imag
process
tutorialimag
process
techniquespanda
tutorialpanda
dataframespanda
data
filesd
with
nanbin
datapanda
tutori
continu
:
multi-level
indexingdata
visual
with
panda
and
pythonpython
,
date
and
timepython
,
panda
and
timeserieslinear
combin
what
is
the
best
program
languag
for
numer
analysi
python
,
that
's
what
we
think
!
but
there
exist
lot
of
program
languag
which
are
suitabl
for
solv
numer
project
,
so
even
without
googl
,
you
can
be
sure
,
that
there
must
be
differ
opinion
.
wikipedia
list
,
for
exampl
,
about
60
``
numer
program
languag
''
,
amongst
them
old
languag
like
fortran
.
but
the
continu
grow
number
of
python
user
and
lover
is
a
clear
vote
for
python
!
thi
websit
is
free
of
annoy
ad
.
We
want
to
keep
it
like
thi
.
you
can
help
with
your
donat
:
the
need
for
donat
bernd
klein
on
facebook
search
thi
websit
:
thi
topic
in
german
/
deutsch
übersetzung
:
boolsch
maskierung
von
arraysclassroom
train
cours
thi
websit
contain
a
free
and
extens
onlin
tutori
by
bernd
klein
,
use
materi
from
hi
classroom
python
train
cours
.
If
you
are
interest
in
an
instructor-l
classroom
train
cours
,
you
may
have
a
look
at
the
python
class
by
bernd
klein
at
bodenseo
.
©
kabliczech
-
fotolia.com
quot
of
the
day
:
''
I
think
it
is
inevit
that
peopl
program
poorli
.
train
will
not
substanti
help
matter
.
We
have
to
learn
to
live
with
it
.
''
(
alan
perli
)
If
you
have
the
choic
work
with
python
2
or
python
3
,
we
recomend
to
switch
to
python
3
!
you
can
read
our
python
tutori
to
see
what
the
differ
are
.
data
protect
declar
data
protect
declar
previou
chapter
:
creation
of
synthet
test
data
next
chapter
:
matrix
arithmet
numpi
:
boolean
index
import
numpi
as
np
A
=
np.array
(
[
4
,
7
,
3
,
4
,
2
,
8
]
)
print
(
A
==
4
)
[
true
fals
fals
true
fals
fals
]
everi
element
of
the
array
A
is
test
,
if
it
is
equal
to
4
.
the
result
of
these
test
are
the
boolean
element
of
the
result
array
.
Of
cours
,
it
is
also
possibl
to
check
on
``
<
``
,
``
<
=
''
,
``
>
''
and
``
>
=
''
.
print
(
A
<
5
)
[
true
fals
true
true
true
fals
]
It
work
also
for
higher
dimens
:
B
=
np.array
(
[
[
42,56,89,65
]
,
[
99,88,42,12
]
,
[
55,42,17,18
]
]
)
print
(
B
>
=42
)
[
[
true
true
true
true
]
[
true
true
true
fals
]
[
true
true
fals
fals
]
]
It
is
a
conveni
way
to
threshold
imag
.
import
numpi
as
np
A
=
np.array
(
[
[
12
,
13
,
14
,
12
,
16
,
14
,
11
,
10
,
9
]
,
[
11
,
14
,
12
,
15
,
15
,
16
,
10
,
12
,
11
]
,
[
10
,
12
,
12
,
15
,
14
,
16
,
10
,
12
,
12
]
,
[
9
,
11
,
16
,
15
,
14
,
16
,
15
,
12
,
10
]
,
[
12
,
11
,
16
,
14
,
10
,
12
,
16
,
12
,
13
]
,
[
10
,
15
,
16
,
14
,
14
,
14
,
16
,
15
,
12
]
,
[
13
,
17
,
14
,
10
,
14
,
11
,
14
,
15
,
10
]
,
[
10
,
16
,
12
,
14
,
11
,
12
,
14
,
18
,
11
]
,
[
10
,
19
,
12
,
14
,
11
,
12
,
14
,
18
,
10
]
,
[
14
,
22
,
17
,
19
,
16
,
17
,
18
,
17
,
13
]
,
[
10
,
16
,
12
,
14
,
11
,
12
,
14
,
18
,
11
]
,
[
10
,
16
,
12
,
14
,
11
,
12
,
14
,
18
,
11
]
,
[
10
,
19
,
12
,
14
,
11
,
12
,
14
,
18
,
10
]
,
[
14
,
22
,
12
,
14
,
11
,
12
,
14
,
17
,
13
]
,
[
10
,
16
,
12
,
14
,
11
,
12
,
14
,
18
,
11
]
]
)
B
=
A
<
15
b.astyp
(
np.int
)
the
abov
code
return
the
follow
:
array
(
[
[
1
,
1
,
1
,
1
,
0
,
1
,
1
,
1
,
1
]
,
[
1
,
1
,
1
,
0
,
0
,
0
,
1
,
1
,
1
]
,
[
1
,
1
,
1
,
0
,
1
,
0
,
1
,
1
,
1
]
,
[
1
,
1
,
0
,
0
,
1
,
0
,
0
,
1
,
1
]
,
[
1
,
1
,
0
,
1
,
1
,
1
,
0
,
1
,
1
]
,
[
1
,
0
,
0
,
1
,
1
,
1
,
0
,
0
,
1
]
,
[
1
,
0
,
1
,
1
,
1
,
1
,
1
,
0
,
1
]
,
[
1
,
0
,
1
,
1
,
1
,
1
,
1
,
0
,
1
]
,
[
1
,
0
,
1
,
1
,
1
,
1
,
1
,
0
,
1
]
,
[
1
,
0
,
0
,
0
,
0
,
0
,
0
,
0
,
1
]
,
[
1
,
0
,
1
,
1
,
1
,
1
,
1
,
0
,
1
]
,
[
1
,
0
,
1
,
1
,
1
,
1
,
1
,
0
,
1
]
,
[
1
,
0
,
1
,
1
,
1
,
1
,
1
,
0
,
1
]
,
[
1
,
0
,
1
,
1
,
1
,
1
,
1
,
0
,
1
]
,
[
1
,
0
,
1
,
1
,
1
,
1
,
1
,
0
,
1
]
]
)
If
you
have
a
close
look
at
the
previou
output
,
you
will
see
,
that
it
the
upper
case
'
A
'
is
hidden
in
the
array
B
.
fanci
index
We
will
index
an
array
C
in
the
follow
exampl
by
use
a
boolean
mask
.
It
is
call
fanci
index
,
if
array
are
index
by
use
boolean
or
integ
array
(
mask
)
.
the
result
will
be
a
copi
and
not
a
view
.
In
our
next
exampl
,
we
will
use
the
boolean
mask
of
one
array
to
select
the
correspond
element
of
anoth
array
.
the
new
array
R
contain
all
the
element
of
C
where
the
correspond
valu
of
(
A
<
=5
)
is
true
.
C
=
np.array
(
[
123,188,190,99,77,88,100
]
)
A
=
np.array
(
[
4,7,2,8,6,9,5
]
)
R
=
C
[
A
<
=5
]
print
(
R
)
[
123
190
100
]
index
with
an
integ
array
In
the
follow
exampl
,
we
will
index
with
an
integ
array
:
C
[
[
0
,
2
,
3
,
1
,
4
,
1
]
]
the
abov
python
code
return
the
follow
:
array
(
[
123
,
190
,
99
,
188
,
77
,
188
]
)
indic
can
appear
in
everi
order
and
multipl
time
!
exercis
extract
from
the
array
np.array
(
[
3,4,6,10,24,89,45,43,46,99,100
]
)
with
boolean
mask
all
the
number
which
are
not
divis
by
3
which
are
divis
by
5
which
are
divis
by
3
and
5
which
are
divis
by
3
and
set
them
to
42
solut
import
numpi
as
np
A
=
np.array
(
[
3,4,6,10,24,89,45,43,46,99,100
]
)
div3
=
A
[
A
%
3
!
=0
]
print
(
``
element
of
A
not
divis
by
3
:
''
)
print
(
div3
)
div5
=
A
[
A
%
5==0
]
print
(
``
element
of
A
divis
by
5
:
''
)
print
(
div5
)
print
(
``
element
of
A
,
which
are
divis
by
3
and
5
:
''
)
print
(
A
[
(
A
%
3==0
)
&
(
A
%
5==0
)
]
)
print
(
``
--
--
--
--
--
--
--
--
--
''
)
#
A
[
A
%
3==0
]
=
42
print
(
``
''
''
new
valu
of
A
after
set
the
element
of
A
,
which
are
divis
by
3
,
to
42
:
''
''
''
)
print
(
A
)
element
of
A
not
divis
by
3
:
[
4
10
89
43
46
100
]
element
of
A
divis
by
5
:
[
10
45
100
]
element
of
A
,
which
are
divis
by
3
and
5
:
[
45
]
--
--
--
--
--
--
--
--
--
new
valu
of
A
after
set
the
element
of
A
,
which
are
divis
by
3
,
to
42
:
[
42
4
42
10
42
89
42
43
46
42
100
]
nonzero
and
where
there
is
an
ndarray
method
call
nonzero
and
a
numpi
method
with
thi
name
.
the
two
function
are
equival
.
for
an
ndarray
a
both
numpy.nonzero
(
a
)
and
a.nonzero
(
)
return
the
indic
of
the
element
of
a
that
are
non-zero
.
the
indic
are
return
as
a
tupl
of
array
,
one
for
each
dimens
of
'
a
'
.
the
correspond
non-zero
valu
can
be
obtain
with
:
a
[
numpy.nonzero
(
a
)
]
import
numpi
as
np
a
=
np.array
(
[
[
0
,
2
,
3
,
0
,
1
]
,
[
1
,
0
,
0
,
7
,
0
]
,
[
5
,
0
,
0
,
1
,
0
]
]
)
print
(
a.nonzero
(
)
)
(
array
(
[
0
,
0
,
0
,
1
,
1
,
2
,
2
]
)
,
array
(
[
1
,
2
,
4
,
0
,
3
,
0
,
3
]
)
)
If
you
want
to
group
the
indic
by
element
,
you
can
use
transpos
:
transpos
(
nonzero
(
a
)
)
A
two-dimension
array
is
return
.
everi
row
correspond
to
a
non-zero
element
.
np.transpos
(
a.nonzero
(
)
)
the
previou
python
code
return
the
follow
output
:
array
(
[
[
0
,
1
]
,
[
0
,
2
]
,
[
0
,
4
]
,
[
1
,
0
]
,
[
1
,
3
]
,
[
2
,
0
]
,
[
2
,
3
]
]
)
the
correspond
non-zero
valu
can
be
retriev
with
:
a
[
a.nonzero
(
)
]
the
previou
python
code
return
the
follow
output
:
array
(
[
2
,
3
,
1
,
1
,
7
,
5
,
1
]
)
the
function
'nonzero
'
can
be
use
to
obtain
the
indic
of
an
array
,
where
a
condit
is
true
.
In
the
follow
script
,
we
creat
the
boolean
array
B
>
=
42
:
B
=
np.array
(
[
[
42,56,89,65
]
,
[
99,88,42,12
]
,
[
55,42,17,18
]
]
)
print
(
B
>
=
42
)
[
[
true
true
true
true
]
[
true
true
true
fals
]
[
true
true
fals
fals
]
]
np.nonzero
(
B
>
=
42
)
yield
the
indic
of
the
B
where
the
condit
is
true
:
exercis
calcul
the
prime
number
between
0
and
100
by
use
a
boolean
array
.
solut
:
import
numpi
as
np
is_prim
=
np.one
(
(
100
,
)
,
dtype=bool
)
#
cross
out
0
and
1
which
are
not
prime
:
is_prim
[
:2
]
=
0
#
cross
out
it
higher
multipl
(
siev
of
eratosthen
)
:
nmax
=
int
(
np.sqrt
(
len
(
is_prim
)
)
)
for
i
in
rang
(
2
,
nmax
)
:
is_prim
[
2*i
:
:i
]
=
fals
print
(
np.nonzero
(
is_prim
)
)
(
array
(
[
2
,
3
,
5
,
7
,
11
,
13
,
17
,
19
,
23
,
29
,
31
,
37
,
41
,
43
,
47
,
53
,
59
,
61
,
67
,
71
,
73
,
79
,
83
,
89
,
97
]
)
,
)
flatnonzero
and
count_nonzero
similar
function
:
flatnonzero
:
return
indic
that
are
non-zero
in
the
flatten
version
of
the
input
array
.
count_nonzero
:
count
the
number
of
non-zero
element
in
the
input
array
.
previou
chapter
:
creation
of
synthet
test
data
next
chapter
:
matrix
arithmet
©
2011
-
2018
,
bernd
klein
,
bodenseo
;
design
by
denis
mitchinson
adapt
for
python-course.eu
by
bernd
klein
