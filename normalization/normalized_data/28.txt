python
tutori
:
object
orient
program
python
cours
python
3
tutori
the
origin
of
pythonstart
with
python
:
the
interact
shellexecut
a
scriptindentationdata
type
and
variablesoperatorssequenti
data
type
:
list
and
stringslist
manipulationsshallow
and
deep
copydictionariesset
and
frozen
setsan
extens
exampl
use
setsinput
via
the
keyboardcondit
statementsloop
,
while
loopfor
loopsdiffer
between
inter
und
iterablesoutput
with
printformat
output
with
string
modulo
and
the
format
methodfunctionsrecurs
and
recurs
functionsparamet
pass
in
functionsnamespacesglob
and
local
variablesdecoratorsmemo
with
decoratorsread
and
write
filesmodular
program
and
modulespackag
in
pythonregular
expressionsregular
express
,
advancedlambda
oper
,
filter
,
reduc
and
maplist
comprehensioniter
and
generatorsexcept
handlingtest
,
doctest
,
unittestsobject
orient
programmingclass
and
instanc
attributesproperti
vs.
getter
and
settersinheritancemultipl
inheritancemag
method
and
oper
overloadingoop
,
inherit
exampleslotsclass
and
class
creationroad
to
metaclassesmetaclassesmetaclass
use
case
:
count
function
callsabstract
class
object-ori
program
``
certainli
not
everi
good
program
is
object-ori
,
and
not
everi
object-ori
program
is
good
.
''
(
bjarn
stroustrup
,
danish
comput
scientist
,
best
known
for
the
creation
and
the
develop
of
the
wide
use
c++
program
languag
.
)
``
object-ori
program
is
an
except
bad
idea
which
could
onli
have
origin
in
california
.
''
(
edsger
dijkstra
,
(
dutch
comput
scientist
,
1930-2002
)
dijkstra
also
said
:
``
...
what
societi
over­whel­mingli
ask
for
is
snake
oil
.
Of
cours
,
the
snake
oil
ha
the
most
impress
name
-
otherwis
you
would
be
sell
noth
-
like
``
structur
analysi
and
design
''
,
``
softwar
engin
''
,
``
matur
model
''
,
``
manag
inform
system
''
,
``
integr
project
support
environ
''
``
object
orient
''
and
``
busi
process
re-engin
''
shoot
yourself
in
the
foot
by
mark
hammond
:
python
:
you
creat
a
gun
modul
,
a
gun
class
,
a
foot
modul
and
a
foot
class
.
after
realis
you
ca
n't
point
the
gun
at
the
foot
,
you
pass
a
refer
to
the
gun
to
a
foot
object
.
after
the
foot
is
blown
up
,
the
gun
object
remain
aliv
for
etern
,
readi
to
shoot
all
futur
feet
that
may
happen
to
appear
.
java
:
you
find
that
microsoft
and
sun
have
releas
incompat
class
librari
both
implement
gun
object
.
you
then
find
that
although
there
are
plenti
of
feet
object
implement
in
the
past
in
mani
other
languag
,
you
can
not
get
access
to
one
.
but
see
as
java
is
so
cool
,
you
do
n't
care
and
go
around
shoot
anyth
els
you
can
find
.
by
mark
hammond
python
object
orient
program
seminar
Do
you
know
,
whi
there
is
no
seminar
with
the
name
``
python
object
orient
program
seminar
''
?
think
about
the
acronym
!
thi
websit
is
support
by
:
linux
and
python
cours
and
seminar
thi
websit
is
free
of
annoy
ad
.
We
want
to
keep
it
like
thi
.
you
can
help
with
your
donat
:
the
need
for
donat
bernd
klein
on
facebook
search
thi
websit
:
thi
topic
in
german
/
deutsch
übersetzung
:
objekt
orientiert
programmierungpython
3thi
is
a
tutori
in
python3
,
but
thi
chapter
of
our
cours
is
avail
in
a
version
for
python
2.x
as
well
:
object
orient
program
in
python
2.x
book
a
dedic
cours
the
goal
of
thi
websit
is
to
provid
educ
materi
,
allow
you
to
learn
python
on
your
own
.
nevertheless
,
it
is
faster
and
more
effici
to
attend
a
``
real
''
python
cours
in
a
classroom
,
with
an
experienc
trainer
.
So
whi
not
attend
one
of
the
live
python
cours
in
pari
,
london
,
berlin
,
munich
or
lake
constanc
by
bernd
klein
,
the
author
of
thi
tutori
?
onsit
train
cours
let
us
come
to
your
compani
or
institut
and
train
your
employe
,
as
we
've
done
it
mani
time
in
amsterdam
(
the
netherland
)
,
berlin
(
germani
)
,
bern
(
switzerland
)
,
basel
(
switzerland
)
,
zurich
(
switzerland
)
,
locarno
(
switzerland
)
,
den
haag
(
the
hagu
)
,
hamburg
(
germani
)
,
frankfurt
(
germani
)
,
toronto
(
canada
)
,
edmonton
(
canada
)
,
munich
(
germani
)
and
mani
other
citi
.
We
do
train
cours
in
england
,
switzerland
,
liechtenstein
,
austria
,
germani
,
franc
,
belgium
,
the
netherland
,
luxembourg
,
poland
,
UK
,
itali
and
other
locat
in
europ
and
in
canada
.
thi
way
you
will
get
a
perfect
train
up
to
your
need
and
it
will
be
extrem
cost
effici
as
well
.
contact
us
so
we
can
defin
and
find
the
best
cours
curriculum
to
meet
your
need
,
and
schedul
cours
session
to
be
held
at
your
locat
.
skill
python
programm
you
can
hire
skill
python
programm
or
even
a
skill
team
of
python
develop
to
work
exclus
on
your
project
.
contact
us
,
if
you
want
more
inform
.
quot
of
the
day
:
''
If
programm
deserv
to
be
reward
for
creat
innov
program
,
by
the
same
token
they
deserv
to
be
punish
if
they
restrict
the
use
of
these
programs.
``
(
richard
stallmann
)
data
protect
declar
data
protect
declar
previou
chapter
:
test
,
doctest
,
unittest
next
chapter
:
class
and
instanc
attribut
object-ori
program
gener
introduct
though
python
is
an
object-ori
languag
without
fuss
or
quibbl
,
we
have
so
far
intent
avoid
the
treatment
of
object-ori
program
(
oop
)
in
the
previou
chapter
of
our
python
tutori
.
We
skip
oop
,
becaus
we
are
convinc
that
it
is
easier
and
more
fun
to
start
learn
python
without
have
to
know
about
all
the
detail
of
object-ori
program
.
but
even
though
we
have
avoid
oop
,
it
ha
nevertheless
alway
been
present
in
the
exercis
and
exampl
of
our
cours
.
We
use
object
and
method
from
class
without
properli
explain
their
oop
background
.
In
thi
chapter
,
we
will
catch
up
on
what
ha
been
miss
so
far
.
We
will
provid
an
introduct
into
the
principl
of
object
orient
program
in
gener
and
into
the
specif
of
the
oop
approach
of
python
.
oop
is
one
of
the
most
power
tool
of
python
,
but
nevertheless
you
do
n't
have
to
use
it
,
i.e
.
you
can
write
power
and
effici
program
without
it
as
well
.
though
mani
comput
scientist
and
programm
consid
oop
to
be
a
modern
program
paradigm
,
the
root
go
back
to
1960
.
the
first
program
languag
to
use
object
wa
simula
67
.
As
the
name
impli
,
simula
67
wa
introduc
in
the
year
1967
.
A
major
breakthrough
for
object-ori
program
came
with
the
program
languag
smalltalk
in
the
1970
.
you
will
learn
to
know
the
four
major
principl
of
object-orient
and
the
way
python
deal
with
them
in
the
next
section
of
thi
tutori
on
object-ori
program
:
encapsul
data
abstract
polymorph
inherit
befor
we
start
with
the
section
on
the
way
oop
is
use
in
python
,
we
want
to
give
you
a
gener
idea
about
object-ori
program
.
for
thi
purpos
,
we
would
like
to
draw
your
attent
to
a
public
librari
.
let
's
think
about
a
huge
one
,
like
the
``
british
librari
''
in
london
or
the
``
new
york
public
librari
''
in
new
york
.
If
it
help
,
you
can
imagin
the
librari
in
pari
,
berlin
,
ottawa
or
toronto1
as
well
.
each
of
these
contain
an
organ
collect
of
book
,
period
,
newspap
,
audiobook
,
film
and
so
on
.
gener
,
there
are
two
oppos
way
of
keep
the
stock
in
a
librari
.
you
can
use
a
``
close
access
''
method
that
is
the
stock
is
not
display
on
open
shelv
.
In
thi
system
,
train
staff
bring
the
book
and
other
public
to
the
user
on
demand
.
anoth
way
of
run
a
librari
is
open-access
shelv
,
also
known
as
``
open
shelv
''
.
``
open
''
mean
open
to
all
the
user
of
the
librari
not
onli
special
train
staff
.
In
thi
case
the
book
are
openli
display
.
imper
languag
like
C
could
be
seen
as
open-access
shelv
librari
.
the
user
can
do
everyth
.
It
's
up
to
the
user
to
find
the
book
and
to
put
them
back
at
the
right
shelf
.
even
though
thi
is
great
for
the
user
,
it
might
lead
to
seriou
problem
in
the
long
run
.
for
exampl
some
book
will
be
misplac
,
so
it
's
hard
to
find
them
again
.
As
you
may
have
guess
alreadi
,
``
close
access
''
can
be
compar
to
object
orient
program
.
the
analog
can
be
seen
like
thi
:
the
book
and
other
public
,
which
a
librari
offer
,
are
like
the
data
in
an
object-ori
program
.
access
to
the
book
is
restrict
like
access
to
the
data
is
restrict
in
oop
.
get
or
return
a
book
is
onli
possibl
via
the
staff
.
the
staff
function
like
the
method
in
oop
,
which
control
the
access
to
the
data
.
So
,
the
data
,
-
often
call
attribut
,
-
in
such
a
program
can
be
seen
as
be
hidden
and
protect
by
a
shell
,
and
it
can
onli
be
access
by
special
function
,
usual
call
method
in
the
oop
context
.
put
the
data
behind
a
``
shell
''
is
call
encapsul
.
So
a
librari
can
be
regard
as
a
class
and
a
book
is
an
instanc
or
an
object
of
thi
class
.
gener
speak
,
an
object
is
defin
by
a
class
.
A
class
is
a
formal
descript
of
how
an
object
is
design
,
i.e
.
which
attribut
and
method
it
ha
.
these
object
are
call
instanc
as
well
.
the
express
are
in
most
case
use
synonym
.
A
class
should
not
be
confus
with
an
object
.
oop
in
python
first-class
everyth
even
though
we
have
n't
talk
about
class
and
object
orient
in
previou
chapter
,
we
have
work
with
class
all
the
time
.
In
fact
,
everyth
is
a
class
in
python
.
guido
van
rossum
ha
design
the
languag
accord
to
the
principl
``
first-class
everyth
''
.
He
wrote
:
``
one
of
my
goal
for
python
wa
to
make
it
so
that
all
object
were
``
first
class
.
''
By
thi
,
I
meant
that
I
want
all
object
that
could
be
name
in
the
languag
(
e.g.
,
integ
,
string
,
function
,
class
,
modul
,
method
,
and
so
on
)
to
have
equal
statu
.
that
is
,
they
can
be
assign
to
variabl
,
place
in
list
,
store
in
dictionari
,
pass
as
argument
,
and
so
forth
.
''
(
blog
,
the
histori
of
python
,
februari
27
,
2009
)
thi
mean
that
``
everyth
''
is
treat
the
same
way
,
everyth
is
a
class
:
function
and
method
are
valu
just
like
list
,
integ
or
float
.
each
of
these
are
instanc
of
their
correspond
class
.
>
>
>
x
=
42
>
>
>
type
(
x
)
<
class
'int
'
>
>
>
>
y
=
4.34
>
>
>
type
(
y
)
<
class
'float
'
>
>
>
>
def
f
(
x
)
:
...
return
x
+
1
...
>
>
>
type
(
f
)
<
class
'function
'
>
>
>
>
import
math
>
>
>
type
(
math
)
<
class
'modul
'
>
>
>
>
one
of
the
mani
integr
class
in
python
is
the
list
class
,
which
we
have
quit
often
use
in
our
exercis
and
exampl
.
the
list
class
provid
a
wealth
of
method
to
build
list
,
to
access
and
chang
element
,
or
to
remov
element
:
>
>
>
x
=
[
3,6,9
]
>
>
>
y
=
[
45
,
``
abc
''
]
>
>
>
print
(
x
[
1
]
)
6
>
>
>
x
[
1
]
=
99
>
>
>
x.append
(
42
)
>
>
>
last
=
y.pop
(
)
>
>
>
print
(
last
)
abc
>
>
>
the
variabl
x
and
y
of
the
previou
exampl
denot
two
instanc
of
the
list
class
.
In
simplifi
term
,
we
have
said
so
far
that
``
x
and
y
are
list
''
.
We
will
use
the
term
``
object
''
and
``
instanc
''
synonym
in
the
follow
chapter
,
as
it
is
often
done.2
pop
and
append
of
the
previou
exampl
are
method
of
the
list
class
.
pop
return
the
most
upper
(
or
you
might
think
of
it
as
the
``
rightest
''
)
element
of
the
list
and
remov
thi
element
from
the
list
.
We
will
not
explain
how
python
ha
implement
list
intern
.
We
do
n't
need
thi
inform
,
becaus
the
list
class
provid
us
with
all
the
necessari
method
to
access
the
data
indirectli
.
thi
mean
that
the
encapsul
detail
are
encapsul
.
We
will
learn
about
encapsul
later
.
A
minim
class
in
python
We
will
design
and
use
a
robot
class
in
python
as
an
exampl
to
demonstr
the
most
import
term
and
idea
of
object
orient
.
We
will
start
with
the
simplest
class
in
python
.
class
robot
:
pass
We
can
realiz
the
fundament
syntact
structur
of
a
class
in
python
:
A
class
consist
of
two
part
:
the
header
and
the
bodi
.
the
header
usual
consist
of
just
one
line
of
code
.
It
begin
with
the
keyword
``
class
''
follow
by
a
blank
and
an
arbitrari
name
for
the
class
.
the
class
name
is
``
robot
''
in
our
case
.
the
class
name
is
follow
by
a
list
of
other
class
name
,
which
are
class
from
which
the
defin
class
inherit
from
.
these
class
are
call
superclass
,
base
class
or
sometim
parent
class
.
If
you
look
at
our
exampl
,
you
will
see
that
thi
list
of
superclass
is
not
obligatori
.
you
do
n't
have
to
bother
about
inherit
and
superclass
for
the
time
be
.
We
will
introduc
them
later
.
the
bodi
of
a
class
consist
of
an
indent
block
of
statement
.
In
our
case
a
singl
statement
,
the
``
pass
''
statement
.
A
class
object
is
creat
,
when
the
definit
is
left
normal
,
i.e
.
via
the
end
.
thi
is
basic
a
wrapper
around
the
content
of
the
namespac
creat
by
the
class
definit
.
It
's
hard
to
believ
,
especi
for
c++
or
java
programm
,
but
we
have
alreadi
defin
a
complet
class
with
just
three
word
and
two
line
of
code
.
We
are
capabl
of
use
thi
class
as
well
:
class
robot
:
pass
if
__name__
==
``
__main__
''
:
x
=
robot
(
)
y
=
robot
(
)
y2
=
y
print
(
y
==
y2
)
print
(
y
==
x
)
We
have
creat
two
differ
robot
x
and
y
in
our
exampl
.
besid
thi
,
we
have
creat
a
refer
y2
to
y
,
i.e
.
y2
is
an
alia
name
for
y
.
the
output
of
thi
exampl
program
look
like
thi
:
true
fals
attribut
those
who
have
learn
alreadi
anoth
object-ori
languag
,
will
have
realiz
that
the
term
attribut
and
properti
are
usual
use
synonym
.
It
may
even
be
use
in
the
definit
of
an
attribut
,
like
wikipedia
doe
:
``
In
comput
,
an
attribut
is
a
specif
that
defin
a
properti
of
an
object
,
element
,
or
file
.
It
may
also
refer
to
or
set
the
specif
valu
for
a
given
instanc
of
such
.
''
even
in
normal
english
usag
the
word
``
attribut
''
and
``
properti
''
can
be
use
in
some
case
as
synonym
.
both
can
have
the
mean
``
An
attribut
,
featur
,
qualiti
,
or
characterist
of
someth
or
someon
''
.
usual
an
``
attribut
''
is
use
to
denot
a
specif
abil
or
characterist
which
someth
or
someon
ha
,
like
black
hair
,
no
hair
,
or
a
quick
percept
,
or
``
her
quick
to
grasp
new
task
''
.
So
,
think
a
while
about
your
outstand
attribut
.
what
about
your
``
outstand
properti
''
?
great
,
if
one
of
your
strong
point
is
your
abil
to
quickli
understand
and
adapt
to
new
situat
!
otherwis
,
you
would
not
learn
python
!
let
's
get
back
to
python
:
We
will
learn
later
that
properti
and
attribut
are
essenti
differ
thing
in
python
.
thi
subsect
of
our
tutori
is
about
attribut
in
python
.
So
far
our
robot
have
no
attribut
.
not
even
a
name
,
like
it
is
customari
for
ordinari
robot
,
is
n't
it
?
So
,
let
's
implement
a
name
attribut
.
``
type
design
''
,
``
build
year
''
and
so
on
are
easili
conceiv
as
further
attribut
as
well
.
3
attribut
are
creat
insid
of
a
class
definit
,
as
we
will
soon
learn
.
We
can
dynam
creat
arbitrari
new
attribut
for
exist
instanc
of
a
class
.
We
do
thi
by
join
an
arbitrari
name
to
the
instanc
name
,
separ
by
a
dot
``
.
''
.
In
the
follow
exampl
,
we
demonstr
thi
by
creat
an
attribut
for
the
name
and
the
build
year
:
>
>
>
class
robot
:
...
pass
...
>
>
>
x
=
robot
(
)
>
>
>
y
=
robot
(
)
>
>
>
>
>
>
x.name
=
``
marvin
''
>
>
>
x.build_year
=
``
1979
''
>
>
>
>
>
>
y.name
=
``
caliban
''
>
>
>
y.build_year
=
``
1993
''
>
>
>
>
>
>
print
(
x.name
)
marvin
>
>
>
print
(
y.build_year
)
1993
>
>
>
As
we
have
said
befor
:
thi
is
not
the
way
to
properli
creat
instanc
attribut
.
We
introduc
thi
exampl
,
becaus
we
think
that
it
may
help
to
make
the
follow
explan
easier
to
understand
.
If
you
want
to
know
,
what
's
happen
intern
:
the
instanc
possess
dictionari
__dict__
,
which
they
use
to
store
their
attribut
and
their
correspond
valu
:
>
>
>
x.__dict__
{
'name
'
:
'marvin
'
,
'build_year
'
:
'1979
'
}
>
>
>
y.__dict__
{
'name
'
:
'caliban
'
,
'build_year
'
:
'1993
'
}
attribut
can
be
bound
to
class
name
as
well
.
In
thi
case
,
each
instanc
will
possess
thi
name
as
well
.
watch
out
,
what
happen
,
if
you
assign
the
same
name
to
an
instanc
:
>
>
>
class
robot
(
object
)
:
...
pass
...
>
>
>
x
=
robot
(
)
>
>
>
robot.brand
=
``
kuka
''
>
>
>
x.brand
'kuka
'
>
>
>
x.brand
=
``
thale
''
>
>
>
robot.brand
'kuka
'
>
>
>
y
=
robot
(
)
>
>
>
y.brand
'kuka
'
>
>
>
robot.brand
=
``
thale
''
>
>
>
y.brand
'thale
'
>
>
>
x.brand
'thale
'
If
you
look
at
the
__dict__
dictionari
,
you
can
see
what
's
happen
.
>
>
>
x.__dict__
{
'brand
'
:
'thale
'
}
>
>
>
y.__dict__
{
}
>
>
>
>
>
>
robot.__dict__
mappingproxi
(
{
'__module__
'
:
'__main__
'
,
'__weakref__
'
:
,
'__doc__
'
:
none
,
'__dict__
'
:
,
'brand
'
:
'thale
'
}
)
If
you
tri
to
access
y.brand
,
python
check
first
,
if
``
brand
''
is
a
key
of
the
y.__dict__
dictionari
.
If
it
is
not
,
python
check
,
if
``
brand
''
is
a
key
of
the
robot.__dict__
.
If
so
,
the
valu
can
be
retriev
.
If
an
attribut
name
is
not
in
includ
in
either
of
the
dictionari
,
the
attribut
name
is
not
defin
.
If
you
tri
to
access
a
non-exist
attribut
,
you
will
rais
an
attributeerror
:
>
>
>
x.energi
traceback
(
most
recent
call
last
)
:
file
``
<
stdin
>
''
,
line
1
,
in
attributeerror
:
'robot
'
object
ha
no
attribut
'energi
'
>
>
>
By
use
the
function
getattr
,
you
can
prevent
thi
except
,
if
you
provid
a
default
valu
as
the
third
argument
:
>
>
>
getattr
(
x
,
'energi
'
,
100
)
100
>
>
>
bind
attribut
to
object
is
a
gener
concept
in
python
.
even
function
name
can
be
attribut
.
you
can
bind
an
attribut
to
a
function
name
in
the
same
way
,
we
have
done
so
far
to
other
instanc
of
class
:
>
>
>
def
f
(
x
)
:
...
return
42
...
>
>
>
f.x
=
42
>
>
>
print
(
f.x
)
42
>
>
>
thi
can
be
use
as
a
replac
for
the
static
function
variabl
of
C
and
c++
,
which
are
not
possibl
in
python
.
We
use
a
counter
attribut
in
the
follow
exampl
:
def
f
(
x
)
:
f.counter
=
getattr
(
f
,
``
counter
''
,
0
)
+
1
return
``
monti
python
''
for
i
in
rang
(
10
)
:
f
(
i
)
print
(
f.counter
)
If
you
call
thi
littl
script
,
it
will
output
10
.
there
may
some
uncertainti
aris
at
thi
point
.
It
is
possibl
to
assign
attribut
to
most
class
instanc
,
but
thi
ha
noth
to
do
with
defin
class
.
We
will
see
soon
how
to
assign
attribut
when
we
defin
a
class
.
To
properli
creat
instanc
of
class
we
also
need
method
.
you
will
learn
in
the
follow
subsect
of
our
python
tutori
,
how
you
can
defin
method
.
method
We
will
demonstr
now
,
how
we
can
defin
method
in
class
.
method
in
python
are
essenti
function
in
accord
with
guido
's
say
``
first-class
everyth
''
.
let
's
defin
a
function
``
hi
''
,
which
take
an
object
``
obj
''
as
an
argument
and
assum
that
thi
object
ha
an
attribut
``
name
''
.
We
will
also
defin
again
our
basic
robot
class
:
def
hi
(
obj
)
:
print
(
``
Hi
,
I
am
``
+
obj.nam
+
``
!
''
)
class
robot
:
pass
x
=
robot
(
)
x.name
=
``
marvin
''
hi
(
x
)
If
we
call
thi
code
,
we
get
the
result
Hi
,
I
am
marvin
!
We
will
now
bind
the
function
„
hi
“
to
a
class
attribut
„
say_hi
“
!
def
hi
(
obj
)
:
print
(
``
Hi
,
I
am
``
+
obj.nam
)
class
robot
:
say_hi
=
hi
x
=
robot
(
)
x.name
=
``
marvin
''
robot.say_hi
(
x
)
``
say_hi
''
is
call
a
method
.
usual
,
it
will
be
call
like
thi
:
x.say_hi
(
)
It
is
possibl
to
defin
method
like
thi
,
but
you
should
n't
do
it
.
the
proper
way
to
do
it
:
instead
of
defin
a
function
outsid
of
a
class
definit
and
bind
it
to
a
class
attribut
,
we
defin
a
method
directli
insid
(
indent
)
of
a
class
definit
.
A
method
is
``
just
''
a
function
which
is
defin
insid
of
a
class
.
the
first
paramet
is
use
a
refer
to
the
call
instanc
.
thi
paramet
is
usual
call
self
.
self
correspond
to
the
robot
object
x
.
We
have
seen
that
a
method
differ
from
a
function
onli
in
two
aspect
:
It
belong
to
a
class
,
and
it
is
defin
within
a
class
the
first
paramet
in
the
definit
of
a
method
ha
to
be
a
refer
to
the
instanc
,
which
call
the
method
.
thi
paramet
is
usual
call
``
self
''
.
As
a
matter
of
fact
,
``
self
''
is
not
a
python
keyword
.
It
's
just
a
name
convent
!
So
c++
or
java
programm
are
free
to
call
it
``
thi
''
,
but
thi
way
they
are
risk
that
other
might
have
greater
difficulti
in
understand
their
code
!
most
other
object-ori
program
languag
pass
the
refer
to
the
object
(
self
)
as
a
hidden
paramet
to
the
method
.
you
saw
befor
that
the
call
robot.say_hi
(
x
)
''
.
and
``
x.say_hi
(
)
''
are
equival
.
``
x.say_hi
(
)
''
can
be
seen
as
an
``
abbrevi
''
form
,
i.e
.
python
automat
bind
it
to
the
instanc
name
.
besid
thi
``
x.say_hi
(
)
''
is
the
usual
way
to
call
method
in
python
and
in
other
object
orient
languag
.
for
a
class
C
,
an
instanc
x
of
C
and
a
method
m
of
C
the
follow
three
method
call
are
equival
:
type
(
x
)
.m
(
x
,
...
)
c.m
(
x
,
...
)
x.m
(
...
)
befor
you
proceed
with
the
follow
text
,
you
may
mull
over
the
previou
exampl
for
awhil
.
can
you
figur
out
,
what
is
wrong
in
the
design
?
there
is
more
than
one
thing
about
thi
code
,
which
may
disturb
you
,
but
the
essenti
problem
at
the
moment
is
the
fact
that
we
creat
a
robot
and
that
after
the
creation
,
we
should
n't
forget
about
name
it
!
If
we
forget
it
,
say_hi
will
rais
an
error
.
We
need
a
mechan
to
initi
an
instanc
right
after
it
creation
.
thi
is
the
__init__-method
,
which
we
cover
in
the
next
section
.
the
__init__
method
We
want
to
defin
the
attribut
of
an
instanc
right
after
it
creation
.
__init__
is
a
method
which
is
immedi
and
automat
call
after
an
instanc
ha
been
creat
.
thi
name
is
fix
and
it
is
not
possibl
to
chose
anoth
name
.
__init__
is
one
of
the
so-cal
magic
method
,
of
which
we
will
get
to
know
some
more
detail
later
.
the
__init__
method
is
use
to
initi
an
instanc
.
there
is
no
explicit
constructor
or
destructor
method
in
python
,
as
they
are
known
in
c++
and
java
.
the
__init__
method
can
be
anywher
in
a
class
definit
,
but
it
is
usual
the
first
method
of
a
class
,
i.e
.
it
follow
right
after
the
class
header
.
>
>
>
class
A
:
...
def
__init__
(
self
)
:
...
print
(
``
__init__
ha
been
execut
!
''
)
...
>
>
>
x
=
A
(
)
__init__
ha
been
execut
!
>
>
>
We
add
an
__init__-method
to
our
robot
class
:
class
robot
:
def
__init__
(
self
,
name=non
)
:
self.nam
=
name
def
say_hi
(
self
)
:
if
self.nam
:
print
(
``
Hi
,
I
am
``
+
self.nam
)
els
:
print
(
``
Hi
,
I
am
a
robot
without
a
name
''
)
x
=
robot
(
)
x.say_hi
(
)
y
=
robot
(
``
marvin
''
)
y.say_hi
(
)
thi
littl
program
return
the
follow
:
Hi
,
I
am
a
robot
without
a
name
Hi
,
I
am
marvin
data
abstract
,
data
encapsul
,
and
inform
hide
definit
of
term
data
abstract
,
data
encapsul
and
inform
hide
are
often
synonym
use
in
book
and
tutori
on
oop
.
but
there
is
a
differ
.
encapsul
is
seen
as
the
bundl
of
data
with
the
method
that
oper
on
that
data
.
inform
hide
on
the
other
hand
is
the
principl
that
some
intern
inform
or
data
is
``
hidden
''
,
so
that
it
ca
n't
be
accident
chang
.
data
encapsul
via
method
doe
n't
necessarili
mean
that
the
data
is
hidden
.
you
might
be
capabl
of
access
and
see
the
data
anyway
,
but
use
the
method
is
recommend
.
final
,
data
abstract
is
present
,
if
both
data
hide
and
data
encapsul
is
use
.
thi
mean
data
abstract
is
the
broader
term
:
data
abstract
=
data
encapsul
+
data
hide
encapsul
is
often
accomplish
by
provid
two
kind
of
method
for
attribut
:
the
method
for
retriev
or
access
the
valu
of
attribut
are
call
getter
method
.
getter
method
do
not
chang
the
valu
of
attribut
,
they
just
return
the
valu
.
the
method
use
for
chang
the
valu
of
attribut
are
call
setter
method
.
We
will
defin
now
a
robot
class
with
a
getter
and
a
setter
for
the
name
attribut
.
We
will
call
them
get_nam
and
set_nam
accordingli
.
class
robot
:
def
__init__
(
self
,
name=non
)
:
self.nam
=
name
def
say_hi
(
self
)
:
if
self.nam
:
print
(
``
Hi
,
I
am
``
+
self.nam
)
els
:
print
(
``
Hi
,
I
am
a
robot
without
a
name
''
)
def
set_nam
(
self
,
name
)
:
self.nam
=
name
def
get_nam
(
self
)
:
return
self.nam
x
=
robot
(
)
x.set_nam
(
``
henri
''
)
x.say_hi
(
)
y
=
robot
(
)
y.set_nam
(
x.get_nam
(
)
)
print
(
y.get_nam
(
)
)
hope
,
it
will
be
easi
for
you
to
see
,
that
thi
program
print
the
follow
:
Hi
,
I
am
henri
henri
befor
you
go
on
,
you
can
do
a
littl
exercis
.
you
can
add
an
addit
attribut
``
build_year
''
with
getter
and
setter
to
the
robot
class
.
class
robot
:
def
__init__
(
self
,
name=non
,
build_year=non
)
:
self.nam
=
name
self.build_year
=
build_year
def
say_hi
(
self
)
:
if
self.nam
:
print
(
``
Hi
,
I
am
``
+
self.nam
)
els
:
print
(
``
Hi
,
I
am
a
robot
without
a
name
''
)
if
self.build_year
:
print
(
``
I
wa
built
in
``
+
str
(
self.build_year
)
)
els
:
print
(
``
It
's
not
known
,
when
I
wa
creat
!
''
)
def
set_nam
(
self
,
name
)
:
self.nam
=
name
def
get_nam
(
self
)
:
return
self.nam
def
set_build_year
(
self
,
by
)
:
self.build_year
=
by
def
get_build_year
(
self
)
:
return
self.build_year
x
=
robot
(
``
henri
''
,
2008
)
y
=
robot
(
)
y.set_nam
(
``
marvin
''
)
x.say_hi
(
)
y.say_hi
(
)
the
program
return
the
follow
output
:
Hi
,
I
am
henri
I
wa
built
in
2008
Hi
,
I
am
marvin
It
's
not
known
,
when
I
wa
creat
!
there
is
still
someth
wrong
with
our
robot
class
.
the
zen
of
python
say
:
``
there
should
be
one
--
and
prefer
onli
one
--
obviou
way
to
do
it
.
''
our
robot
class
provid
us
with
two
way
to
access
or
to
chang
the
``
name
''
or
the
``
build_year
''
attribut
.
thi
can
be
prevent
by
use
privat
attribut
,
which
we
will
explain
later
.
__str__-
and
__repr__-method
We
will
have
a
short
break
in
our
treatis
on
data
abstract
for
a
quick
side-trip
.
We
want
to
introduc
two
import
magic
method
``
__str__
''
and
``
__repr__
''
,
which
we
will
need
in
futur
exampl
.
In
the
cours
of
thi
tutori
,
we
have
alreadi
encount
the
__str__
method
.
We
had
seen
that
we
can
depict
variou
data
as
string
by
use
the
str
function
,
which
use
``
magic
''
the
intern
__str__
method
of
the
correspond
data
type
.
__repr__i
similar
.
It
also
produc
a
string
represent
.
>
>
>
l
=
[
``
python
''
,
``
java
''
,
``
c++
''
,
``
perl
''
]
>
>
>
print
(
l
)
[
'python
'
,
'java
'
,
'
c++
'
,
'perl
'
]
>
>
>
str
(
l
)
``
[
'python
'
,
'java
'
,
'
c++
'
,
'perl
'
]
''
>
>
>
repr
(
l
)
``
[
'python
'
,
'java
'
,
'
c++
'
,
'perl
'
]
''
>
>
>
d
=
{
``
a
''
:3497
,
``
b
''
:8011
,
``
c
''
:8300
}
>
>
>
print
(
d
)
{
'
a
'
:
3497
,
'
c
'
:
8300
,
'
b
'
:
8011
}
>
>
>
str
(
d
)
``
{
'
a
'
:
3497
,
'
c
'
:
8300
,
'
b
'
:
8011
}
''
>
>
>
repr
(
d
)
``
{
'
a
'
:
3497
,
'
c
'
:
8300
,
'
b
'
:
8011
}
''
>
>
>
x
=
587.78
>
>
>
str
(
x
)
'587.78
'
>
>
>
repr
(
x
)
'587.78
'
>
>
>
If
you
appli
str
or
repr
to
an
object
,
python
is
look
for
a
correspond
method
__str__
or
__repr__
in
the
class
definit
of
the
object
.
If
the
method
doe
exist
,
it
will
be
call
.
In
the
follow
exampl
,
we
defin
a
class
A
,
have
neither
a
__str__
nor
a
__repr__
method
.
We
want
to
see
,
what
happen
,
if
we
use
print
directli
on
an
instanc
of
thi
class
,
or
if
we
appli
str
or
repr
to
thi
instanc
:
>
>
>
class
A
:
...
pass
...
>
>
>
a
=
A
(
)
>
>
>
print
(
a
)
<
__main__.a
object
at
0xb720a64c
>
>
>
>
print
(
repr
(
a
)
)
<
__main__.a
object
at
0xb720a64c
>
>
>
>
print
(
str
(
a
)
)
<
__main__.a
object
at
0xb720a64c
>
>
>
>
a
<
__main__.a
object
at
0xb720a64c
>
>
>
>
As
both
method
are
not
avail
,
python
use
the
default
output
for
our
object
``
a
''
.
If
a
class
ha
a
__str__
method
,
the
method
will
be
use
for
an
instanc
x
of
that
class
,
if
either
the
function
str
is
appli
to
it
or
if
it
is
use
in
a
print
function
.
__str__
will
not
be
use
,
if
repr
is
call
,
or
if
we
tri
to
output
the
valu
directli
in
an
interact
python
shell
:
>
>
>
class
A
:
...
def
__str__
(
self
)
:
...
return
``
42
''
...
>
>
>
a
=
A
(
)
>
>
>
print
(
repr
(
a
)
)
<
__main__.a
object
at
0xb720a4cc
>
>
>
>
print
(
str
(
a
)
)
42
>
>
>
a
<
__main__.a
object
at
0xb720a4cc
>
otherwis
,
if
a
class
ha
onli
the
__repr__
method
and
no
__str__
method
,
__repr__
will
be
appli
in
the
situat
,
where
__str__would
be
appli
,
if
it
were
avail
:
>
>
>
class
A
:
...
def
__repr__
(
self
)
:
...
return
``
42
''
...
>
>
>
a
=
A
(
)
>
>
>
print
(
repr
(
a
)
)
42
>
>
>
print
(
str
(
a
)
)
42
>
>
>
a
42
A
frequent
ask
question
is
when
to
use
__repr__
annd
when
__str__
.
__str__
is
alway
the
right
choic
,
if
the
output
should
be
for
the
end
user
or
in
other
word
,
if
it
should
be
nice
print
.
__repr__
on
the
other
hand
is
use
for
the
intern
represent
of
an
object
.
the
output
of
__repr__
should
be
-
if
feasibl
-
a
string
which
can
be
pars
by
the
python
interpret
.
the
result
of
thi
pars
is
in
an
equal
object
.
thi
mean
that
the
follow
should
be
true
for
an
object
``
o
''
:
o
==
eval
(
repr
(
o
)
)
thi
is
shown
in
the
follow
interact
python
session
:
>
>
>
l
=
[
3,8,9
]
>
>
>
s
=
repr
(
l
)
>
>
>
s
'
[
3
,
8
,
9
]
'
>
>
>
l
==
eval
(
s
)
true
>
>
>
l
==
eval
(
str
(
l
)
)
true
>
>
>
We
show
in
the
follow
exampl
with
the
datetim
modul
that
eval
can
onli
be
appli
on
the
string
creat
by
repr
:
>
>
>
import
datetim
>
>
>
today
=
datetime.datetime.now
(
)
>
>
>
str_
=
str
(
today
)
>
>
>
eval
(
str_
)
traceback
(
most
recent
call
last
)
:
file
``
<
stdin
>
''
,
line
1
,
in
<
modul
>
file
``
<
string
>
''
,
line
1
2014-01-26
17:35:39.215144
^
syntaxerror
:
invalid
token
>
>
>
repr_
=
repr
(
today
)
>
>
>
t
=
eval
(
repr_
)
>
>
>
type
(
t
)
<
class
'datetime.datetim
'
>
>
>
>
We
can
see
that
eval
(
repr_
)
return
again
a
datetime.datetim
object
.
the
string
creat
by
str
ca
n't
be
turn
into
a
datetime.datetim
object
by
pars
it
.
We
will
extend
our
robot
class
with
a
repr
method
.
We
drop
the
other
method
to
keep
thi
exampl
simpl
:
class
robot
:
def
__init__
(
self
,
name
,
build_year
)
:
self.nam
=
name
self.build_year
=
build_year
def
__repr__
(
self
)
:
return
``
robot
(
'
''
+
self.nam
+
``
'
,
``
+
str
(
self.build_year
)
+
``
)
''
if
__name__
==
``
__main__
''
:
x
=
robot
(
``
marvin
''
,
1979
)
x_str
=
str
(
x
)
print
(
x_str
)
print
(
``
type
of
x_str
:
``
,
type
(
x_str
)
)
new
=
eval
(
x_str
)
print
(
new
)
print
(
``
type
of
new
:
''
,
type
(
new
)
)
x_str
ha
the
valu
robot
(
'marvin
'
,
1979
)
.
eval
(
x_str
)
convert
it
again
into
a
robot
instanc
.
the
script
return
the
follow
output
:
$
python3
robot_class5.pi
robot
(
``
marvin
''
,1979
)
type
of
x_str
:
<
class
'str
'
>
robot
(
``
marvin
''
,1979
)
type
of
new
:
<
class
'__main__.robot
'
>
now
it
's
time
to
extend
our
class
with
a
user
friendli
__str__
method
:
class
robot
:
def
__init__
(
self
,
name
,
build_year
)
:
self.nam
=
name
self.build_year
=
build_year
def
__repr__
(
self
)
:
return
``
robot
(
'
''
+
self.nam
+
``
'
,
``
+
str
(
self.build_year
)
+
``
)
''
def
__str__
(
self
)
:
return
``
name
:
``
+
self.nam
+
``
,
build
year
:
``
+
str
(
self.build_year
)
if
__name__
==
``
__main__
''
:
x
=
robot
(
``
marvin
''
,
1979
)
x_str
=
str
(
x
)
print
(
x_str
)
print
(
``
type
of
x_str
:
``
,
type
(
x_str
)
)
new
=
eval
(
x_str
)
print
(
new
)
print
(
``
type
of
new
:
''
,
type
(
new
)
)
when
we
start
thi
program
,
we
can
see
that
it
is
not
possibl
to
convert
our
string
x_str
,
creat
via
str
(
x
)
,
into
a
robot
object
anymor
.
$
python3
robot_class6.pi
name
:
marvin
,
build
year
:
1979
type
of
x_str
:
<
class
'str
'
>
traceback
(
most
recent
call
last
)
:
file
``
robot_class6.pi
''
,
line
19
,
in
<
modul
>
new
=
eval
(
x_str
)
file
``
<
string
>
''
,
line
1
name
:
marvin
,
build
year
:
1979
^
syntaxerror
:
invalid
syntax
We
show
in
the
follow
program
that
x_repr
can
still
be
turn
into
a
robot
object
:
class
robot
:
def
__init__
(
self
,
name
,
build_year
)
:
self.nam
=
name
self.build_year
=
build_year
def
__repr__
(
self
)
:
return
``
robot
(
\
''
''
+
self.nam
+
``
\
''
,
''
+
str
(
self.build_year
)
+
``
)
''
def
__str__
(
self
)
:
return
``
name
:
``
+
self.nam
+
``
,
build
year
:
``
+
str
(
self.build_year
)
if
__name__
==
``
__main__
''
:
x
=
robot
(
``
marvin
''
,
1979
)
x_repr
=
repr
(
x
)
print
(
x_repr
,
type
(
x_repr
)
)
new
=
eval
(
x_repr
)
print
(
new
)
print
(
``
type
of
new
:
''
,
type
(
new
)
)
the
output
look
like
thi
:
$
python3
robot_class6b.pi
robot
(
``
marvin
''
,1979
)
<
class
'str
'
>
name
:
marvin
,
build
year
:
1979
type
of
new
:
<
class
'__main__.robot
'
>
public-
protected-
and
privat
attribut
who
doe
n't
know
those
trigger-happi
farmer
from
film
.
shoot
as
soon
as
somebodi
enter
their
properti
.
thi
``
somebodi
''
ha
of
cours
neglect
the
``
no
trespass
''
sign
,
indic
that
the
land
is
privat
properti
.
mayb
he
ha
n't
seen
the
sign
,
mayb
the
sign
is
hard
to
be
seen
?
imagin
a
jogger
,
run
the
same
cours
five
time
a
week
for
more
than
a
year
,
but
than
he
receiv
a
$
50
fine
for
trespass
in
the
winchest
fell
.
trespass
is
a
crimin
offenc
in
massachusett
.
He
wa
innoc
anyway
,
becaus
the
signag
wa
inadequ
in
the
area.4
even
though
no
trespass
sign
and
strict
law
do
protect
the
privat
properti
,
some
surround
their
properti
with
fenc
to
keep
off
unwant
``
visitor
''
.
should
the
fenc
keep
the
dog
in
the
yard
or
the
burglar
in
the
street
?
choos
your
fenc
:
wood
panel
fenc
,
post-and-rail
fenc
,
chain-link
fenc
with
or
without
barb
wire
and
so
on
.
We
have
a
similar
situat
in
the
design
of
object-ori
program
languag
.
the
first
decis
to
take
is
how
to
protect
the
data
which
should
be
privat
.
the
second
decis
is
what
to
do
if
trespass
,
i.e
.
access
or
chang
privat
data
,
occur
.
Of
cours
,
the
privat
data
may
be
protect
in
a
way
that
it
ca
n't
be
access
under
no
circumst
.
thi
is
hardli
possibl
in
practic
,
as
we
know
from
the
old
say
``
where
there
's
a
will
,
there
's
a
way
''
!
some
owner
allow
a
restrict
access
to
their
properti
.
jogger
or
hiker
may
find
sign
like
``
enter
at
your
own
risk
''
.
A
third
kind
of
properti
might
be
public
properti
like
street
or
park
,
where
it
is
perfectli
legal
to
be
.
We
have
the
same
classif
again
in
object-ori
program
:
privat
attribut
should
onli
be
use
by
the
owner
,
i.e
.
insid
of
the
class
definit
itself
.
protect
(
restrict
)
attribut
may
be
use
,
but
at
your
own
risk
.
essenti
,
thi
mean
that
they
should
onli
be
use
under
certain
condit
.
public
attribut
can
and
should
be
freeli
use
.
python
use
a
special
name
scheme
for
attribut
to
control
the
access
of
the
attribut
.
So
far
,
we
have
use
attribut
name
,
which
can
be
freeli
use
insid
or
outsid
of
a
class
definit
,
as
we
have
seen
.
thi
correspond
to
public
attribut
of
cours
.
there
are
two
way
to
restrict
the
access
to
class
attribut
:
first
,
we
can
prefix
an
attribut
name
with
a
lead
underscor
``
_
''
.
thi
mark
the
attribut
as
protect
.
It
tell
user
of
the
class
not
to
use
thi
attribut
unless
,
somebodi
write
a
subclass
.
We
will
learn
about
inherit
and
subclass
in
the
next
chapter
of
our
tutori
.
second
,
we
can
prefix
an
attribut
name
with
two
lead
underscor
``
__
''
.
the
attribut
is
now
inaccess
and
invis
from
outsid
.
It
's
neither
possibl
to
read
nor
write
to
those
attribut
except
insid
of
the
class
definit
itself.5
To
summar
the
attribut
type
:
name
type
mean
name
public
these
attribut
can
be
freeli
use
insid
or
outsid
of
a
class
definit
.
_name
protect
protect
attribut
should
not
be
use
outsid
of
the
class
definit
,
unless
insid
of
a
subclass
definit
.
__name
privat
thi
kind
of
attribut
is
inaccess
and
invis
.
It
's
neither
possibl
to
read
nor
write
to
those
attribut
,
except
insid
of
the
class
definit
itself
.
We
want
to
demonstr
the
behaviour
of
these
attribut
type
with
an
exampl
class
:
class
A
(
)
:
def
__init__
(
self
)
:
self.__priv
=
``
I
am
privat
''
self._prot
=
``
I
am
protect
''
self.pub
=
``
I
am
public
''
We
store
thi
class
(
attribute_tests.pi
)
and
test
it
behaviour
in
the
follow
interact
python
shell
:
>
>
>
from
attribute_test
import
A
>
>
>
x
=
A
(
)
>
>
>
x.pub
'
I
am
public
'
>
>
>
x.pub
=
x.pub
+
``
and
my
valu
can
be
chang
''
>
>
>
x.pub
'
I
am
public
and
my
valu
can
be
chang
'
>
>
>
x._prot
'
I
am
protect
'
>
>
>
x.__priv
traceback
(
most
recent
call
last
)
:
file
``
<
stdin
>
''
,
line
1
,
in
<
modul
>
attributeerror
:
'
A
'
object
ha
no
attribut
'__priv
'
>
>
>
the
error
messag
is
veri
interest
.
one
might
have
expect
a
messag
like
``
__priv
is
privat
''
.
We
get
the
messag
``
attributeerror
:
'
A
'
object
ha
no
attribut
'__priv
'
''
instead
,
which
look
like
a
``
lie
''
.
there
is
such
an
attribut
,
but
we
are
told
that
there
is
n't
.
thi
is
perfect
inform
hide
.
tell
a
user
that
an
attribut
name
is
privat
,
mean
that
we
make
some
inform
visibl
,
i.e
.
the
exist
or
non-exist
of
a
privat
variabl
.
our
next
task
consist
in
rewrit
our
robot
class
.
though
we
have
getter
and
setter
method
for
the
name
and
the
build_year
,
we
can
access
the
attribut
directli
as
well
,
becaus
we
have
defin
them
as
public
attribut
.
data
encapsul
mean
,
that
we
should
onli
be
abl
to
access
privat
attribut
via
getter
and
setter
.
We
have
to
replac
each
occurr
of
self.nam
and
self.build_year
by
self.__nam
and
self.__build_year
.
the
list
of
our
revis
class
:
class
robot
:
def
__init__
(
self
,
name=non
,
build_year=2000
)
:
self.__nam
=
name
self.__build_year
=
build_year
def
say_hi
(
self
)
:
if
self.__nam
:
print
(
``
Hi
,
I
am
``
+
self.__nam
)
els
:
print
(
``
Hi
,
I
am
a
robot
without
a
name
''
)
def
set_nam
(
self
,
name
)
:
self.__nam
=
name
def
get_nam
(
self
)
:
return
self.__nam
def
set_build_year
(
self
,
by
)
:
self.__build_year
=
by
def
get_build_year
(
self
)
:
return
self.__build_year
def
__repr__
(
self
)
:
return
``
robot
(
'
''
+
self.__nam
+
``
'
,
``
+
str
(
self.__build_year
)
+
``
)
''
def
__str__
(
self
)
:
return
``
name
:
``
+
self.__nam
+
``
,
build
year
:
``
+
str
(
self.__build_year
)
if
__name__
==
``
__main__
''
:
x
=
robot
(
``
marvin
''
,
1979
)
y
=
robot
(
``
caliban
''
,
1943
)
for
rob
in
[
x
,
y
]
:
rob.say_hi
(
)
if
rob.get_nam
(
)
==
``
caliban
''
:
rob.set_build_year
(
1993
)
print
(
``
I
wa
built
in
the
year
``
+
str
(
rob.get_build_year
(
)
)
+
``
!
''
)
We
get
the
follow
out
,
if
we
call
thi
program
:
Hi
,
I
am
marvin
I
wa
built
in
the
year
1979
!
Hi
,
I
am
caliban
I
wa
built
in
the
year
1993
!
everi
privat
attribut
of
our
class
ha
a
getter
and
a
setter
.
there
are
ide
for
object-ori
program
languag
,
who
automat
provid
getter
and
setter
for
everi
privat
attribut
as
soon
as
an
attribut
is
creat
.
thi
may
look
like
the
follow
class
:
class
A
(
)
:
def
__init__
(
self
,
x
,
y
)
:
self.__x
=
x
self.__i
=
y
def
getx
(
self
)
:
return
self.__x
def
geti
(
self
)
:
return
self.__i
def
setx
(
self
,
x
)
:
self.__x
=
x
def
seti
(
self
,
y
)
:
self.__i
=
y
there
are
at
least
two
good
reason
against
such
an
approach
.
first
of
all
not
everi
privat
attribut
need
to
be
access
from
outsid
.
second
,
we
will
creat
non-python
code
thi
way
,
as
you
will
learn
soon
.
destructor
what
we
said
about
constructor
hold
true
for
destructor
as
well
.
there
is
no
``
real
''
destructor
,
but
someth
similar
,
i.e
.
the
method
__del__
.
It
is
call
when
the
instanc
is
about
to
be
destroy
and
if
there
is
no
other
refer
to
thi
instanc
.
If
a
base
class
ha
a
__del__
(
)
method
,
the
deriv
class
's
__del__
(
)
method
,
if
ani
,
must
explicitli
call
it
to
ensur
proper
delet
of
the
base
class
part
of
the
instanc
.
the
follow
script
is
an
exampl
with
__init__
and
__del__
:
class
robot
(
)
:
def
__init__
(
self
,
name
)
:
print
(
name
+
``
ha
been
creat
!
''
)
def
__del__
(
self
)
:
print
(
``
robot
ha
been
destroy
''
)
if
__name__
==
``
__main__
''
:
x
=
robot
(
``
tik-tok
''
)
y
=
robot
(
``
jenkin
''
)
z
=
x
print
(
``
delet
x
''
)
del
x
print
(
``
delet
z
''
)
del
z
del
y
the
output
of
the
previou
program
:
$
python3
del_example.pi
tik-tok
ha
been
creat
!
jenkin
ha
been
creat
!
delet
x
delet
z
robot
ha
been
destroy
robot
ha
been
destroy
the
usag
of
the
__del__method
is
veri
problemat
.
If
we
chang
the
previou
code
to
person
the
delet
of
a
robot
,
we
creat
an
error
:
class
robot
(
)
:
def
__init__
(
self
,
name
)
:
print
(
name
+
``
ha
been
creat
!
''
)
def
__del__
(
self
)
:
print
(
self.nam
+
``
say
bye-by
!
''
)
if
__name__
==
``
__main__
''
:
x
=
robot
(
``
tik-tok
''
)
y
=
robot
(
``
jenkin
''
)
z
=
x
print
(
``
delet
x
''
)
del
x
print
(
``
delet
z
''
)
del
z
del
y
We
get
the
follow
output
with
error
messag
:
$
python3
del_example.pi
tik-tok
ha
been
creat
!
jenkin
ha
been
creat
!
delet
x
delet
z
except
attributeerror
:
``
'robot
'
object
ha
no
attribut
'name
'
''
in
<
bound
method
robot.__del__
of
<
__main__.robot
object
at
0xb71da3cc
>
>
ignor
except
attributeerror
:
``
'robot
'
object
ha
no
attribut
'name
'
''
in
<
bound
method
robot.__del__
of
<
__main__.robot
object
at
0xb71da36c
>
>
ignor
We
are
access
an
attribut
which
doe
n't
exist
anymor
.
We
will
learn
later
,
whi
thi
is
the
case
.
footnot
:
1
the
pictur
on
the
right
side
is
taken
in
the
librari
of
the
court
of
appeal
for
ontario
,
locat
downtown
toronto
in
histor
osgood
hall
2
``
object
are
python
's
abstract
for
data
.
all
data
in
a
python
program
is
repres
by
object
or
by
relat
between
object
.
(
In
a
sens
,
and
in
conform
to
von
neumann
's
model
of
a
``
store
program
comput
''
,
code
is
also
repres
by
object
.
)
everi
object
ha
an
ident
,
a
type
and
a
valu
.
''
(
excerpt
from
the
offici
python
languag
refer
)
3
``
attribut
''
stem
from
the
latin
verb
``
attribuer
''
which
mean
``
to
associ
with
''
4
http
:
//www.wickedlocal.com/x937072506/tjogger-ticketed-for-trespassing-in-the-winchester-fells-kicks-back
5
there
is
a
way
to
access
a
privat
attribut
directli
.
In
our
exampl
,
we
can
do
it
like
thi
:
x._robot__build_year
you
should
n't
do
thi
under
ani
circumst
!
previou
chapter
:
test
,
doctest
,
unittest
next
chapter
:
class
and
instanc
attribut
©
2011
-
2018
,
bernd
klein
,
bodenseo
;
design
by
denis
mitchinson
adapt
for
python-course.eu
by
bernd
klein
