numer
&
scientif
comput
with
python
:
data
visual
with
panda
and
python
numer
python
cours
numer
program
numpi
introductioncr
numpi
arraysdata
type
object
,
dtypenumer
oper
on
numpi
arrayschang
the
dimens
of
arrayspython
,
numpi
and
probabilityweight
choic
and
weight
samplescr
of
synthet
test
databoolean
mask
of
arraysmatrix
arithmeticread
and
write
ndarraysmatplotlib
introductionspin
and
tickslegend
and
annotationsmultipl
figur
and
axeshistogramscontour
plotspython
imag
process
tutorialimag
process
techniquespanda
tutorialpanda
dataframespanda
data
filesd
with
nanbin
datapanda
tutori
continu
:
multi-level
indexingdata
visual
with
panda
and
pythonpython
,
date
and
timepython
,
panda
and
timeserieslinear
combin
python
In
greek
mytholog
,
python
is
the
name
of
a
a
huge
serpent
and
sometim
a
dragon
.
python
had
been
kill
by
the
god
apollo
at
delphi
.
python
wa
creat
out
of
the
slime
and
mud
left
after
the
great
flood
.
He
wa
appoint
by
gaia
(
mother
earth
)
to
guard
the
oracl
of
delphi
,
known
as
pytho
.
the
program
languag
python
ha
not
been
creat
out
of
slime
and
mud
but
out
of
the
program
languag
abc
.
It
ha
been
devis
by
a
dutch
programm
,
name
guido
van
rossum
,
in
amsterdam
.
origin
of
python
guido
van
rossum
wrote
the
follow
about
the
origin
of
python
in
a
foreword
for
the
book
``
program
python
''
by
mark
lutz
in
1996
:
``
over
six
year
ago
,
in
decemb
1989
,
I
wa
look
for
a
``
hobbi
''
program
project
that
would
keep
me
occupi
dure
the
week
around
christma
.
My
offic
(
a
government-run
research
lab
in
amsterdam
)
would
be
close
,
but
I
had
a
home
comput
,
and
not
much
els
on
my
hand
.
I
decid
to
write
an
interpret
for
the
new
script
languag
I
had
been
think
about
late
:
a
descend
of
abc
that
would
appeal
to
unix/c
hacker
.
I
chose
python
as
a
work
titl
for
the
project
,
be
in
a
slightli
irrever
mood
(
and
a
big
fan
of
monti
python
's
fli
circu
)
.
''
thi
websit
is
free
of
annoy
ad
.
We
want
to
keep
it
like
thi
.
you
can
help
with
your
donat
:
the
need
for
donat
bernd
klein
on
facebook
search
thi
websit
:
thi
topic
in
german
/
deutsch
übersetzung
:
daten-visualisierung
in
panda
und
pythonclassroom
train
cours
thi
websit
contain
a
free
and
extens
onlin
tutori
by
bernd
klein
,
use
materi
from
hi
classroom
python
train
cours
.
If
you
are
interest
in
an
instructor-l
classroom
train
cours
,
you
may
have
a
look
at
the
python
class
by
bernd
klein
at
bodenseo
.
©
kabliczech
-
fotolia.com
quot
of
the
day
:
''
If
it
's
a
good
idea
,
go
ahead
and
do
it
.
It
is
much
easier
to
apolog
than
it
is
to
get
permiss
.
''
(
grace
murray
)
If
you
have
the
choic
work
with
python
2
or
python
3
,
we
recomend
to
switch
to
python
3
!
you
can
read
our
python
tutori
to
see
what
the
differ
are
.
data
protect
declar
data
protect
declar
previou
chapter
:
panda
tutori
continu
:
multi-level
index
next
chapter
:
python
,
date
and
time
data
visual
with
pandasintroduct
It
is
seldom
a
good
idea
to
present
your
scientif
or
busi
data
sole
in
row
and
column
of
number
.
We
rather
use
variou
kind
of
diagram
to
visual
our
data
.
thi
make
the
commun
of
inform
more
effici
and
easi
to
grasp
.
In
other
word
,
it
make
complex
data
more
access
and
understand
.
the
numer
data
can
be
graphic
encod
with
line
chart
,
bar
chart
,
pie
chart
,
histogram
,
scatterplot
and
other
.
We
have
alreadi
seen
the
power
capabl
of
for
creat
publication-qu
plot
.
matplotlib
is
a
low-level
tool
to
achiev
thi
goal
,
becaus
you
have
to
constru
your
plot
by
ad
up
basic
compon
,
like
legend
,
tick
label
,
contour
and
so
on
.
panda
provid
variou
plot
possibl
,
which
make
like
a
lot
easier
.
We
will
start
with
an
exampl
for
a
line
plot
.
line
plot
in
pandasseri
both
the
panda
seri
and
datafram
object
support
a
plot
method
.
you
can
see
a
simpl
exampl
of
a
line
plot
with
for
a
seri
object
.
We
use
a
simpl
python
list
``
data
''
as
the
data
for
the
rang
.
the
index
will
be
use
for
the
x
valu
,
or
the
domain
.
import
panda
as
pd
data
=
[
100
,
120
,
140
,
180
,
200
,
210
,
214
]
s
=
pd.seri
(
data
,
index=rang
(
len
(
data
)
)
)
s.plot
(
)
the
abov
python
code
return
the
follow
:
<
matplotlib.axes._subplots.axessubplot
at
0x7fe98be8a710
>
It
is
possibl
to
suppress
the
usag
of
the
index
by
set
the
keyword
paramet
``
use_index
''
to
fals
.
In
our
exampl
thi
will
give
us
the
same
result
:
s.plot
(
use_index=fals
)
the
abov
python
code
return
the
follow
result
:
<
matplotlib.axes._subplots.axessubplot
at
0x7fe98be8a710
>
We
will
experi
now
with
a
seri
which
ha
an
index
consist
of
alphabet
valu
.
fruit
=
[
'appl
'
,
'orang
'
,
'cherri
'
,
'pear
'
]
quantiti
=
[
20
,
33
,
52
,
10
]
S
=
pd.seri
(
quantiti
,
index=fruit
)
s.plot
(
)
We
receiv
the
follow
output
:
<
matplotlib.axes._subplots.axessubplot
at
0x7fe98be8a710
>
line
plot
in
dataframesw
will
introduc
now
the
plot
method
of
a
datafram
.
We
defin
a
dcitionari
with
the
popul
and
area
figur
.
thi
dictionari
can
be
use
to
creat
the
datafram
,
which
we
want
to
use
for
plot
:
import
panda
as
pd
citi
=
{
``
name
''
:
[
``
london
''
,
``
berlin
''
,
``
madrid
''
,
``
rome
''
,
``
pari
''
,
``
vienna
''
,
``
bucharest
''
,
``
hamburg
''
,
``
budapest
''
,
``
warsaw
''
,
``
barcelona
''
,
``
munich
''
,
``
milan
''
]
,
``
popul
''
:
[
8615246
,
3562166
,
3165235
,
2874038
,
2273305
,
1805681
,
1803425
,
1760433
,
1754000
,
1740119
,
1602386
,
1493900
,
1350680
]
,
``
area
''
:
[
1572
,
891.85
,
605.77
,
1285
,
105.4
,
414.6
,
228
,
755
,
525.2
,
517
,
101.9
,
310.4
,
181.8
]
}
city_fram
=
pd.datafram
(
citi
,
columns=
[
``
popul
''
,
``
area
''
]
,
index=c
[
``
name
''
]
)
print
(
city_fram
)
popul
area
london
8615246
1572.00
berlin
3562166
891.85
madrid
3165235
605.77
rome
2874038
1285.00
pari
2273305
105.40
vienna
1805681
414.60
bucharest
1803425
228.00
hamburg
1760433
755.00
budapest
1754000
525.20
warsaw
1740119
517.00
barcelona
1602386
101.90
munich
1493900
310.40
milan
1350680
181.80
the
follow
code
plot
our
datafram
city_fram
.
We
will
multipli
the
area
column
by
1000
,
becaus
otherwis
the
``
area
''
line
would
not
be
visibl
or
in
other
word
would
be
overlap
with
the
x
axi
:
city_fram
[
``
area
''
]
*=
1000
city_frame.plot
(
)
after
have
execut
the
python
code
abov
we
receiv
the
follow
:
<
matplotlib.axes._subplots.axessubplot
at
0x7fe9b13f2c50
>
thi
plot
is
not
come
up
to
our
expect
,
becaus
not
all
the
citi
name
appear
on
the
x
axi
.
We
can
chang
thi
by
defin
the
xtick
explicitli
with
``
rang
(
len
(
(
city_frame.index
)
)
''
.
furthermor
,
we
have
to
set
use_index
to
true
,
so
that
we
get
citi
name
and
not
number
from
0
to
len
(
(
city_frame.index
)
:
city_frame.plot
(
xticks=rang
(
len
(
city_frame.index
)
)
,
use_index=tru
)
thi
get
us
the
follow
result
:
<
matplotlib.axes._subplots.axessubplot
at
0x7fe983cd72e8
>
now
,
we
have
a
new
problem
.
the
citi
name
are
overlap
.
there
is
remedi
at
hand
for
thi
problem
as
well
.
We
can
rotat
the
string
by
90
degre
.
the
name
will
be
print
vertic
afterward
:
city_frame.plot
(
xticks=rang
(
len
(
city_frame.index
)
)
,
use_index=tru
,
rot=90
)
after
have
execut
the
python
code
abov
we
receiv
the
follow
output
:
<
matplotlib.axes._subplots.axessubplot
at
0x7fe98bbf6c88
>
use
twin
axesw
multipli
the
area
column
by
1000
to
get
a
proper
output
.
instead
of
thi
,
we
could
have
use
twin
axe
.
We
will
demonstr
thi
in
the
follow
exampl
.
We
will
recreat
the
city_fram
datafram
to
get
the
origin
area
column
:
city_fram
=
pd.datafram
(
citi
,
columns=
[
``
popul
''
,
``
area
''
]
,
index=c
[
``
name
''
]
)
print
(
city_fram
)
popul
area
london
8615246
1572.00
berlin
3562166
891.85
madrid
3165235
605.77
rome
2874038
1285.00
pari
2273305
105.40
vienna
1805681
414.60
bucharest
1803425
228.00
hamburg
1760433
755.00
budapest
1754000
525.20
warsaw
1740119
517.00
barcelona
1602386
101.90
munich
1493900
310.40
milan
1350680
181.80
To
get
a
twin
axe
represen
of
our
diagram
,
we
need
subplot
from
the
modul
matplotlib
and
the
function
``
twinx
''
:
import
matplotlib.pyplot
as
plt
fig
,
ax
=
plt.subplot
(
)
fig.suptitl
(
``
citi
statist
''
)
ax.set_ylabel
(
``
popul
''
)
ax.set_xlabel
(
``
citi
''
)
ax2
=
ax.twinx
(
)
ax2.set_ylabel
(
``
area
''
)
city_fram
[
``
popul
''
]
.plot
(
ax=ax
,
style=
''
b-
''
,
xticks=rang
(
len
(
city_frame.index
)
)
,
use_index=tru
,
rot=90
)
city_fram
[
``
area
''
]
.plot
(
ax=ax2
,
style=
''
g-
''
,
use_index=tru
,
rot=90
)
ax.legend
(
[
``
popul
number
''
]
,
loc=2
)
ax2.legend
(
loc=1
)
plt.show
(
)
We
can
also
creat
twin
axi
directli
in
panda
without
the
aid
of
matplotlib
.
We
demonstr
thi
in
the
code
of
the
follow
program
:
import
matplotlib.pyplot
as
plt
ax1=
city_fram
[
``
popul
''
]
.plot
(
style=
''
b-
''
,
xticks=rang
(
len
(
city_frame.index
)
)
,
use_index=tru
,
rot=90
)
ax2
=
ax1.twinx
(
)
city_fram
[
``
area
''
]
.plot
(
ax=ax2
,
style=
''
g-
''
,
use_index=tru
,
#
secondary_y=tru
,
rot=90
)
ax1.legend
(
loc
=
(
.7
,
.9
)
,
frameon
=
fals
)
ax2.legend
(
loc
=
(
.7
,
.85
)
,
frameon
=
fals
)
plt.show
(
)
multipl
Y
axeslet
's
add
anoth
axe
to
our
city_fram
.
We
will
add
a
column
with
the
popul
densiti
,
i.e
.
the
number
of
peopl
per
squar
kilometr
:
city_fram
[
``
densiti
''
]
=
city_fram
[
``
popul
''
]
/
city_fram
[
``
area
''
]
city_fram
the
abov
python
code
return
the
follow
:
popul
area
densiti
london
8615246
1572.00
5480.436387
berlin
3562166
891.85
3994.131300
madrid
3165235
605.77
5225.143206
rome
2874038
1285.00
2236.605447
pari
2273305
105.40
21568.358634
vienna
1805681
414.60
4355.236372
bucharest
1803425
228.00
7909.758772
hamburg
1760433
755.00
2331.699338
budapest
1754000
525.20
3339.680122
warsaw
1740119
517.00
3365.800774
barcelona
1602386
101.90
15725.083415
munich
1493900
310.40
4812.822165
milan
1350680
181.80
7429.482948
now
we
have
three
column
to
plot
.
for
thi
purpos
,
we
will
creat
three
axe
for
our
valu
:
import
matplotlib.pyplot
as
plt
fig
,
ax
=
plt.subplot
(
)
fig.suptitl
(
``
citi
statist
''
)
ax.set_ylabel
(
``
popul
''
)
ax.set_xlabel
(
``
citit
''
)
ax_area
,
ax_dens
=
ax.twinx
(
)
,
ax.twinx
(
)
ax_area.set_ylabel
(
``
area
''
)
ax_density.set_ylabel
(
``
densiti
''
)
rspine
=
ax_density.spin
[
'right
'
]
rspine.set_posit
(
(
'ax
'
,
1.25
)
)
ax_density.set_frame_on
(
true
)
ax_density.patch.set_vis
(
fals
)
fig.subplots_adjust
(
right=0.75
)
city_fram
[
``
popul
''
]
.plot
(
ax=ax
,
style=
''
b-
''
,
xticks=rang
(
len
(
city_frame.index
)
)
,
use_index=tru
,
rot=90
)
city_fram
[
``
area
''
]
.plot
(
ax=ax_area
,
style=
''
g-
''
,
use_index=tru
,
rot=90
)
city_fram
[
``
densiti
''
]
.plot
(
ax=ax_dens
,
style=
''
r-
''
,
use_index=tru
,
rot=90
)
plt.show
(
)
A
more
complex
examplew
use
the
previous
gain
knowledg
in
the
follow
exampl
.
We
use
a
file
with
visitor
statist
from
our
websit
python-course.eu
.
the
content
of
the
file
look
like
thi
:
month
year
``
uniqu
visitor
''
``
number
of
visit
''
page
hit
bandwidth
unit
jun
2010
11
13
42
290
2.63
MB
jul
2010
27
39
232
939
9.42
MB
aug
2010
75
87
207
1,096
17.37
MB
sep
2010
171
221
480
2,373
39.63
MB
...
apr
2018
434,346
663,327
1,143,762
7,723,268
377.56
GB
may
2018
402,390
619,993
1,124,517
7,307,779
394.72
GB
jun
2018
369,739
573,102
1,034,335
6,773,820
386.60
GB
jul
2018
352,670
552,519
967,778
6,551,347
375.86
GB
aug
2018
407,512
642,542
1,223,319
7,829,987
472.37
GB
sep
2018
463,937
703,327
1,187,224
8,468,723
514.46
GB
oct
2018
537,343
826,290
1,403,176
10,013,025
620.55
GB
nov
2018
514,072
781,335
1,295,594
9,487,834
642.16
GB
%
matplotlib
inlin
import
panda
as
pd
data_path
=
``
data1/
''
data
=
pd.read_csv
(
data_path
+
``
python_course_monthly_history.txt
''
,
quotechar=
'
''
'
,
thousands=
''
,
''
,
delimiter=r
''
\s+
''
)
def
unit_convert
(
x
)
:
valu
,
unit
=
x
if
unit
==
``
MB
''
:
valu
*=
1024
elif
unit
==
``
GB
''
:
valu
*=
1048576
#
i.e
.
1024
**2
return
valu
b_and_u=
data
[
[
``
bandwidth
''
,
``
unit
''
]
]
bandwidth
=
b_and_u.appli
(
unit_convert
,
axis=1
)
del
data
[
``
unit
''
]
data
[
``
bandwidth
''
]
=
bandwidth
month_year
=
data
[
[
``
month
''
,
``
year
''
]
]
month_year
=
month_year.appli
(
lambda
x
:
x
[
0
]
+
``
``
+
str
(
x
[
1
]
)
,
axis=1
)
data
[
``
month
''
]
=
month_year
del
data
[
``
year
''
]
data.set_index
(
``
month
''
,
inplace=tru
)
del
data
[
``
bandwidth
''
]
data
[
[
``
uniqu
visitor
''
,
``
number
of
visit
''
]
]
.plot
(
use_index=tru
,
rot=90
,
xticks=rang
(
1
,
len
(
data.index
)
,4
)
)
the
python
code
abov
return
the
follow
:
<
matplotlib.axes._subplots.axessubplot
at
0x7fe9836b27b8
>
ratio
=
pd.seri
(
data
[
``
number
of
visit
''
]
/
data
[
``
uniqu
visitor
''
]
,
index=data.index
)
ratio.plot
(
use_index=tru
,
xticks=rang
(
1
,
len
(
ratio.index
)
,4
)
,
rot=90
)
the
previou
python
code
return
the
follow
result
:
<
matplotlib.axes._subplots.axessubplot
at
0x7fe9838e5860
>
convert
string
column
to
floatsin
the
folder
``
data1
''
,
we
have
a
file
call
``
tiobe_programming_language_usage_nov2018.txt
''
with
a
rank
of
program
languag
by
usag
.
the
data
ha
been
collect
and
creat
by
tiob
in
novemb
2018
.
the
file
look
like
thi
:
posit
``
languag
''
percentag
1
java
16.748
%
2
C
14.396
%
3
c++
8.282
%
4
python
7.683
%
5
``
visual
basic
.net
''
6.490
%
6
C
#
3.952
%
7
javascript
2.655
%
8
php
2.376
%
9
sql
1.844
%
the
percentag
column
contain
string
with
a
percentag
sign
.
We
can
get
rid
of
thi
when
we
read
in
the
data
with
read_csv
.
all
we
have
to
do
is
defin
a
convert
function
,
which
we
to
read_csv
via
the
convert
dictionari
,
which
contain
column
name
as
key
and
refer
to
function
as
valu
.
def
strip_percentage_sign
(
x
)
:
return
float
(
x.strip
(
'
%
'
)
)
data_path
=
``
data1/
''
prog
=
pd.read_csv
(
data_path
+
``
tiobe_programming_language_usage_nov2018.txt
''
,
quotechar=
'
''
'
,
thousands=
''
,
''
,
index_col=1
,
converters=
{
'percentag
'
:
strip_percentage_sign
}
,
delimiter=r
''
\s+
''
)
del
prog
[
``
posit
''
]
print
(
progs.head
(
6
)
)
progs.plot
(
xticks=rang
(
1
,
len
(
progs.index
)
)
,
use_index=tru
,
rot=90
)
plt.show
(
)
percentag
languag
java
16.748
C
14.396
c++
8.282
python
7.683
visual
basic
.net
6.490
C
#
3.952
bar
plot
in
pandasto
creat
bar
plot
with
panda
is
as
easi
as
plot
line
plot
.
all
we
have
to
do
is
add
the
keyword
paramet
``
kind
''
to
the
plot
method
and
set
it
to
``
bar
''
.
A
simpl
exampl
import
panda
as
pd
data
=
[
100
,
120
,
140
,
180
,
200
,
210
,
214
]
s
=
pd.seri
(
data
,
index=rang
(
len
(
data
)
)
)
s.plot
(
kind=
''
bar
''
)
after
have
execut
the
python
code
abov
we
receiv
the
follow
result
:
<
matplotlib.axes._subplots.axessubplot
at
0x7fe98349a5c0
>
bar
plot
for
program
languag
usagelet
's
get
back
to
our
program
languag
rank
.
We
will
printout
now
a
bar
plot
of
the
six
most
use
program
languag
:
prog
[
:6
]
.plot
(
kind=
''
bar
''
)
the
abov
code
return
the
follow
output
:
<
matplotlib.axes._subplots.axessubplot
at
0x7fe983ac05c0
>
now
the
whole
chart
with
all
program
languag
:
progs.plot
(
kind=
''
bar
''
)
thi
get
us
the
follow
result
:
<
matplotlib.axes._subplots.axessubplot
at
0x7fe983a84208
>
color
A
bar
plotit
is
possibl
to
color
the
bar
indivu
by
assign
a
list
to
the
keyword
paramet
color
:
my_color
=
[
'
b
'
,
'
r
'
,
'
c
'
,
'
y
'
,
'
g
'
,
'm
'
]
prog
[
:6
]
.plot
(
kind=
''
bar
''
,
color=my_color
)
after
have
execut
the
python
code
abov
we
receiv
the
follow
:
<
matplotlib.axes._subplots.axessubplot
at
0x7fe9834509e8
>
pie
chart
diagram
in
pandasa
simpl
exampl
:
import
panda
as
pd
fruit
=
[
'appl
'
,
'pear
'
,
'cherri
'
,
'banana
'
]
seri
=
pd.seri
(
[
20
,
30
,
40
,
10
]
,
index=fruit
,
name='seri
'
)
series.plot.pi
(
figsize=
(
6
,
6
)
)
the
previou
python
code
return
the
follow
output
:
<
matplotlib.axes._subplots.axessubplot
at
0x7fe9832fe048
>
fruit
=
[
'appl
'
,
'pear
'
,
'cherri
'
,
'banana
'
]
seri
=
pd.seri
(
[
20
,
30
,
40
,
10
]
,
index=fruit
,
name='seri
'
)
explod
=
[
0
,
0.10
,
0.40
,
0.7
]
series.plot.pi
(
figsize=
(
6
,
6
)
,
explode=explod
)
the
previou
python
code
return
the
follow
:
<
matplotlib.axes._subplots.axessubplot
at
0x7fe983370198
>
We
will
replot
the
previou
bar
plot
as
a
pie
chart
plot
:
import
matplotlib.pyplot
as
plt
my_color
=
[
'
b
'
,
'
r
'
,
'
c
'
,
'
y
'
,
'
g
'
,
'm
'
]
progs.plot.pi
(
subplots=tru
,
legend=fals
)
after
have
execut
the
python
code
abov
we
receiv
the
follow
result
:
array
(
[
<
matplotlib.axes._subplots.axessubplot
object
at
0x7fe9832440b8
>
]
,
dtype=object
)
It
look
ugli
that
we
see
the
y
label
``
percentag
''
insid
our
pie
plot
.
We
can
remov
it
by
call
``
plt.ylabel
(
``
)
''
import
matplotlib.pyplot
as
plt
my_color
=
[
'
b
'
,
'
r
'
,
'
c
'
,
'
y
'
,
'
g
'
,
'm
'
]
progs.plot.pi
(
subplots=tru
,
legend=fals
)
plt.ylabel
(
``
)
the
python
code
abov
return
the
follow
:
<
matplotlib.text.text
at
0x7fe983117b70
>
previou
chapter
:
panda
tutori
continu
:
multi-level
index
next
chapter
:
python
,
date
and
time
©
2011
-
2018
,
bernd
klein
,
bodenseo
;
design
by
denis
mitchinson
adapt
for
python-course.eu
by
bernd
klein
