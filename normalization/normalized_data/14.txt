numer
&
scientif
comput
with
python
:
linear
combin
numer
python
cours
numer
program
numpi
introductioncr
numpi
arraysdata
type
object
,
dtypenumer
oper
on
numpi
arrayschang
the
dimens
of
arrayspython
,
numpi
and
probabilityweight
choic
and
weight
samplescr
of
synthet
test
databoolean
mask
of
arraysmatrix
arithmeticread
and
write
ndarraysmatplotlib
introductionspin
and
tickslegend
and
annotationsmultipl
figur
and
axeshistogramscontour
plotspython
imag
process
tutorialimag
process
techniquespanda
tutorialpanda
dataframespanda
data
filesd
with
nanbin
datapanda
tutori
continu
:
multi-level
indexingdata
visual
with
panda
and
pythonpython
,
date
and
timepython
,
panda
and
timeserieslinear
combin
python
In
greek
mytholog
,
python
is
the
name
of
a
a
huge
serpent
and
sometim
a
dragon
.
python
had
been
kill
by
the
god
apollo
at
delphi
.
python
wa
creat
out
of
the
slime
and
mud
left
after
the
great
flood
.
He
wa
appoint
by
gaia
(
mother
earth
)
to
guard
the
oracl
of
delphi
,
known
as
pytho
.
the
program
languag
python
ha
not
been
creat
out
of
slime
and
mud
but
out
of
the
program
languag
abc
.
It
ha
been
devis
by
a
dutch
programm
,
name
guido
van
rossum
,
in
amsterdam
.
origin
of
python
guido
van
rossum
wrote
the
follow
about
the
origin
of
python
in
a
foreword
for
the
book
``
program
python
''
by
mark
lutz
in
1996
:
``
over
six
year
ago
,
in
decemb
1989
,
I
wa
look
for
a
``
hobbi
''
program
project
that
would
keep
me
occupi
dure
the
week
around
christma
.
My
offic
(
a
government-run
research
lab
in
amsterdam
)
would
be
close
,
but
I
had
a
home
comput
,
and
not
much
els
on
my
hand
.
I
decid
to
write
an
interpret
for
the
new
script
languag
I
had
been
think
about
late
:
a
descend
of
abc
that
would
appeal
to
unix/c
hacker
.
I
chose
python
as
a
work
titl
for
the
project
,
be
in
a
slightli
irrever
mood
(
and
a
big
fan
of
monti
python
's
fli
circu
)
.
''
thi
websit
is
free
of
annoy
ad
.
We
want
to
keep
it
like
thi
.
you
can
help
with
your
donat
:
the
need
for
donat
bernd
klein
on
facebook
search
thi
websit
:
classroom
train
cours
thi
websit
contain
a
free
and
extens
onlin
tutori
by
bernd
klein
,
use
materi
from
hi
classroom
python
train
cours
.
If
you
are
interest
in
an
instructor-l
classroom
train
cours
,
you
may
have
a
look
at
the
python
class
by
bernd
klein
at
bodenseo
.
©
kabliczech
-
fotolia.com
quot
of
the
day
:
''
ani
program
is
onli
as
good
as
it
is
use
.
''
(
linu
torvald
)
If
you
have
the
choic
work
with
python
2
or
python
3
,
we
recomend
to
switch
to
python
3
!
you
can
read
our
python
tutori
to
see
what
the
differ
are
.
data
protect
declar
data
protect
declar
previou
chapter
:
python
,
panda
and
timeseri
linear
combin
definit
A
linear
combin
in
mathemat
is
an
express
construct
from
a
set
of
term
by
multipli
each
term
by
a
constant
and
ad
the
result
.
exampl
of
a
linear
combin
:
a
&
middot
x
+
b
&
middot
y
is
a
linear
combin
of
x
and
y
with
a
and
b
constant
.
gener
;
p
=
λ1
·
x1
+
λ2
·
x2
…
λn
·
xn
p
is
the
scalar
product
of
the
valu
x1
,
x2
…
xn
and
λ1
,
λ2
…
λn
are
call
scalar
.
In
most
applic
x1
,
x2
…
xn
are
vector
and
the
lambda
are
integ
or
real
number
.
(
for
those
,
who
prefer
it
mor
formal
:
x1
,
x2
…
xn
∈
V
and
V
is
a
vector
space
,
and
λ1
,
λ2
…
λn
∈
K
with
K
be
a
field
)
linear
combin
in
python
the
vector
y
=
(
3.21
,
1.77
,
3.65
)
can
be
easili
written
as
a
linear
combin
of
the
unit
vector
(
0,0,1
)
,
(
0,1,0
)
and
(
1,0,0
)
:
(
3.21
,
1.77
,
3.65
)
=
3.21
·
(
1,0,0
)
+
1.77
(
0,1,0
)
+
3.65
·
(
0,0,1
)
We
can
do
the
calcul
with
python
,
use
the
modul
numpi
:
>
>
>
import
numpi
as
np
>
>
>
x
=
np.array
(
[
[
0,0,1
]
,
[
0,1,0
]
,
[
1,0,0
]
]
)
>
>
>
y
=
(
[
3.65,1.55,3.42
]
)
>
>
>
scalar
=
np.linalg.solv
(
x
,
y
)
>
>
>
scalar
array
(
[
3.42
,
1.55
,
3.65
]
)
>
>
>
the
previou
exampl
wa
veri
easi
,
becaus
we
could
work
out
the
result
in
our
head
.
what
about
write
our
vector
y
=
(
3.21
,
1.77
,
3.65
)
as
a
linear
combin
of
the
vector
(
0,1,1
)
,
(
1,1,0
)
and
(
1,0,1
)
?
It
look
like
thi
in
python
:
>
>
>
import
numpi
as
np
>
>
>
x
=
np.array
(
[
[
0,1,1
]
,
[
1,1,0
]
,
[
1,0,1
]
]
)
>
>
>
y
=
(
[
3.65,1.55,3.42
]
)
>
>
>
scalar
=
np.linalg.solv
(
x
,
y
)
>
>
>
scalar
array
(
[
0.66
,
0.89
,
2.76
]
)
>
>
>
anoth
exampl
ani
integ
between
-40
and
40
can
be
written
as
a
linear
combin
of
1,3,9,27
with
scalar
be
element
of
the
set
{
-1,0,1
}
.
for
exampl
:
7
=
1
·
1
+
(
-1
)
·
3
+
1
·
9
+
0
·
27
We
can
calcul
these
scalar
with
python
.
first
we
need
a
gener
gener
all
the
possibl
scalar
combin
.
If
you
have
problem
in
understand
the
concept
of
a
gener
,
we
recommend
the
chapter
``
iter
and
gener
''
of
our
tutori
.
def
factors_set
(
)
:
factors_set
=
(
(
i
,
j
,
k
,
l
)
for
i
in
[
-1,0,1
]
for
j
in
[
-1,0,1
]
for
k
in
[
-1,0,1
]
for
l
in
[
-1,0,1
]
)
for
factor
in
factors_set
:
yield
factor
We
will
use
the
memoiz
(
)
techniqu
(
see
chapter
``
memoiz
and
decor
''
of
our
tutori
)
to
memor
previou
result
:
def
memoiz
(
f
)
:
result
=
{
}
def
helper
(
n
)
:
if
n
not
in
result
:
result
[
n
]
=
f
(
n
)
return
result
[
n
]
return
helper
final
,
in
our
function
linear_combin
(
)
we
check
everi
scalar
tupl
,
if
it
can
creat
the
valu
n
:
@
memoiz
def
linear_combin
(
n
)
:
``
''
''
return
the
tupl
(
i
,
j
,
k
,
l
)
satisfi
n
=
i*1
+
j*3
+
k*9
+
l*27
``
''
''
weigh
=
(
1,3,9,27
)
for
factor
in
factors_set
(
)
:
sum
=
0
for
i
in
rang
(
len
(
factor
)
)
:
sum
+=
factor
[
i
]
*
weigh
[
i
]
if
sum
==
n
:
return
factor
put
it
all
togeth
result
in
the
follow
script
:
def
factors_set
(
)
:
factors_set
=
(
(
i
,
j
,
k
,
l
)
for
i
in
[
-1,0,1
]
for
j
in
[
-1,0,1
]
for
k
in
[
-1,0,1
]
for
l
in
[
-1,0,1
]
)
for
factor
in
factors_set
:
yield
factor
def
memoiz
(
f
)
:
result
=
{
}
def
helper
(
n
)
:
if
n
not
in
result
:
result
[
n
]
=
f
(
n
)
return
result
[
n
]
return
helper
@
memoiz
def
linear_combin
(
n
)
:
``
''
''
return
the
tupl
(
i
,
j
,
k
,
l
)
satisfi
n
=
i*1
+
j*3
+
k*9
+
l*27
``
''
''
weigh
=
(
1,3,9,27
)
for
factor
in
factors_set
(
)
:
sum
=
0
for
i
in
rang
(
len
(
factor
)
)
:
sum
+=
factor
[
i
]
*
weigh
[
i
]
if
sum
==
n
:
return
factor
#
calcul
the
linear
combin
of
the
first
10
posit
integ
:
for
i
in
rang
(
1,11
)
:
print
(
linear_combin
(
i
)
)
call
thi
program
return
the
follow
result
:
(
1
,
0
,
0
,
0
)
(
-1
,
1
,
0
,
0
)
(
0
,
1
,
0
,
0
)
(
1
,
1
,
0
,
0
)
(
-1
,
-1
,
1
,
0
)
(
0
,
-1
,
1
,
0
)
(
1
,
-1
,
1
,
0
)
(
-1
,
0
,
1
,
0
)
(
0
,
0
,
1
,
0
)
(
1
,
0
,
1
,
0
)
previou
chapter
:
python
,
panda
and
timeseri
©
2011
-
2018
,
bernd
klein
,
bodenseo
;
design
by
denis
mitchinson
adapt
for
python-course.eu
by
bernd
klein
