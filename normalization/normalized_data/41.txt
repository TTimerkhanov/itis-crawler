python
tutori
:
metaclass
tutori
python
cours
python
3
tutori
the
origin
of
pythonstart
with
python
:
the
interact
shellexecut
a
scriptindentationdata
type
and
variablesoperatorssequenti
data
type
:
list
and
stringslist
manipulationsshallow
and
deep
copydictionariesset
and
frozen
setsan
extens
exampl
use
setsinput
via
the
keyboardcondit
statementsloop
,
while
loopfor
loopsdiffer
between
inter
und
iterablesoutput
with
printformat
output
with
string
modulo
and
the
format
methodfunctionsrecurs
and
recurs
functionsparamet
pass
in
functionsnamespacesglob
and
local
variablesdecoratorsmemo
with
decoratorsread
and
write
filesmodular
program
and
modulespackag
in
pythonregular
expressionsregular
express
,
advancedlambda
oper
,
filter
,
reduc
and
maplist
comprehensioniter
and
generatorsexcept
handlingtest
,
doctest
,
unittestsobject
orient
programmingclass
and
instanc
attributesproperti
vs.
getter
and
settersinheritancemultipl
inheritancemag
method
and
oper
overloadingoop
,
inherit
exampleslotsclass
and
class
creationroad
to
metaclassesmetaclassesmetaclass
use
case
:
count
function
callsabstract
class
python
In
greek
mytholog
,
python
is
the
name
of
a
a
huge
serpent
and
sometim
a
dragon
.
python
had
been
kill
by
the
god
apollo
at
delphi
.
python
wa
creat
out
of
the
slime
and
mud
left
after
the
great
flood
.
He
wa
appoint
by
gaia
(
mother
earth
)
to
guard
the
oracl
of
delphi
,
known
as
pytho
.
the
program
languag
python
ha
not
been
creat
out
of
slime
and
mud
but
out
of
the
program
languag
abc
.
It
ha
been
devis
by
a
dutch
programm
,
name
guido
van
rossum
,
in
amsterdam
.
origin
of
python
guido
van
rossum
wrote
the
follow
about
the
origin
of
python
in
a
foreword
for
the
book
``
program
python
''
by
mark
lutz
in
1996
:
``
over
six
year
ago
,
in
decemb
1989
,
I
wa
look
for
a
``
hobbi
''
program
project
that
would
keep
me
occupi
dure
the
week
around
christma
.
My
offic
(
a
government-run
research
lab
in
amsterdam
)
would
be
close
,
but
I
had
a
home
comput
,
and
not
much
els
on
my
hand
.
I
decid
to
write
an
interpret
for
the
new
script
languag
I
had
been
think
about
late
:
a
descend
of
abc
that
would
appeal
to
unix/c
hacker
.
I
chose
python
as
a
work
titl
for
the
project
,
be
in
a
slightli
irrever
mood
(
and
a
big
fan
of
monti
python
's
fli
circu
)
.
''
thi
websit
is
free
of
annoy
ad
.
We
want
to
keep
it
like
thi
.
you
can
help
with
your
donat
:
the
need
for
donat
bernd
klein
on
facebook
search
thi
websit
:
thi
topic
in
german
/
deutsch
übersetzung
:
metaklassen-tutorialpython
3thi
is
a
tutori
in
python3
,
but
thi
chapter
of
our
cours
is
avail
in
a
version
for
python
2.x
as
well
:
metaclass
tutori
in
python
2.x
classroom
train
cours
the
goal
of
thi
websit
is
to
provid
educ
materi
,
allow
you
to
learn
python
on
your
own
.
nevertheless
,
it
is
faster
and
more
effici
to
attend
a
``
real
''
python
cours
in
a
classroom
,
with
an
experienc
trainer
.
So
whi
not
attend
one
of
the
live
python
cours
in
strasbourg
,
pari
,
luxembourg
,
amsterdam
,
zürich
/
zurich
,
vienna
/
wien
,
london
,
berlin
,
munich
,
hamburg
,
frankfurt
,
or
lake
constanc
by
bernd
klein
,
the
author
of
thi
tutori
?
onsit
train
cours
let
us
come
to
your
compani
or
institut
and
train
your
employe
,
as
we
've
done
it
mani
time
in
amsterdam
(
the
netherland
)
,
berlin
(
germani
)
,
bern
(
switzerland
)
,
basel
(
switzerland
)
,
zurich
(
switzerland
)
,
locarno
(
switzerland
)
,
den
haag
(
the
hagu
)
,
hamburg
(
germani
)
,
frankfurt
(
germani
)
,
toronto
(
canada
)
,
edmonton
(
canada
)
,
munich
(
germani
)
,
vienna
/
wien
(
austria
)
and
mani
other
citi
.
We
do
train
cours
in
england
,
switzerland
,
liechtenstein
,
austria
,
germani
,
franc
,
belgium
,
the
netherland
,
luxembourg
,
poland
,
UK
,
itali
and
other
locat
in
europ
and
in
canada
.
thi
way
you
will
get
a
perfect
train
up
to
your
need
and
it
will
be
extrem
cost
effici
as
well
.
contact
us
so
we
can
defin
and
find
the
best
cours
curriculum
to
meet
your
need
,
and
schedul
cours
session
to
be
held
at
your
locat
.
skill
python
programm
you
are
look
for
experienc
python
develop
or
programm
?
We
can
help
you
,
pleas
contact
us
.
quot
of
the
day
:
''
how
to
test
?
''
is
a
question
that
can
not
be
answer
in
gener
.
``
when
to
test
?
''
howev
,
doe
have
a
gener
answer
:
as
earli
and
as
often
as
possibl
.
''
(
bjarn
stroustrup
)
data
protect
declar
data
protect
declar
previou
chapter
:
road
to
metaclass
next
chapter
:
metaclass
use
case
:
count
function
call
metaclass
A
metaclass
is
a
class
whose
instanc
are
class
.
like
an
``
ordinari
''
class
defin
the
behavior
of
the
instanc
of
the
class
,
a
metaclass
defin
the
behavior
of
class
and
their
instanc
.
metaclass
are
not
support
by
everi
object
orient
program
languag
.
those
program
languag
,
which
support
metaclass
,
consider
vari
in
way
the
implement
them
.
python
is
support
them
.
some
programm
see
metaclass
in
python
as
``
solut
wait
or
look
for
a
problem
''
.
there
are
numer
use
case
for
metaclass
.
just
to
name
a
few
:
log
and
profil
interfac
check
regist
class
at
creation
time
automat
ad
new
method
automat
properti
creation
proxi
automat
resourc
locking/synchron
.
defin
metaclass
principi
,
metaclass
are
defin
like
ani
other
python
class
,
but
they
are
class
that
inherit
from
``
type
''
.
anoth
differ
is
,
that
a
metaclass
is
call
automat
,
when
the
class
statement
use
a
metaclass
end
.
In
other
word
:
If
no
``
metaclass
''
keyword
is
pass
after
the
base
class
(
there
may
be
no
base
class
either
)
of
the
class
header
,
type
(
)
(
i.e
.
__call__
of
type
)
will
be
call
.
If
a
metaclass
keyword
is
use
on
the
other
hand
,
the
class
assign
to
it
will
be
call
instead
of
type
.
now
we
creat
a
veri
simpl
metaclass
.
It
's
good
for
noth
,
except
that
it
will
print
the
content
of
it
argument
in
the
__new__
method
and
return
the
result
of
the
type.__new__
call
:
class
littlemeta
(
type
)
:
def
__new__
(
cl
,
clsname
,
superclass
,
attributedict
)
:
print
(
``
clsname
:
``
,
clsname
)
print
(
``
superclass
:
``
,
superclass
)
print
(
``
attributedict
:
``
,
attributedict
)
return
type.__new__
(
cl
,
clsname
,
superclass
,
attributedict
)
We
will
use
the
metaclass
``
littlemeta
''
in
the
follow
exampl
:
class
S
:
pass
class
A
(
S
,
metaclass=littlemeta
)
:
pass
a
=
A
(
)
clsname
:
A
superclass
:
(
<
class
'__main__.
'
>
,
)
attributedict
:
{
'__module__
'
:
'__main__
'
,
'__qualname__
'
:
'
A
'
}
We
can
see
littlemeta.__new__
ha
been
call
and
not
type.__new__
.
resum
our
thread
from
the
last
chapter
:
We
defin
a
metaclass
``
essentialansw
''
which
is
capabl
of
automat
includ
our
augment_answ
method
:
x
=
input
(
``
Do
you
need
the
answer
?
(
y/n
)
:
``
)
if
x.lower
(
)
==
``
y
''
:
requir
=
true
els
:
requir
=
fals
def
the_answ
(
self
,
*arg
)
:
return
42
class
essentialansw
(
type
)
:
def
__init__
(
cl
,
clsname
,
superclass
,
attributedict
)
:
if
requir
:
cls.the_answ
=
the_answ
class
philosopher1
(
metaclass=essentialansw
)
:
pass
class
philosopher2
(
metaclass=essentialansw
)
:
pass
class
philosopher3
(
metaclass=essentialansw
)
:
pass
plato
=
philosopher1
(
)
print
(
plato.the_answ
(
)
)
kant
=
philosopher2
(
)
#
let
's
see
what
kant
ha
to
say
:
-
)
print
(
kant.the_answ
(
)
)
Do
you
need
the
answer
?
(
y/n
)
:
y
42
42
We
have
learn
in
our
chapter
``
type
and
class
relationship
''
that
after
the
class
definit
ha
been
process
,
python
call
type
(
classnam
,
superclass
,
attributes_dict
)
thi
is
not
the
case
,
if
a
metaclass
ha
been
declar
in
the
header
.
that
is
what
we
have
done
in
our
previou
exampl
.
our
class
philosopher1
,
philosopher2
and
philosopher3
have
been
hook
to
the
metaclass
essentialansw
.
that
's
whi
essentialansw
will
be
call
instead
of
type
:
essentialansw
(
classnam
,
superclass
,
attributes_dict
)
To
be
precis
,
the
argument
of
the
call
will
be
set
the
the
follow
valu
:
essentialansw
(
'philopsopher1
'
,
(
)
,
{
'__module__
'
:
'__main__
'
,
'__qualname__
'
:
'philosopher1
'
}
)
the
other
philosoph
class
are
treat
in
an
analogu
way
.
creat
singleton
use
metaclass
the
singleton
pattern
is
a
design
pattern
that
restrict
the
instanti
of
a
class
to
one
object
.
It
is
use
in
case
where
exactli
one
object
is
need
.
the
conceptcan
be
gener
to
restrict
the
instanti
to
a
certain
or
fix
number
of
object
.
the
term
stem
from
mathemat
,
where
a
singleton
,
-
also
call
a
unit
set
-
,
is
use
for
set
with
exactli
one
element
.
class
singleton
(
type
)
:
_instanc
=
{
}
def
__call__
(
cl
,
*arg
,
**kwarg
)
:
if
cl
not
in
cls._instanc
:
cls._instanc
[
cl
]
=
super
(
singleton
,
cl
)
.__call__
(
*arg
,
**kwarg
)
return
cls._instanc
[
cl
]
class
singletonclass
(
metaclass=singleton
)
:
pass
class
regularclass
(
)
:
pass
x
=
singletonclass
(
)
y
=
singletonclass
(
)
print
(
x
==
y
)
x
=
regularclass
(
)
y
=
regularclass
(
)
print
(
x
==
y
)
true
fals
creat
singleton
use
metaclassesaltern
,
we
can
creat
singleton
class
by
inherit
from
a
singleton
class
,
which
can
be
defin
like
thi
:
class
singleton
(
object
)
:
_instanc
=
none
def
__new__
(
cl
,
*arg
,
**kwarg
)
:
if
not
cls._instanc
:
cls._instanc
=
object.__new__
(
cl
,
*arg
,
**kwarg
)
return
cls._instanc
class
singletonclass
(
singleton
)
:
pass
class
regularclass
(
)
:
pass
x
=
singletonclass
(
)
y
=
singletonclass
(
)
print
(
x
==
y
)
x
=
regularclass
(
)
y
=
regularclass
(
)
print
(
x
==
y
)
true
fals
previou
chapter
:
road
to
metaclass
next
chapter
:
metaclass
use
case
:
count
function
call
©
2011
-
2018
,
bernd
klein
,
bodenseo
;
design
by
denis
mitchinson
adapt
for
python-course.eu
by
bernd
klein
