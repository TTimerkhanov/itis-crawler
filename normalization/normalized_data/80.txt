numer
&
scientif
comput
with
python
:
chang
dimens
of
array
numer
python
cours
numer
program
numpi
introductioncr
numpi
arraysdata
type
object
,
dtypenumer
oper
on
numpi
arrayschang
the
dimens
of
arrayspython
,
numpi
and
probabilityweight
choic
and
weight
samplescr
of
synthet
test
databoolean
mask
of
arraysmatrix
arithmeticread
and
write
ndarraysmatplotlib
introductionspin
and
tickslegend
and
annotationsmultipl
figur
and
axeshistogramscontour
plotspython
imag
process
tutorialimag
process
techniquespanda
tutorialpanda
dataframespanda
data
filesd
with
nanbin
datapanda
tutori
continu
:
multi-level
indexingdata
visual
with
panda
and
pythonpython
,
date
and
timepython
,
panda
and
timeserieslinear
combin
python
In
greek
mytholog
,
python
is
the
name
of
a
a
huge
serpent
and
sometim
a
dragon
.
python
had
been
kill
by
the
god
apollo
at
delphi
.
python
wa
creat
out
of
the
slime
and
mud
left
after
the
great
flood
.
He
wa
appoint
by
gaia
(
mother
earth
)
to
guard
the
oracl
of
delphi
,
known
as
pytho
.
the
program
languag
python
ha
not
been
creat
out
of
slime
and
mud
but
out
of
the
program
languag
abc
.
It
ha
been
devis
by
a
dutch
programm
,
name
guido
van
rossum
,
in
amsterdam
.
origin
of
python
guido
van
rossum
wrote
the
follow
about
the
origin
of
python
in
a
foreword
for
the
book
``
program
python
''
by
mark
lutz
in
1996
:
``
over
six
year
ago
,
in
decemb
1989
,
I
wa
look
for
a
``
hobbi
''
program
project
that
would
keep
me
occupi
dure
the
week
around
christma
.
My
offic
(
a
government-run
research
lab
in
amsterdam
)
would
be
close
,
but
I
had
a
home
comput
,
and
not
much
els
on
my
hand
.
I
decid
to
write
an
interpret
for
the
new
script
languag
I
had
been
think
about
late
:
a
descend
of
abc
that
would
appeal
to
unix/c
hacker
.
I
chose
python
as
a
work
titl
for
the
project
,
be
in
a
slightli
irrever
mood
(
and
a
big
fan
of
monti
python
's
fli
circu
)
.
''
thi
websit
is
free
of
annoy
ad
.
We
want
to
keep
it
like
thi
.
you
can
help
with
your
donat
:
the
need
for
donat
bernd
klein
on
facebook
search
thi
websit
:
thi
topic
in
german
/
deutsch
übersetzung
:
numpi
:
dimensionen
von
array
anpassenclassroom
train
cours
thi
websit
contain
a
free
and
extens
onlin
tutori
by
bernd
klein
,
use
materi
from
hi
classroom
python
train
cours
.
If
you
are
interest
in
an
instructor-l
classroom
train
cours
,
you
may
have
a
look
at
the
python
class
by
bernd
klein
at
bodenseo
.
©
kabliczech
-
fotolia.com
quot
of
the
day
:
''
comput
scienc
is
no
more
about
comput
than
astronomi
is
about
telescop
.
''
(
edsger
dijkstra
)
If
you
have
the
choic
work
with
python
2
or
python
3
,
we
recomend
to
switch
to
python
3
!
you
can
read
our
python
tutori
to
see
what
the
differ
are
.
data
protect
declar
data
protect
declar
previou
chapter
:
numer
oper
on
numpi
array
next
chapter
:
python
,
numpi
and
probabl
numpi
array
:
concaten
,
flatten
and
ad
dimens
So
far
,
we
have
learn
in
our
tutori
how
to
creat
array
and
how
to
appli
numer
oper
on
numpi
array
.
If
we
program
with
numpi
,
we
will
come
sooner
or
later
to
the
point
,
where
we
will
need
function
to
manipul
the
shape
or
dimens
of
array
.
We
wil
also
learn
how
to
concaten
array
.
furthermor
,
we
will
demonstr
the
possibl
to
add
dimens
to
exist
array
and
how
to
stack
multipl
array
.
We
will
end
thi
chapter
by
show
an
easi
way
to
construct
new
array
by
repeat
exist
array
.
the
pictur
show
a
tesseract
.
A
tesseract
is
a
hypercub
in
$
\re^4
$
.
the
tesseract
is
to
the
cube
as
the
cube
is
to
the
squar
:
the
surfac
of
the
cube
consist
of
six
squar
side
,
wherea
the
hypersurfac
of
the
tesseract
consist
of
eight
cubic
cell
.
flatten
and
reshap
array
there
are
two
method
to
flatten
a
multidimension
array
:
flatten
(
)
ravel
(
)
flatten
flatten
is
a
ndarri
method
with
an
option
keyword
paramet
``
order
''
.
order
can
have
the
valu
``
C
''
,
``
F
''
and
``
A
''
.
the
default
of
order
is
``
C
''
.
``
C
''
mean
to
flatten
C
style
in
row-major
order
,
i.e
.
the
rightmost
index
``
chang
the
fastest
''
or
in
other
word
:
In
row-major
order
,
the
row
index
vari
the
slowest
,
and
the
column
index
the
quickest
,
so
that
a
[
0,1
]
follow
[
0,0
]
.
``
F
''
stand
for
fortran
column-major
order
.
``
A
''
mean
preserv
the
the
c/fortran
order
.
import
numpi
as
np
A
=
np.array
(
[
[
[
0
,
1
]
,
[
2
,
3
]
,
[
4
,
5
]
,
[
6
,
7
]
]
,
[
[
8
,
9
]
,
[
10
,
11
]
,
[
12
,
13
]
,
[
14
,
15
]
]
,
[
[
16
,
17
]
,
[
18
,
19
]
,
[
20
,
21
]
,
[
22
,
23
]
]
]
)
flattened_x
=
a.flatten
(
)
print
(
flattened_x
)
print
(
a.flatten
(
order=
''
C
''
)
)
print
(
a.flatten
(
order=
''
F
''
)
)
print
(
a.flatten
(
order=
''
A
''
)
)
[
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
]
[
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
]
[
0
8
16
2
10
18
4
12
20
6
14
22
1
9
17
3
11
19
5
13
21
7
15
23
]
[
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
]
ravel
the
order
of
the
element
in
the
array
return
by
ravel
(
)
is
normal
``
c-style
''
.
ravel
(
a
,
order=
'
C
'
)
ravel
return
a
flatten
one-dimension
array
.
A
copi
is
made
onli
if
need
.
the
option
keyword
paramet
``
order
''
can
be
'
C
'
,
'
F
'
,
'
A
'
,
or
'
K
'
'
C
'
:
c-like
order
,
with
the
last
axi
index
chang
fastest
,
back
to
the
first
axi
index
chang
slowest
.
``
C
''
is
the
default
!
'
F
'
:
fortran-lik
index
order
with
the
first
index
chang
fastest
,
and
the
last
index
chang
slowest
.
'
A
'
:
fortran-lik
index
order
if
the
array
``
a
''
is
fortran
contigu
in
memori
,
c-like
order
otherwis
.
'
K
'
:
read
the
element
in
the
order
they
occur
in
memori
,
except
for
revers
the
data
when
stride
are
neg
.
print
(
a.ravel
(
)
)
print
(
a.ravel
(
order=
''
A
''
)
)
print
(
a.ravel
(
order=
''
F
''
)
)
print
(
a.ravel
(
order=
''
A
''
)
)
print
(
a.ravel
(
order=
''
K
''
)
)
[
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
]
[
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
]
[
0
8
16
2
10
18
4
12
20
6
14
22
1
9
17
3
11
19
5
13
21
7
15
23
]
[
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
]
[
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
]
reshap
the
method
reshap
(
)
give
a
new
shape
to
an
array
without
chang
it
data
,
i.e
.
it
return
a
new
array
with
a
new
shape
.
reshap
(
a
,
newshap
,
order=
'
C
'
)
paramet
mean
a
array_lik
,
array
to
be
reshap
.
newshap
int
or
tupl
of
int
order
'
C
'
,
'
F
'
,
'
A
'
,
like
in
flatten
or
ravel
X
=
np.array
(
rang
(
24
)
)
Y
=
x.reshap
(
(
3,4,2
)
)
Y
the
abov
python
code
return
the
follow
output
:
array
(
[
[
[
0
,
1
]
,
[
2
,
3
]
,
[
4
,
5
]
,
[
6
,
7
]
]
,
[
[
8
,
9
]
,
[
10
,
11
]
,
[
12
,
13
]
,
[
14
,
15
]
]
,
[
[
16
,
17
]
,
[
18
,
19
]
,
[
20
,
21
]
,
[
22
,
23
]
]
]
)
concaten
array
In
the
follow
exampl
we
concaten
three
one-dimension
array
to
one
array
.
the
element
of
the
second
array
are
append
to
the
first
array
.
after
thi
the
element
of
the
third
array
are
append
:
x
=
np.array
(
[
11,22
]
)
y
=
np.array
(
[
18,7,6
]
)
z
=
np.array
(
[
1,3,5
]
)
c
=
np.concaten
(
(
x
,
y
,
z
)
)
print
(
c
)
[
11
22
18
7
6
1
3
5
]
If
we
are
concaten
multidimension
array
,
we
can
concaten
the
array
accord
to
axi
.
array
must
have
the
same
shape
to
be
concaten
with
concaten
(
)
.
In
the
case
of
multidimension
array
,
we
can
arrang
them
accord
to
the
axi
.
the
default
valu
is
axi
=
0
:
x
=
np.array
(
rang
(
24
)
)
x
=
x.reshap
(
(
3,4,2
)
)
y
=
np.array
(
rang
(
100,124
)
)
y
=
y.reshap
(
(
3,4,2
)
)
z
=
np.concaten
(
(
x
,
y
)
)
print
(
z
)
[
[
[
0
1
]
[
2
3
]
[
4
5
]
[
6
7
]
]
[
[
8
9
]
[
10
11
]
[
12
13
]
[
14
15
]
]
[
[
16
17
]
[
18
19
]
[
20
21
]
[
22
23
]
]
[
[
100
101
]
[
102
103
]
[
104
105
]
[
106
107
]
]
[
[
108
109
]
[
110
111
]
[
112
113
]
[
114
115
]
]
[
[
116
117
]
[
118
119
]
[
120
121
]
[
122
123
]
]
]
We
do
the
same
concaten
now
with
axis=1
:
z
=
np.concaten
(
(
x
,
y
)
,
axi
=
1
)
print
(
z
)
[
[
[
0
1
]
[
2
3
]
[
4
5
]
[
6
7
]
[
100
101
]
[
102
103
]
[
104
105
]
[
106
107
]
]
[
[
8
9
]
[
10
11
]
[
12
13
]
[
14
15
]
[
108
109
]
[
110
111
]
[
112
113
]
[
114
115
]
]
[
[
16
17
]
[
18
19
]
[
20
21
]
[
22
23
]
[
116
117
]
[
118
119
]
[
120
121
]
[
122
123
]
]
]
ad
new
dimens
new
dimens
can
be
ad
to
an
array
by
use
slice
and
np.newaxi
.
We
illustr
thi
techniqu
with
an
exampl
:
x
=
np.array
(
[
2,5,18,14,4
]
)
y
=
x
[
:
,
np.newaxi
]
print
(
y
)
[
[
2
]
[
5
]
[
18
]
[
14
]
[
4
]
]
vector
stack
A
=
np.array
(
[
3
,
4
,
5
]
)
B
=
np.array
(
[
1,9,0
]
)
print
(
np.row_stack
(
(
A
,
B
)
)
)
print
(
np.column_stack
(
(
A
,
B
)
)
)
np.shape
(
A
)
[
[
3
4
5
]
[
1
9
0
]
]
[
[
3
1
]
[
4
9
]
[
5
0
]
]
the
code
abov
return
the
follow
:
(
3
,
)
A
=
np.array
(
[
[
3
,
4
,
5
]
,
[
1
,
9
,
0
]
,
[
4
,
6
,
8
]
]
)
np.column_stack
(
(
A
,
A
,
A
)
)
the
abov
python
code
return
the
follow
result
:
array
(
[
[
3
,
4
,
5
,
3
,
4
,
5
,
3
,
4
,
5
]
,
[
1
,
9
,
0
,
1
,
9
,
0
,
1
,
9
,
0
]
,
[
4
,
6
,
8
,
4
,
6
,
8
,
4
,
6
,
8
]
]
)
np.column_stack
(
(
A
[
0
]
,
A
[
0
]
,
A
[
0
]
)
)
after
have
execut
the
python
code
abov
we
receiv
the
follow
:
array
(
[
[
3
,
3
,
3
]
,
[
4
,
4
,
4
]
,
[
5
,
5
,
5
]
]
)
np.dstack
(
(
A
,
A
,
A
)
)
thi
get
us
the
follow
:
array
(
[
[
[
3
,
3
,
3
]
,
[
4
,
4
,
4
]
,
[
5
,
5
,
5
]
]
,
[
[
1
,
1
,
1
]
,
[
9
,
9
,
9
]
,
[
0
,
0
,
0
]
]
,
[
[
4
,
4
,
4
]
,
[
6
,
6
,
6
]
,
[
8
,
8
,
8
]
]
]
)
repeat
pattern
,
the
``
tile
''
methodsometim
,
you
want
to
or
have
to
creat
a
new
matrix
by
repeat
an
exist
matrix
multipl
time
to
creat
a
new
matrix
with
a
differ
shape
or
even
dimens
.
you
may
have
for
exampl
a
one-dimension
array
array
(
[
3.4
]
)
and
you
want
to
turn
it
into
an
array
array
(
[
3.4
,
3.4
,
3.4
,
3.4
,
3.4
]
)
In
anoth
usecas
you
may
have
a
two-dimension
array
like
np.array
(
[
[
1
,
2
]
,
[
3
,
4
]
]
)
,
which
you
intend
to
use
as
a
build
block
to
constru
the
array
with
the
shape
(
6
,
8
)
:
array
(
[
[
1
,
2
,
1
,
2
,
1
,
2
,
1
,
2
]
,
[
3
,
4
,
3
,
4
,
3
,
4
,
3
,
4
]
,
[
1
,
2
,
1
,
2
,
1
,
2
,
1
,
2
]
,
[
3
,
4
,
3
,
4
,
3
,
4
,
3
,
4
]
,
[
1
,
2
,
1
,
2
,
1
,
2
,
1
,
2
]
,
[
3
,
4
,
3
,
4
,
3
,
4
,
3
,
4
]
]
)
the
idea
of
construct
is
depict
in
the
follow
diagram
:
If
thi
remind
you
of
tile
a
bathroom
or
a
kitchen
,
you
are
on
the
right
track
:
the
function
which
numpi
provid
for
thi
task
is
call
``
tile
''
.
the
formal
syntax
of
tile
look
like
thi
:
tile
(
A
,
rep
)
An
array
is
construct
by
repeat
A
the
number
of
time
given
by
reps.
'rep
'
is
usual
a
tupl
(
or
list
)
which
defin
the
number
of
repetit
along
the
correspond
axi
/
direct
.
if
we
set
rep
to
(
3
,
4
)
for
exampl
,
A
will
be
repeat
3
time
for
the
``
row
''
and
4
time
in
the
direct
of
the
columna
.
We
demonstr
thi
in
the
follow
exampl
:
import
numpi
as
np
x
=
np.array
(
[
[
1
,
2
]
,
[
3
,
4
]
]
)
np.tile
(
x
,
(
3,4
)
)
the
previou
code
return
the
follow
result
:
array
(
[
[
1
,
2
,
1
,
2
,
1
,
2
,
1
,
2
]
,
[
3
,
4
,
3
,
4
,
3
,
4
,
3
,
4
]
,
[
1
,
2
,
1
,
2
,
1
,
2
,
1
,
2
]
,
[
3
,
4
,
3
,
4
,
3
,
4
,
3
,
4
]
,
[
1
,
2
,
1
,
2
,
1
,
2
,
1
,
2
]
,
[
3
,
4
,
3
,
4
,
3
,
4
,
3
,
4
]
]
)
import
numpi
as
np
x
=
np.array
(
[
3.4
]
)
y
=
np.tile
(
x
,
(
5
,
)
)
print
(
y
)
[
3.4
3.4
3.4
3.4
3.4
]
In
the
previou
tile
exampl
,
we
could
have
written
y
=
np.tile
(
x
,
5
)
as
well
.
If
we
stick
to
write
rep
in
the
tupl
or
list
form
,
or
consid
rep
=
5
as
an
abbrevi
for
rep
=
(
5
,
)
,
the
follow
is
true
:
If
'rep
'
ha
length
n
,
the
dimens
of
the
result
array
will
be
the
maximum
of
n
and
a.ndim
.
If
'
a.ndim
<
n
,
'
A
'
is
promot
to
be
n-dimension
by
prepend
new
axe
.
So
a
shape
(
5
,
)
array
is
promot
to
(
1
,
5
)
for
2-d
replic
,
or
shape
(
1
,
1
,
5
)
for
3-d
replic
.
If
thi
is
not
the
desir
behavior
,
promot
'
A
'
to
n-dimens
manual
befor
call
thi
function
.
If
'
a.ndim
>
d
'
,
'rep
'
is
promot
to
'
a'.ndim
by
pre-pend
1
's
to
it
.
thu
for
an
array
'
A
'
of
shape
(
2
,
3
,
4
,
5
)
,
a
'rep
'
of
(
2
,
2
)
is
treat
as
(
1
,
1
,
2
,
2
)
.
further
exampl
:
import
numpi
as
np
x
=
np.array
(
[
[
1
,
2
]
,
[
3
,
4
]
]
)
print
(
np.tile
(
x
,
2
)
)
[
[
1
2
1
2
]
[
3
4
3
4
]
]
import
numpi
as
np
x
=
np.array
(
[
[
1
,
2
]
,
[
3
,
4
]
]
)
print
(
np.tile
(
x
,
(
2
,
1
)
)
)
[
[
1
2
]
[
3
4
]
[
1
2
]
[
3
4
]
]
import
numpi
as
np
x
=
np.array
(
[
[
1
,
2
]
,
[
3
,
4
]
]
)
print
(
np.tile
(
x
,
(
2
,
2
)
)
)
[
[
1
2
1
2
]
[
3
4
3
4
]
[
1
2
1
2
]
[
3
4
3
4
]
]
previou
chapter
:
numer
oper
on
numpi
array
next
chapter
:
python
,
numpi
and
probabl
©
2011
-
2018
,
bernd
klein
,
bodenseo
;
design
by
denis
mitchinson
adapt
for
python-course.eu
by
bernd
klein
