python
tutori
:
dynam
creat
class
with
type
python
cours
python
3
tutori
the
origin
of
pythonstart
with
python
:
the
interact
shellexecut
a
scriptindentationdata
type
and
variablesoperatorssequenti
data
type
:
list
and
stringslist
manipulationsshallow
and
deep
copydictionariesset
and
frozen
setsan
extens
exampl
use
setsinput
via
the
keyboardcondit
statementsloop
,
while
loopfor
loopsdiffer
between
inter
und
iterablesoutput
with
printformat
output
with
string
modulo
and
the
format
methodfunctionsrecurs
and
recurs
functionsparamet
pass
in
functionsnamespacesglob
and
local
variablesdecoratorsmemo
with
decoratorsread
and
write
filesmodular
program
and
modulespackag
in
pythonregular
expressionsregular
express
,
advancedlambda
oper
,
filter
,
reduc
and
maplist
comprehensioniter
and
generatorsexcept
handlingtest
,
doctest
,
unittestsobject
orient
programmingclass
and
instanc
attributesproperti
vs.
getter
and
settersinheritancemultipl
inheritancemag
method
and
oper
overloadingoop
,
inherit
exampleslotsclass
and
class
creationroad
to
metaclassesmetaclassesmetaclass
use
case
:
count
function
callsabstract
class
differ
between
class
and
type
To
put
it
in
a
nutshel
:
there
is
no
differ
,
but
they
use
to
be
differ
,
a
``
long
''
time
ago
!
self-studi
vs.
live
class
lot
's
of
visitor
from
our
websit
wonder
which
method
of
learn
python
may
be
best
:
studi
entir
on
one
's
own
with
our
onlin
tutori
or
other
textbook
,
i.e
.
``
self-studi
''
live
classroom
train
or
on-sit
cours
We
ca
n't
provid
a
gener
answer
to
thi
question
.
It
depend
on
the
goal
of
a
student
.
one
benefit
of
self-studi
is
that
it
is
the
most
econom
option
in
term
of
money
.
although
a
live
class
involv
expens
,
and
often
requir
travel
to
the
cours
's
locat
,
there
are
signific
and
numer
benefit
by
attend
a
cours
taught
by
a
live
lectur
in
a
classroom
set
:
first
of
all
,
it
's
a
lot
faster
,
becaus
our
experi
is
that
particip
in
one
of
our
cours
learn
in
just
3
or
5
day
more
than
they
could
have
learn
in
week
of
self-studi
.
moreov
,
thi
learn
in
a
classroom
set
is
fun
to
learn
.
travel
might
not
even
be
necessari
,
if
you
book
bernd
klein
for
an
on-sit
cours
at
your
institut
or
compani
.
thi
websit
is
support
by
:
linux
and
python
cours
as
well
as
in-hous
cours
thi
websit
is
free
of
annoy
ad
.
We
want
to
keep
it
like
thi
.
you
can
help
with
your
donat
:
the
need
for
donat
bernd
klein
on
facebook
search
thi
websit
:
thi
topic
in
german
/
deutsch
übersetzung
:
dynamisch
erzeugung
von
klassenpython
3thi
is
a
tutori
in
python3
,
but
thi
chapter
of
our
cours
is
avail
in
a
version
for
python
2.x
as
well
:
dynam
creat
class
with
type
in
python
2.x
train
class
thi
websit
aim
at
provid
you
with
educ
materi
suitabl
for
self-learn
.
nevertheless
,
it
is
faster
and
more
effici
to
attend
a
``
real
''
python
cours
in
a
classroom
,
with
an
experienc
trainer
.
So
whi
not
attend
one
of
the
live
python
cours
in
strasbourg
,
pari
,
london
,
berlin
,
munich
,
hamburg
,
frankfurt
,
or
lake
constanc
by
bernd
klein
,
the
author
of
thi
tutori
?
in-hous
train
cours
If
you
like
it
,
we
will
come
to
your
compani
or
institut
and
provid
a
special
train
for
your
employe
,
as
we
've
done
it
mani
time
in
amsterdam
(
the
netherland
)
,
berlin
(
germani
)
,
bern
(
switzerland
)
,
basel
(
switzerland
)
,
zurich
(
switzerland
)
,
frankfurt
(
germani
)
,
locarno
(
switzerland
)
,
den
haag
(
the
hagu
)
,
hamburg
,
munich
(
germani
)
,
bucharest
(
romania
)
,
toronto
(
canada
)
,
edmonton
(
canada
)
,
and
mani
other
citi
.
We
do
train
cours
in
england
,
switzerland
,
liechtenstein
,
austria
,
germani
,
franc
,
belgium
,
the
netherland
,
luxembourg
,
romania
,
UK
,
itali
,
spain
and
other
locat
in
europ
and
in
canada
.
thi
way
you
will
get
a
perfect
train
up
to
your
need
and
it
will
be
extrem
cost
effici
as
well
.
contact
us
so
we
can
find
the
ideal
cours
to
meet
your
need
.
skill
python
programm
you
are
look
for
experienc
python
develop
or
programm
?
We
can
help
you
,
pleas
contact
us
.
quot
of
the
day
:
fool
ignor
complex
.
pragmatist
suffer
it
.
some
can
avoid
it
.
genius
remov
it
.
(
alan
perli
)
data
protect
declar
data
protect
declar
previou
chapter
:
slot
next
chapter
:
road
to
metaclass
class
and
class
creation
behind
the
scene
:
relationship
between
class
and
type
In
thi
chapter
of
our
tutori
,
we
will
provid
you
with
a
deeper
insight
into
the
magic
happen
behind
the
scene
,
when
we
are
defin
a
class
or
creat
an
instanc
of
a
class
.
you
may
ask
yourself
:
``
Do
I
realli
have
to
learn
these
addit
detail
on
object
orient
program
in
python
?
''
most
probabl
not
,
or
you
belong
to
the
few
peopl
who
design
class
at
a
veri
advanc
level
.
first
,
we
will
concentr
on
the
relationship
between
type
and
class
.
when
you
have
defin
class
so
far
,
you
may
have
ask
yourself
,
what
is
happen
``
behind
the
line
''
.
We
have
alreadi
seen
,
that
appli
``
type
''
to
an
object
return
the
class
of
which
the
object
is
an
instanc
of
:
x
=
[
4
,
5
,
9
]
y
=
``
hello
''
print
(
type
(
x
)
,
type
(
y
)
)
the
code
abov
return
the
follow
:
<
class
'list
'
>
<
class
'str
'
>
If
you
appli
type
on
the
name
of
a
class
itself
,
you
get
the
class
``
type
''
return
.
print
(
type
(
list
)
,
type
(
str
)
)
the
abov
python
code
return
the
follow
:
<
class
'type
'
>
<
class
'type
'
>
thi
is
similar
to
appli
type
on
type
(
x
)
and
type
(
y
)
:
x
=
[
4
,
5
,
9
]
y
=
``
hello
''
print
(
type
(
x
)
,
type
(
y
)
)
print
(
type
(
type
(
x
)
)
,
type
(
type
(
y
)
)
)
thi
get
us
the
follow
result
:
<
class
'list
'
>
<
class
'str
'
>
<
class
'type
'
>
<
class
'type
'
>
A
user-defin
class
(
or
the
class
``
object
''
)
is
an
instanc
of
the
class
``
type
''
.
So
,
we
can
see
,
that
class
are
creat
from
type
.
In
python3
there
is
no
differ
between
``
class
''
and
``
type
''
.
they
are
in
most
case
use
as
synonym
.
the
fact
that
class
are
instanc
of
a
class
``
type
''
allow
us
to
program
metaclass
.
We
can
creat
class
,
which
inherit
from
the
class
``
type
''
.
So
,
a
metaclass
is
a
subclass
of
the
class
``
type
''
.
instead
of
onli
one
argument
,
type
can
be
call
with
three
paramet
:
type
(
classnam
,
superclass
,
attributes_dict
)
If
type
is
call
with
three
argument
,
it
will
return
a
new
type
object
.
thi
provid
us
with
a
dynam
form
of
the
class
statement
.
``
classnam
''
is
a
string
defin
the
class
name
and
becom
the
name
attribut
;
``
superclass
''
is
a
list
or
tupl
with
the
superclass
of
our
class
.
thi
list
or
tupl
will
becom
the
base
attribut
;
the
attributes_dict
is
a
dictionari
,
function
as
the
namespac
of
our
class
.
It
contain
the
definit
for
the
class
bodi
and
it
becom
the
dict
attribut
.
let
's
have
a
look
at
a
simpl
class
definit
:
class
A
:
pass
x
=
A
(
)
print
(
type
(
x
)
)
after
have
execut
the
python
code
abov
we
receiv
the
follow
result
:
<
class
'__main__.a
'
>
We
can
use
``
type
''
for
the
previou
class
defint
as
well
:
A
=
type
(
``
A
''
,
(
)
,
{
}
)
x
=
A
(
)
print
(
type
(
x
)
)
the
previou
python
code
return
the
follow
result
:
<
class
'__main__.a
'
>
gener
speak
,
thi
mean
,
that
we
can
defin
a
class
A
with
type
(
classnam
,
superclass
,
attributedict
)
when
we
call
``
type
''
,
the
call
method
of
type
is
call
.
the
call
method
run
two
other
method
:
new
and
init
:
type.__new__
(
typeclass
,
classnam
,
superclass
,
attributedict
)
type.__init__
(
cl
,
classnam
,
superclass
,
attributedict
)
the
new
method
creat
and
return
the
new
class
object
,
and
after
thi
the
init
method
initi
the
newli
creat
object
.
class
robot
:
counter
=
0
def
__init__
(
self
,
name
)
:
self.nam
=
name
def
sayhello
(
self
)
:
return
``
Hi
,
I
am
``
+
self.nam
def
rob_init
(
self
,
name
)
:
self.nam
=
name
robot2
=
type
(
``
robot2
''
,
(
)
,
{
``
counter
''
:0
,
``
__init__
''
:
rob_init
,
``
sayhello
''
:
lambda
self
:
``
Hi
,
I
am
``
+
self.nam
}
)
x
=
robot2
(
``
marvin
''
)
print
(
x.name
)
print
(
x.sayhello
(
)
)
y
=
robot
(
``
marvin
''
)
print
(
y.name
)
print
(
y.sayhello
(
)
)
print
(
x.__dict__
)
print
(
y.__dict__
)
the
previou
python
code
return
the
follow
result
:
marvin
Hi
,
I
am
marvin
marvin
Hi
,
I
am
marvin
{
'name
'
:
'marvin
'
}
{
'name
'
:
'marvin
'
}
the
class
definit
for
robot
and
robot2
are
syntact
complet
differ
,
but
they
implement
logic
the
same
class
.
what
python
actual
doe
in
the
first
exampl
,
i.e
.
the
``
usual
way
''
of
defin
class
,
is
the
follow
:
python
process
the
complet
class
statement
from
class
robot
to
collect
the
method
and
attribut
of
robot
to
add
them
to
the
attributes_dict
of
the
type
call
.
So
,
python
will
call
type
in
a
similar
or
the
same
way
than
we
did
in
robot2
.
previou
chapter
:
slot
next
chapter
:
road
to
metaclass
©
2011
-
2018
,
bernd
klein
,
bodenseo
;
design
by
denis
mitchinson
adapt
for
python-course.eu
by
bernd
klein
