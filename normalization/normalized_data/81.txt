numer
&
scientif
comput
with
python
:
python
,
numpi
and
probabl
numer
python
cours
numer
program
numpi
introductioncr
numpi
arraysdata
type
object
,
dtypenumer
oper
on
numpi
arrayschang
the
dimens
of
arrayspython
,
numpi
and
probabilityweight
choic
and
weight
samplescr
of
synthet
test
databoolean
mask
of
arraysmatrix
arithmeticread
and
write
ndarraysmatplotlib
introductionspin
and
tickslegend
and
annotationsmultipl
figur
and
axeshistogramscontour
plotspython
imag
process
tutorialimag
process
techniquespanda
tutorialpanda
dataframespanda
data
filesd
with
nanbin
datapanda
tutori
continu
:
multi-level
indexingdata
visual
with
panda
and
pythonpython
,
date
and
timepython
,
panda
and
timeserieslinear
combin
probabl
probabl
is
the
measur
of
the
likelihood
that
an
event
will
occur
.
you
can
also
say
,
the
probabl
of
an
event
is
the
measur
of
the
chanc
that
the
event
will
occur
as
a
result
of
an
experi
.
the
probabl
that
a
an
event
will
occur
is
usual
express
as
a
number
between
0
and
1
.
sometim
percentag
valu
between
0
and
100
%
are
also
use
.
0
mean
that
the
event
can
not
occur
and
1
stand
for
the
certainti
that
the
event
will
(
alway
)
occur
.
the
exampl
,
you
will
find
in
nearli
everi
textbook
on
probabl
is
the
toss
of
a
fair
(
unbias
)
coin
.
the
probabl
of
``
head
''
is
the
same
as
the
probabl
of
``
tail
''
.
thi
mean
that
the
probabl
is
0.5
(
or
50
%
)
for
both
``
head
''
and
``
tail
''
.
the
probabl
of
an
event
A
is
the
number
of
way
event
A
can
occur
divid
by
the
total
number
of
possibl
outcom
.
thi
websit
is
creat
by
:
python
train
cours
in
toronto
,
canada
On
site
train
in
europ
,
canada
and
the
US
.
thi
websit
is
free
of
annoy
ad
.
We
want
to
keep
it
like
thi
.
you
can
help
with
your
donat
:
the
need
for
donat
bernd
klein
on
facebook
search
thi
websit
:
thi
topic
in
german
/
deutsch
übersetzung
:
statistik
und
wahrscheinlichkeitsrechnung
unter
pythonclassroom
train
cours
thi
websit
contain
a
free
and
extens
onlin
tutori
by
bernd
klein
,
use
materi
from
hi
classroom
python
train
cours
.
If
you
are
interest
in
an
instructor-l
classroom
train
cours
,
you
may
have
a
look
at
the
python
class
by
bernd
klein
at
bodenseo
.
©
kabliczech
-
fotolia.com
quot
of
the
day
:
''
now
,
it
's
my
belief
that
python
is
a
lot
easier
than
to
teach
to
student
program
and
teach
them
C
or
c++
or
java
at
the
same
time
becaus
all
the
detail
of
the
languag
are
so
much
harder
.
other
script
languag
realli
do
n't
work
veri
well
there
either
.
''
(
guido
van
rossum
)
If
you
have
the
choic
work
with
python
2
or
python
3
,
we
recomend
to
switch
to
python
3
!
you
can
read
our
python
tutori
to
see
what
the
differ
are
.
data
protect
declar
data
protect
declar
previou
chapter
:
chang
the
dimens
of
array
next
chapter
:
weight
choic
and
weight
sampl
python
,
random
number
and
probabl
introduct
``
everi
american
should
have
abov
averag
incom
,
and
my
administr
is
go
to
see
they
get
it
.
''
thi
say
is
attribut
to
bill
clinton
on
umpteen
websit
.
usual
,
there
is
no
context
given
,
so
it
is
not
clear
,
if
he
might
have
meant
it
as
a
``
joke
''
.
whatev
hi
intent
might
have
been
,
we
quot
him
to
show
a
``
real
''
life
exampl
of
statist
.
statist
and
probabl
calcul
is
all
around
us
in
real-lif
situat
.
We
have
to
cope
with
it
whenev
we
have
to
make
a
decis
from
variou
option
.
can
we
go
for
a
hike
in
the
afternoon
or
will
it
rain
?
the
weather
forecast
tell
us
,
that
the
probabl
of
precipit
will
be
30
%
.
So
what
now
?
will
we
go
for
a
hike
?
anoth
situat
:
everi
week
you
play
the
lotteri
and
dream
of
a
far
away
island
.
what
is
the
likelihood
of
win
the
jackpot
so
that
you
will
never
have
to
work
again
and
live
in
``
paradis
''
?
now
imagin
that
you
right
on
thi
island
of
your
dream
.
most
probabl
not
becaus
you
won
the
jackpot
,
but
rather
becaus
you
book
your
time
as
an
all-inclus
holiday
packag
.
you
are
on
holiday
on
a
paradis
island
far
from
home
.
suddenli
,
you
meet
your
neighbor
,
spoil
in
a
jiffi
all
dream
.
against
all
odd
?
uncertainti
is
all
araound
us
,
yet
onli
few
peopl
understand
the
basic
of
probabl
theori
.
the
program
languag
python
and
even
the
numer
modul
numpi
and
scipi
will
not
help
us
in
understand
the
everyday
problem
mention
abov
,
but
python
and
numpi
provid
us
with
power
function
to
calcul
problem
from
statist
and
probabl
theori
.
random
number
with
pythonth
random
and
the
``
secret
''
modulesther
is
an
explicit
warn
in
the
document
of
the
random
modul
:
warn
:
note
that
the
pseudo-random
gener
in
the
random
modul
should
not
be
use
for
secur
purpos
.
use
secret
on
python
3.6+
and
os.urandom
(
)
on
python
3.5
and
earlier
.
the
default
pseudo-random
number
gener
of
the
random
modul
wa
design
with
the
focu
on
model
and
simul
,
not
on
secur
.
So
,
you
should
n't
gener
sensit
inform
such
as
password
,
secur
token
,
session
key
and
similar
thing
by
use
random
.
when
we
say
that
you
should
n't
use
the
random
modul
,
we
mean
the
basic
function
``
randint
''
,
``
random
''
,
``
chois
''
,
and
the
like
.
there
is
one
except
as
you
will
learn
in
the
next
paragraph
:
systemrandom
the
systemrandom
class
offer
a
suitabl
way
to
overcom
thi
secur
problem
.
the
method
of
thi
class
use
an
altern
random
number
gener
,
which
use
tool
provid
by
the
oper
system
(
such
as
/dev/urandom
on
unix
or
cryptgenrandom
on
window
.
As
there
ha
been
great
concern
that
python
develop
might
inadvert
make
seriou
secur
error
,
-
even
though
the
warn
is
includ
in
the
documentaiton
,
-
python
3.6
come
with
a
new
modul
``
secret
''
with
a
csprng
(
cryptograph
strong
pseudo
random
number
gener
)
.
let
's
start
with
creat
random
float
number
with
the
random
function
of
the
random
modul
.
pleas
rememb
that
it
should
n't
be
use
to
gener
sensit
inform
:
import
random
random_numb
=
random.random
(
)
print
(
random_numb
)
0.34330263184538523
We
will
show
an
altern
and
secur
approach
in
the
follow
exampl
,
in
which
we
will
use
the
class
systemrandom
of
the
random
modul
.
It
will
use
a
differ
random
number
gener
.
It
use
sourc
which
are
provid
by
the
oper
system
.
thi
will
be
/dev/urandom
on
unix
and
cryptgenrandom
on
window
.
the
random
method
of
the
systemrandom
class
gener
a
float
number
in
the
rang
from
0.0
(
includ
)
to
1.0
(
not
includ
)
:
from
random
import
systemrandom
crypto
=
systemrandom
(
)
print
(
crypto.random
(
)
)
0.8875057137654113
gener
a
list
of
random
numbersquit
often
you
will
need
more
than
one
random
number
.
We
can
creat
a
list
of
random
number
by
repeatedli
call
random
(
)
.
import
random
def
random_list
(
n
,
secure=tru
)
:
random_float
=
[
]
if
secur
:
crypto
=
random.systemrandom
(
)
random_float
=
crypto.random
els
:
random_float
=
random.random
for
_
in
rang
(
n
)
:
random_floats.append
(
random_float
(
)
)
return
random_float
print
(
random_list
(
10
,
secure=fals
)
)
[
0.9702685982962019
,
0.5095131905323179
,
0.9324278634720967
,
0.9750405405778308
,
0.9750927470224396
,
0.2383439553695087
,
0.03591694433088444
,
0.9203791901577599
,
0.07793301506800698
,
0.46915245764066404
]
the
``
simpl
''
random
function
of
the
random
modul
is
a
lot
faster
as
we
can
see
in
the
follow
:
%
%
timeit
random_list
(
100
)
10000
loop
,
best
of
3
:
158
µs
per
loop
%
%
timeit
random_list
(
100
,
secure=fals
)
100000
loop
,
best
of
3
:
8.64
µs
per
loop
crypto
=
random.systemrandom
(
)
[
crypto.random
(
)
for
_
in
rang
(
10
)
]
thi
get
us
the
follow
output
:
[
0.5832874631978111
,
0.7494815897496974
,
0.6982338101218046
,
0.5164288598133177
,
0.15423895558995826
,
0.9447842390510461
,
0.08095707071826808
,
0.5407159221282145
,
0.6124979567571185
,
0.15764744205801628
]
altern
,
you
can
use
a
list
comprehens
to
creat
a
list
of
random
float
number
:
%
%
timeit
[
crypto.random
(
)
for
_
in
rang
(
100
)
]
10000
loop
,
best
of
3
:
157
µs
per
loop
the
fastest
and
most
effici
way
will
be
use
the
random
packag
of
the
numpi
modul
:
import
numpi
as
np
np.random.random
(
10
)
the
abov
python
code
return
the
follow
output
:
array
(
[
0.0422172
,
0.98285327
,
0.40386413
,
0.34629582
,
0.25666744
,
0.69242112
,
0.9231164
,
0.47445382
,
0.63654389
,
0.06781786
]
)
%
%
timeit
np.random.random
(
100
)
the
slowest
run
took
16.56
time
longer
than
the
fastest
.
thi
could
mean
that
an
intermedi
result
is
be
cach
.
100000
loop
,
best
of
3
:
2.1
µs
per
loop
warn
:
the
random
packag
of
the
numpi
modul
apparantli
-
even
though
it
doe
n't
say
so
in
the
document
-
is
complet
determinist
,
use
also
the
mersenn
twister
sequenc
!
random
number
satisfi
sum-to-on
conditionit
's
veri
easi
to
creat
a
list
of
random
number
satisfi
the
condit
that
they
sum
up
to
one
.
thi
way
,
we
turn
them
into
valu
,
which
could
be
use
as
probal
.
We
can
use
ani
of
the
method
explain
abov
to
normal
a
list
of
random
valu
.
all
we
have
to
do
is
divid
everi
valu
by
the
sum
of
the
valu
.
the
easiest
way
will
be
use
numpi
again
of
cours
:
import
numpi
as
np
list_of_random_float
=
np.random.random
(
100
)
sum_of_valu
=
list_of_random_floats.sum
(
)
print
(
sum_of_valu
)
normalized_valu
=
list_of_random_float
/
sum_of_valu
print
(
normalized_values.sum
(
)
)
52.3509839137
1.0
gener
random
string
or
password
with
pythonw
assum
that
you
do
n't
use
and
do
n't
like
weak
password
like
``
123456
''
,
``
password
''
,
``
qwerti
''
and
the
like
.
believ
it
or
not
,
these
password
are
alway
rank
to
10
.
So
you
look
for
a
safe
password
?
you
want
to
creat
password
with
python
?
but
do
n't
use
some
of
the
function
rank
top
10
in
the
search
result
,
becaus
you
may
use
a
function
use
the
random
function
of
the
random
modul
.
We
will
defin
a
strong
random
password
gener
,
which
use
the
systemrandom
class
.
thi
class
use
,
as
we
have
alreay
mention
,
a
cryptograph
strong
pseudo
random
number
gener
:
from
random
import
systemrandom
sr
=
systemrandom
(
)
#
creat
an
instanc
of
the
systemrandom
class
def
generate_password
(
length
,
valid_chars=non
)
:
``
''
''
generate_password
(
length
,
check_char
)
-
>
password
length
:
the
length
of
the
creat
password
check_char
:
a
boolean
function
use
to
check
the
valid
of
a
char
``
''
''
if
valid_chars==non
:
valid_char
=
``
abcdefghijklmnopqrstuvwxyz
''
valid_char
+=
valid_chars.low
(
)
+
``
0123456789
''
password
=
``
''
counter
=
0
while
counter
<
length
:
rnum
=
sr.randint
(
0
,
128
)
char
=
chr
(
rnum
)
if
char
in
valid_char
:
password
+=
chr
(
rnum
)
counter
+=
1
return
password
print
(
``
automat
gener
password
by
python
:
``
+
generate_password
(
15
)
)
automat
gener
password
by
python
:
ll6zki280gfuqmd
random
integ
numberseverybodi
is
familar
with
creat
random
integ
number
without
comput
.
If
you
roll
a
die
,
you
creat
a
random
number
between
1
and
6
.
In
term
of
probabl
theori
,
we
would
call
``
the
roll
of
the
die
''
an
experi
with
a
result
from
the
set
of
possibl
outcom
{
1
,
2
,
3
,
4
,
5
,
6
}
.
It
is
also
call
the
sampl
space
of
the
experi
.
how
can
we
simul
the
roll
of
a
die
in
python
?
We
do
n't
need
numpi
for
thi
aim
.
``
pure
''
python
and
it
random
modul
is
enough
.
import
random
outcom
=
random.randint
(
1,6
)
print
(
outcom
)
4
let
's
roll
our
virtual
die
10
time
:
import
random
[
random.randint
(
1
,
6
)
for
_
in
rang
(
10
)
]
thi
get
us
the
follow
result
:
[
2
,
1
,
5
,
5
,
6
,
5
,
4
,
4
,
1
,
1
]
We
can
accomplish
thi
easier
with
the
numpi
packag
random
:
import
numpi
as
np
outcom
=
np.random.randint
(
1
,
7
,
size=10
)
print
(
outcom
)
[
6
6
6
1
3
6
2
5
3
3
]
you
may
have
notic
,
that
we
use
7
instead
of
6
as
the
second
paramet
.
randint
from
numpy.random
use
a
``
half-open
''
interv
unlik
randint
from
the
python
random
modul
,
which
use
a
close
interv
!
the
formal
definit
:
numpy.random.randint
(
low
,
high=non
,
size=non
)
thi
function
return
random
integ
from
'low
'
(
inclus
)
to
'high
'
(
exclus
)
.
In
other
word
:
randint
return
random
integ
from
the
``
discret
uniform
''
distribut
in
the
``
half-open
''
interv
[
'low
'
,
'high
'
)
.
If
'high
'
is
none
or
not
given
in
the
call
,
the
result
will
rang
from
[
0
,
'low
'
)
.
the
paramet
'size
'
defin
the
shape
of
the
output
.
If
'size
'
is
none
,
a
singl
int
will
be
the
output
.
otherwis
the
result
will
be
an
array
.
the
paramet
'size
'
defin
the
shape
of
thi
array
.
So
size
should
be
a
tupl
.
If
size
is
defin
as
an
integ
n
,
thi
is
consid
to
be
the
tupl
(
n
,
)
.
the
follow
exampl
will
clarifi
the
behavior
of
the
paramet
:
import
numpi
as
np
print
(
np.random.randint
(
1
,
7
)
)
print
(
np.random.randint
(
1
,
7
,
size=1
)
)
print
(
np.random.randint
(
1
,
7
,
size=10
)
)
print
(
np.random.randint
(
1
,
7
,
size=
(
10
,
)
)
)
#
the
same
as
the
previou
one
print
(
np.random.randint
(
1
,
7
,
size=
(
5
,
4
)
)
)
5
[
3
]
[
1
4
3
5
5
1
5
4
5
6
]
[
2
1
4
3
2
1
6
5
3
3
]
[
[
4
1
3
1
]
[
6
4
5
6
]
[
2
5
5
1
]
[
4
3
2
3
]
[
6
2
6
5
]
]
simul
the
roll
of
a
die
is
usual
not
a
security-relev
issu
,
but
if
you
want
to
creat
cryptograph
strong
pseudo
random
number
you
should
use
the
systemrandom
class
again
:
import
random
crypto
=
random.systemrandom
(
)
[
crypto.randint
(
1
,
6
)
for
_
in
rang
(
10
)
]
thi
get
us
the
follow
:
[
2
,
1
,
6
,
4
,
5
,
6
,
2
,
5
,
2
,
1
]
We
have
learn
how
to
simul
the
roll
of
a
die
with
python
.
We
assum
that
our
die
is
fair
,
i.e
.
the
probabl
for
each
face
is
equal
to
1/6
.
how
can
we
simul
throw
a
crook
or
load
die
?
the
randint
method
of
both
modul
are
not
suitabl
for
thi
purpos
.
We
will
write
some
function
in
the
follow
text
to
solv
thi
problem
.
first
we
want
to
have
a
look
at
other
use
function
of
the
random
modul
.
random
choic
with
python
``
have
a
choic
''
or
``
have
choic
''
in
real
life
is
better
than
not
have
a
choic
.
even
though
some
peopl
might
complain
,
if
they
have
too
much
of
a
choic
.
life
mean
make
decis
.
there
are
simpl
choic
like
``
Do
I
want
a
boil
egg
?
``
,
``
soft
or
hard
boil
?
''
``
Do
I
go
to
the
cinema
,
theater
or
museum
?
other
choic
may
have
further
reach
consequ
like
choos
the
right
job
,
studi
or
what
is
the
best
program
languag
to
learn
.
let
's
do
it
with
python
.
the
random
modul
contain
the
right
function
for
thi
purpose.thi
function
can
be
use
to
choos
a
random
element
from
a
non-empti
sequenc
.
thi
mean
that
we
are
capabl
of
pick
a
random
charact
from
a
string
or
a
random
element
from
a
list
or
a
tupl
,
as
we
can
see
in
the
follow
exampl
.
you
want
to
have
a
citi
trip
within
europ
and
you
ca
n't
decid
where
to
go
?
let
python
help
you
:
from
random
import
choic
possible_destin
=
[
``
berlin
''
,
``
hamburg
''
,
``
munich
''
,
``
amsterdam
''
,
``
london
''
,
``
pari
''
,
``
zurich
''
,
``
heidelberg
''
,
``
strasbourg
''
,
``
augsburg
''
,
``
milan
''
,
``
rome
''
]
print
(
choic
(
possible_destin
)
)
strasbourg
the
choic
function
of
the
random
packag
of
the
numpi
modul
is
more
conveni
,
becaus
it
provid
further
possibl
.
the
default
call
,
i.e
.
no
further
paramet
are
use
,
behav
like
choic
of
the
random
modul
:
from
numpy.random
import
choic
print
(
choic
(
possible_destin
)
)
augsburg
with
the
help
of
the
paramet
``
size
''
we
can
creat
a
numpy.ndarray
with
choic
valu
:
x1
=
choic
(
possible_destin
,
size=3
)
print
(
x1
)
x2
=
choic
(
possible_destin
,
size=
(
3
,
4
)
)
print
(
x2
)
[
'london
'
'augsburg
'
'london
'
]
[
[
'strasbourg
'
'london
'
'rome
'
'berlin
'
]
[
'berlin
'
'pari
'
'munich
'
'augsburg
'
]
[
'heidelberg
'
'pari
'
'berlin
'
'rome
'
]
]
you
might
have
notic
that
the
citi
name
can
have
multipl
occurr
.
We
can
prevent
thi
by
set
the
option
paramet
``
replac
''
to
``
fals
''
:
print
(
choic
(
possible_destin
,
size=
(
3
,
4
)
,
replace=fals
)
)
[
[
'heidelberg
'
'london
'
'milan
'
'munich
'
]
[
'hamburg
'
'augsburg
'
'pari
'
'rome
'
]
[
'berlin
'
'strasbourg
'
'zurich
'
'amsterdam
'
]
]
set
the
``
size
''
paramet
to
a
non
none
valu
,
lead
us
to
the
sampl
function
.
random
sampl
with
python
A
sampl
can
be
understood
as
a
repres
part
from
a
larger
group
,
usual
call
a
``
popul
''
.
the
modul
numpy.random
contain
a
function
random_sampl
,
which
return
random
float
in
the
half
open
interv
[
0.0
,
1.0
)
.
the
result
are
from
the
``
continu
uniform
''
distribut
over
the
state
interv
.
thi
function
take
just
one
paramet
``
size
''
,
which
defin
the
output
shape
.
If
we
set
size
to
(
3
,
4
)
e.g.
,
we
will
get
an
array
with
the
shape
(
3
,
4
)
fill
with
random
element
:
import
numpi
as
np
x
=
np.random.random_sampl
(
(
3
,
4
)
)
print
(
x
)
[
[
0.99824096
0.30837203
0.85396161
0.84814744
]
[
0.45516418
0.64925709
0.19576679
0.8124502
]
[
0.45498107
0.20100427
0.42826199
0.57355053
]
]
If
we
call
random_sampl
with
an
integ
,
we
get
a
one-dimension
array
.
An
integ
ha
the
same
effect
as
if
we
use
a
one-tupl
as
an
argument
:
x
=
np.random.random_sampl
(
7
)
print
(
x
)
y
=
np.random.random_sampl
(
(
7
,
)
)
print
(
y
)
[
0.07729483
0.07947532
0.27405822
0.34425005
0.2968612
0.27234156
0.41580785
]
[
0.19791769
0.64537929
0.02809775
0.2947372
0.5873195
0.55059448
0.98943354
]
you
can
also
gener
array
with
valu
from
an
arbitrari
interv
[
a
,
b
)
,
where
a
ha
to
be
less
than
b
.
It
can
be
done
like
thi
:
(
b
-
a
)
*
random_sampl
(
)
+
a
exampl
:
a
=
-3.4
b
=
5.9
A
=
(
b
-
a
)
*
np.random.random_sampl
(
(
3
,
4
)
)
+
a
print
(
A
)
[
[
5.87026891
-0.13166798
5.56074144
3.48789786
]
[
-2.2764547
4.84050253
0.71734827
-0.7357672
]
[
5.8468095
4.56323308
0.05313938
-1.99266987
]
]
the
standard
modul
random
of
python
ha
a
more
gener
function
``
sampl
''
,
which
produc
sampl
from
a
popul
.
the
popul
can
be
a
sequenc
or
a
set
.
the
syntax
of
sampl
:
sampl
(
popul
,
k
)
the
function
creat
a
list
,
which
contain
``
k
''
element
from
the
``
popul
''
.
the
result
list
contain
no
multipl
occurr
,
if
the
the
popul
contain
no
multipl
occurr
.
If
you
want
to
choos
a
sampl
within
a
rang
of
integ
,
you
can
-
or
better
you
should
-
use
rang
as
the
argument
for
the
popul
.
In
the
follow
exampl
we
produc
six
number
out
of
the
rang
from
1
to
49
(
inclus
)
.
thi
correspond
to
a
draw
of
the
german
lotteri
:
import
random
print
(
random.sampl
(
rang
(
1
,
50
)
,
6
)
)
[
27
,
36
,
29
,
7
,
18
,
45
]
true
random
numbershav
you
ever
play
a
game
of
dice
and
ask
yourself
,
if
someth
is
wrong
with
the
die
?
you
roll
the
die
for
so
mani
time
and
you
still
have
n't
got
a
certain
valu
like
6
for
exampl
.
you
may
also
have
ask
yourself
,
if
the
random
modul
of
python
can
creat
``
real
''
or
``
true
''
random
number
,
which
are
e.g
.
equival
to
an
ideal
die
.
the
truth
is
that
most
random
number
use
in
comput
program
are
pseudo-random
.
the
number
are
gener
in
a
predict
way
,
becaus
the
algorithm
is
determinist
.
pseudo-random
number
are
good
enough
for
mani
purpos
,
but
it
may
not
be
``
true
''
random
roll
dice
or
lotteri
draw
.
the
websit
random.org
claim
to
offer
true
random
number
.
they
use
the
random
which
come
from
atmospher
nois
.
the
number
creat
thi
way
are
for
mani
purpos
better
than
the
pseudo-random
number
algorithm
typic
use
in
comput
program
.
previou
chapter
:
chang
the
dimens
of
array
next
chapter
:
weight
choic
and
weight
sampl
©
2011
-
2018
,
bernd
klein
,
bodenseo
;
design
by
denis
mitchinson
adapt
for
python-course.eu
by
bernd
klein
