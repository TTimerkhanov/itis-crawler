python
tutori
:
list
comprehens
python
cours
python
3
tutori
the
origin
of
pythonstart
with
python
:
the
interact
shellexecut
a
scriptindentationdata
type
and
variablesoperatorssequenti
data
type
:
list
and
stringslist
manipulationsshallow
and
deep
copydictionariesset
and
frozen
setsan
extens
exampl
use
setsinput
via
the
keyboardcondit
statementsloop
,
while
loopfor
loopsdiffer
between
inter
und
iterablesoutput
with
printformat
output
with
string
modulo
and
the
format
methodfunctionsrecurs
and
recurs
functionsparamet
pass
in
functionsnamespacesglob
and
local
variablesdecoratorsmemo
with
decoratorsread
and
write
filesmodular
program
and
modulespackag
in
pythonregular
expressionsregular
express
,
advancedlambda
oper
,
filter
,
reduc
and
maplist
comprehensioniter
and
generatorsexcept
handlingtest
,
doctest
,
unittestsobject
orient
programmingclass
and
instanc
attributesproperti
vs.
getter
and
settersinheritancemultipl
inheritancemag
method
and
oper
overloadingoop
,
inherit
exampleslotsclass
and
class
creationroad
to
metaclassesmetaclassesmetaclass
use
case
:
count
function
callsabstract
class
comprehens
without
list
``
man
is
not
born
to
solv
the
problem
of
the
univers
,
but
to
find
out
what
he
ha
to
do
;
and
to
restrain
himself
within
the
limit
of
hi
comprehens
.
''
(
johann
wolfgang
von
goeth
(
1749
-
1832
)
support
by
:
train
cours
in
python
thi
websit
is
free
of
annoy
ad
.
We
want
to
keep
it
like
thi
.
you
can
help
with
your
donat
:
the
need
for
donat
bernd
klein
on
facebook
search
thi
websit
:
thi
topic
in
german
/
deutsch
übersetzung
:
listen-abstrakt
(
list
comprehens
)
python
3thi
is
a
tutori
in
python3
,
but
thi
chapter
of
our
cours
is
avail
in
a
version
for
python
2.x
as
well
:
list
comprehens
in
python
2.x
book
a
dedic
cours
the
goal
of
thi
websit
is
to
provid
educ
materi
,
allow
you
to
learn
python
on
your
own
.
nevertheless
,
it
is
faster
and
more
effici
to
attend
a
``
real
''
python
cours
in
a
classroom
,
with
an
experienc
trainer
.
So
whi
not
attend
one
of
the
live
python
cours
in
pari
,
london
,
berlin
,
munich
or
lake
constanc
by
bernd
klein
,
the
author
of
thi
tutori
?
onsit
train
cours
let
us
come
to
your
compani
or
institut
and
train
your
employe
,
as
we
've
done
it
mani
time
in
amsterdam
(
the
netherland
)
,
berlin
(
germani
)
,
bern
(
switzerland
)
,
basel
(
switzerland
)
,
zurich
(
switzerland
)
,
locarno
(
switzerland
)
,
den
haag
(
the
hagu
)
,
hamburg
(
germani
)
,
frankfurt
(
germani
)
,
toronto
(
canada
)
,
edmonton
(
canada
)
,
munich
(
germani
)
and
mani
other
citi
.
We
do
train
cours
in
england
,
switzerland
,
liechtenstein
,
austria
,
germani
,
franc
,
belgium
,
the
netherland
,
luxembourg
,
poland
,
UK
,
itali
and
other
locat
in
europ
and
in
canada
.
thi
way
you
will
get
a
perfect
train
up
to
your
need
and
it
will
be
extrem
cost
effici
as
well
.
contact
us
so
we
can
defin
and
find
the
best
cours
curriculum
to
meet
your
need
,
and
schedul
cours
session
to
be
held
at
your
locat
.
skill
python
programm
you
can
hire
skill
python
programm
or
even
a
skill
team
of
python
develop
to
work
exclus
on
your
project
.
contact
us
,
if
you
want
more
inform
.
quot
of
the
day
:
''
I
will
,
in
fact
,
claim
that
the
differ
between
a
bad
programm
and
a
good
one
is
whether
he
consid
hi
code
or
hi
data
structur
more
import
.
bad
programm
worri
about
the
code
.
good
programm
worri
about
data
structur
and
their
relationship
''
(
linux
torvald
)
data
protect
declar
data
protect
declar
previou
chapter
:
lambda
oper
,
filter
,
reduc
and
map
next
chapter
:
iter
and
gener
list
comprehens
introduct
We
learn
in
the
previou
chapter
``
lambda
oper
,
filter
,
reduc
and
map
''
that
guido
van
rossum
prefer
list
comprehens
to
construct
use
map
,
filter
,
reduc
and
lambda
.
In
thi
chapter
we
will
cover
the
essenti
about
list
comprehens
.
list
comprehens
were
ad
with
python
2.0
.
essenti
,
it
is
python
's
way
of
implement
a
well-known
notat
for
set
as
use
by
mathematician
.
In
mathemat
the
squar
number
of
the
natur
number
are
,
for
exampl
,
creat
by
{
x2
|
x
∈
ℕ
}
or
the
set
of
complex
integ
{
(
x
,
y
)
|
x
∈
ℤ
∧
y
∈
ℤ
}
.
list
comprehens
is
an
eleg
way
to
defin
and
creat
list
in
python
.
these
list
have
often
the
qualiti
of
set
,
but
are
not
in
all
case
set
.
list
comprehens
is
a
complet
substitut
for
the
lambda
function
as
well
as
the
function
map
(
)
,
filter
(
)
and
reduc
(
)
.
for
most
peopl
the
syntax
of
list
comprehens
is
easier
to
be
grasp
.
exampl
In
the
chapter
on
lambda
and
map
(
)
we
had
design
a
map
(
)
function
to
convert
celsiu
valu
into
fahrenheit
and
vice
versa
.
It
look
like
thi
with
list
comprehens
:
>
>
>
celsiu
=
[
39.2
,
36.5
,
37.3
,
37.8
]
>
>
>
fahrenheit
=
[
(
(
float
(
9
)
/5
)
*x
+
32
)
for
x
in
celsiu
]
>
>
>
print
(
fahrenheit
)
[
102.56
,
97.700000000000003
,
99.140000000000001
,
100.03999999999999
]
>
>
>
A
pythagorean
tripl
consist
of
three
posit
integ
a
,
b
,
and
c
,
such
that
a2
+
b2
=
c2
.
such
a
tripl
is
commonli
written
(
a
,
b
,
c
)
,
and
the
best
known
exampl
is
(
3
,
4
,
5
)
.
the
follow
list
comprehens
creat
the
pythagorean
tripl
:
>
>
>
[
(
x
,
y
,
z
)
for
x
in
rang
(
1,30
)
for
y
in
rang
(
x,30
)
for
z
in
rang
(
y,30
)
if
x**2
+
y**2
==
z**2
]
[
(
3
,
4
,
5
)
,
(
5
,
12
,
13
)
,
(
6
,
8
,
10
)
,
(
7
,
24
,
25
)
,
(
8
,
15
,
17
)
,
(
9
,
12
,
15
)
,
(
10
,
24
,
26
)
,
(
12
,
16
,
20
)
,
(
15
,
20
,
25
)
,
(
20
,
21
,
29
)
]
>
>
>
anoth
exampl
:
let
A
and
B
be
two
set
,
the
cross
product
(
or
cartesian
product
)
of
A
and
B
,
written
a×b
,
is
the
set
of
all
pair
wherein
the
first
element
is
a
member
of
the
set
A
and
the
second
element
is
a
member
of
the
set
B
.
mathemat
definit
:
a×b
=
{
(
a
,
b
)
:
a
belong
to
A
,
b
belong
to
B
}
.
It
's
easi
to
be
accomplish
in
python
:
>
>
>
colour
=
[
``
red
''
,
``
green
''
,
``
yellow
''
,
``
blue
''
]
>
>
>
thing
=
[
``
hous
''
,
``
car
''
,
``
tree
''
]
>
>
>
coloured_th
=
[
(
x
,
y
)
for
x
in
colour
for
y
in
thing
]
>
>
>
print
(
coloured_th
)
[
(
'red
'
,
'hous
'
)
,
(
'red
'
,
'car
'
)
,
(
'red
'
,
'tree
'
)
,
(
'green
'
,
'hous
'
)
,
(
'green
'
,
'car
'
)
,
(
'green
'
,
'tree
'
)
,
(
'yellow
'
,
'hous
'
)
,
(
'yellow
'
,
'car
'
)
,
(
'yellow
'
,
'tree
'
)
,
(
'blue
'
,
'hous
'
)
,
(
'blue
'
,
'car
'
)
,
(
'blue
'
,
'tree
'
)
]
>
>
>
gener
comprehens
gener
comprehens
were
introduc
with
python
2.6
.
they
are
simpli
like
a
list
comprehens
but
with
parenthes
-
round
bracket
-
instead
of
(
squar
)
bracket
around
it
.
otherwis
,
the
syntax
and
the
way
of
work
is
like
list
comprehens
,
but
a
gener
comprehens
return
a
gener
instead
of
a
list
.
>
>
>
x
=
(
x
**2
for
x
in
rang
(
20
)
)
>
>
>
print
(
x
)
at
0xb7307aa4
>
>
>
>
x
=
list
(
x
)
>
>
>
print
(
x
)
[
0
,
1
,
4
,
9
,
16
,
25
,
36
,
49
,
64
,
81
,
100
,
121
,
144
,
169
,
196
,
225
,
256
,
289
,
324
,
361
]
A
more
demand
exampl
calcul
of
the
prime
number
between
1
and
100
use
the
siev
of
eratosthen
:
>
>
>
noprim
=
[
j
for
i
in
rang
(
2
,
8
)
for
j
in
rang
(
i*2
,
100
,
i
)
]
>
>
>
prime
=
[
x
for
x
in
rang
(
2
,
100
)
if
x
not
in
noprim
]
>
>
>
print
(
prime
)
[
2
,
3
,
5
,
7
,
11
,
13
,
17
,
19
,
23
,
29
,
31
,
37
,
41
,
43
,
47
,
53
,
59
,
61
,
67
,
71
,
73
,
79
,
83
,
89
,
97
]
>
>
>
We
want
to
bring
the
previou
exampl
into
more
gener
form
,
so
that
we
can
calcul
the
list
of
prime
number
up
to
an
arbitrari
number
n
:
>
>
>
from
math
import
sqrt
>
>
>
n
=
100
>
>
>
sqrt_n
=
int
(
sqrt
(
n
)
)
>
>
>
no_prim
=
[
j
for
i
in
rang
(
2
,
sqrt_n+1
)
for
j
in
rang
(
i*2
,
n
,
i
)
]
If
we
have
a
look
at
the
content
of
no_prim
,
we
can
see
that
we
have
a
problem
.
there
are
lot
of
doubl
entri
contain
in
thi
list
:
>
>
>
no_prim
[
4
,
6
,
8
,
10
,
12
,
14
,
16
,
18
,
20
,
22
,
24
,
26
,
28
,
30
,
32
,
34
,
36
,
38
,
40
,
42
,
44
,
46
,
48
,
50
,
52
,
54
,
56
,
58
,
60
,
62
,
64
,
66
,
68
,
70
,
72
,
74
,
76
,
78
,
80
,
82
,
84
,
86
,
88
,
90
,
92
,
94
,
96
,
98
,
6
,
9
,
12
,
15
,
18
,
21
,
24
,
27
,
30
,
33
,
36
,
39
,
42
,
45
,
48
,
51
,
54
,
57
,
60
,
63
,
66
,
69
,
72
,
75
,
78
,
81
,
84
,
87
,
90
,
93
,
96
,
99
,
8
,
12
,
16
,
20
,
24
,
28
,
32
,
36
,
40
,
44
,
48
,
52
,
56
,
60
,
64
,
68
,
72
,
76
,
80
,
84
,
88
,
92
,
96
,
10
,
15
,
20
,
25
,
30
,
35
,
40
,
45
,
50
,
55
,
60
,
65
,
70
,
75
,
80
,
85
,
90
,
95
,
12
,
18
,
24
,
30
,
36
,
42
,
48
,
54
,
60
,
66
,
72
,
78
,
84
,
90
,
96
,
14
,
21
,
28
,
35
,
42
,
49
,
56
,
63
,
70
,
77
,
84
,
91
,
98
,
16
,
24
,
32
,
40
,
48
,
56
,
64
,
72
,
80
,
88
,
96
,
18
,
27
,
36
,
45
,
54
,
63
,
72
,
81
,
90
,
99
]
>
>
>
the
solut
to
thi
unbear
problem
is
easier
than
you
may
think
.
It
's
just
a
matter
of
chang
squar
bracket
into
brace
,
or
in
other
word
:
We
will
use
set
comprehens
.
set
comprehens
A
set
comprehens
is
similar
to
a
list
comprehens
,
but
return
a
set
and
not
a
list
.
syntact
,
we
use
curli
bracket
instead
of
squar
bracket
to
creat
a
set
.
set
comprehens
is
the
right
function
to
solv
our
problem
from
the
previou
subsect
.
We
are
abl
to
creat
the
set
of
non
prime
without
doublet
:
>
>
>
from
math
import
sqrt
>
>
>
n
=
100
>
>
>
sqrt_n
=
int
(
sqrt
(
n
)
)
>
>
>
no_prim
=
{
j
for
i
in
rang
(
2
,
sqrt_n+1
)
for
j
in
rang
(
i*2
,
n
,
i
)
}
>
>
>
no_prim
{
4
,
6
,
8
,
9
,
10
,
12
,
14
,
15
,
16
,
18
,
20
,
21
,
22
,
24
,
25
,
26
,
27
,
28
,
30
,
32
,
33
,
34
,
35
,
36
,
38
,
39
,
40
,
42
,
44
,
45
,
46
,
48
,
49
,
50
,
51
,
52
,
54
,
55
,
56
,
57
,
58
,
60
,
62
,
63
,
64
,
65
,
66
,
68
,
69
,
70
,
72
,
74
,
75
,
76
,
77
,
78
,
80
,
81
,
82
,
84
,
85
,
86
,
87
,
88
,
90
,
91
,
92
,
93
,
94
,
95
,
96
,
98
,
99
}
>
>
>
prime
=
{
i
for
i
in
rang
(
2
,
n
)
if
i
not
in
no_prim
}
>
>
>
print
(
prime
)
{
2
,
3
,
5
,
7
,
11
,
13
,
17
,
19
,
23
,
29
,
31
,
37
,
41
,
43
,
47
,
53
,
59
,
61
,
67
,
71
,
73
,
79
,
83
,
89
,
97
}
>
>
>
recurs
function
to
calcul
the
prime
the
follow
python
script
use
a
recurs
function
to
calcul
the
prime
number
.
It
incorpor
the
fact
that
it
is
enough
to
examin
the
multipl
of
the
prime
number
up
to
the
squar
root
of
n
:
from
math
import
sqrt
def
prime
(
n
)
:
if
n
==
0
:
return
[
]
elif
n
==
1
:
return
[
]
els
:
p
=
prime
(
int
(
sqrt
(
n
)
)
)
no_p
=
{
j
for
i
in
p
for
j
in
rang
(
i*2
,
n+1
,
i
)
}
p
=
{
x
for
x
in
rang
(
2
,
n
+
1
)
if
x
not
in
no_p
}
return
p
for
i
in
rang
(
1,50
)
:
print
(
i
,
prime
(
i
)
)
differ
between
version
2.x
and
3.x
In
python
2
,
the
loop
control
variabl
is
not
local
,
i.e
.
it
can
chang
anoth
variabl
of
that
name
outsid
of
the
list
comprehens
,
as
we
can
see
in
the
follow
exampl
:
>
>
>
x
=
``
thi
valu
will
be
chang
in
the
list
comprehens
''
>
>
>
re
=
[
x
for
x
in
rang
(
3
)
]
>
>
>
re
[
0
,
1
,
2
]
>
>
>
x
2
>
>
>
re
=
[
i
for
i
in
rang
(
5
)
]
>
>
>
i
4
>
>
>
guido
van
rossum
refer
to
thi
effect
as
``
one
of
python
's
'dirti
littl
secret
'
for
year
''
.1
the
reason
for
do
thi
wa
effici
.
``
It
start
out
as
an
intent
compromis
to
make
list
comprehens
blindingli
fast
,
and
while
it
wa
not
a
common
pitfal
for
beginn
,
it
definit
stung
peopl
occasion
.
``
2
thi
``
dirti
littl
secret
''
is
fix
in
python3
,
as
you
can
see
in
the
follow
code
:
$
python3
python
3.2
(
r32:88445
,
mar
25
2011
,
19:28:28
)
[
gcc
4.5.2
]
on
linux2
type
``
help
''
,
``
copyright
''
,
``
credit
''
or
``
licens
''
for
more
inform
.
>
>
>
x
=
``
python
3
fix
the
dirti
littl
secret
''
>
>
>
re
=
[
x
for
x
in
rang
(
3
)
]
>
>
>
print
(
re
)
[
0
,
1
,
2
]
>
>
>
x
'python
3
fix
the
dirti
littl
secret
'
>
>
>
footnot
:
1
guido
van
rossum
:
from
list
comprehens
to
gener
express
2
dto
.
previou
chapter
:
lambda
oper
,
filter
,
reduc
and
map
next
chapter
:
iter
and
gener
©
2011
-
2018
,
bernd
klein
,
bodenseo
;
design
by
denis
mitchinson
adapt
for
python-course.eu
by
bernd
klein
