python
tutori
:
inherit
exampl
python
cours
python
3
tutori
the
origin
of
pythonstart
with
python
:
the
interact
shellexecut
a
scriptindentationdata
type
and
variablesoperatorssequenti
data
type
:
list
and
stringslist
manipulationsshallow
and
deep
copydictionariesset
and
frozen
setsan
extens
exampl
use
setsinput
via
the
keyboardcondit
statementsloop
,
while
loopfor
loopsdiffer
between
inter
und
iterablesoutput
with
printformat
output
with
string
modulo
and
the
format
methodfunctionsrecurs
and
recurs
functionsparamet
pass
in
functionsnamespacesglob
and
local
variablesdecoratorsmemo
with
decoratorsread
and
write
filesmodular
program
and
modulespackag
in
pythonregular
expressionsregular
express
,
advancedlambda
oper
,
filter
,
reduc
and
maplist
comprehensioniter
and
generatorsexcept
handlingtest
,
doctest
,
unittestsobject
orient
programmingclass
and
instanc
attributesproperti
vs.
getter
and
settersinheritancemultipl
inheritancemag
method
and
oper
overloadingoop
,
inherit
exampleslotsclass
and
class
creationroad
to
metaclassesmetaclassesmetaclass
use
case
:
count
function
callsabstract
class
inherit
merriam-webst
's
definit
of
inherit
:
the
act
of
inherit
properti
the
recept
of
genet
qualiti
by
transmiss
from
parent
to
offspr
the
acquisit
of
a
possess
,
condit
,
or
trait
from
past
gener
tradit
a
valuabl
possess
that
is
a
common
heritag
from
natur
thi
websit
is
support
by
:
python
cours
clock
and
calendar
``
I
must
govern
the
clock
,
not
be
govern
by
it
.
''
(
golda
meir
)
``
We
must
not
allow
the
clock
and
the
calendar
to
blind
us
to
the
fact
that
each
moment
of
life
is
a
miracl
and
mysteri
.
''
(
h.g
.
well
)
the
famou
novel
1984
by
georg
orwel
start
with
clock
out-of-ord
:
``
It
wa
a
bright
cold
day
in
april
,
and
the
clock
were
strike
thirteen
.
''
thi
websit
is
free
of
annoy
ad
.
We
want
to
keep
it
like
thi
.
you
can
help
with
your
donat
:
the
need
for
donat
bernd
klein
on
facebook
search
thi
websit
:
python
3thi
is
a
tutori
in
python3
,
but
thi
chapter
of
our
cours
is
avail
in
a
version
for
python
2.x
as
well
:
inherit
exampl
in
python
2.x
classroom
train
cours
the
goal
of
thi
websit
is
to
provid
educ
materi
,
allow
you
to
learn
python
on
your
own
.
nevertheless
,
it
is
faster
and
more
effici
to
attend
a
``
real
''
python
cours
in
a
classroom
,
with
an
experienc
trainer
.
So
whi
not
attend
one
of
the
live
python
cours
in
strasbourg
,
pari
,
luxembourg
,
amsterdam
,
zürich
/
zurich
,
vienna
/
wien
,
london
,
berlin
,
munich
,
hamburg
,
frankfurt
,
stuttgart
,
or
lake
constanc
by
bernd
klein
,
the
author
of
thi
tutori
?
you
can
book
on-sit
class
at
your
compani
or
organ
,
e.g
.
in
england
,
switzerland
,
austria
,
germani
,
franc
,
belgium
,
the
netherland
,
luxembourg
,
poland
,
UK
,
itali
and
other
locat
in
europ
and
in
canada
.
We
had
cours
in
the
follow
citi
:
amsterdam
(
the
netherland
)
,
berlin
(
germani
)
,
bern
(
switzerland
)
,
basel
(
switzerland
)
,
zurich
(
switzerland
)
,
locarno
(
switzerland
)
,
den
haag
(
the
hagu
)
,
hamburg
,
toronto
(
canada
)
,
edmonton
(
canada
)
,
munich
(
germani
)
and
mani
other
citi
.
contact
us
so
we
can
defin
and
find
the
best
cours
curriculum
to
meet
your
need
,
and
schedul
cours
session
to
be
held
at
your
locat
.
skill
python
programm
you
are
look
for
experienc
python
develop
or
programm
?
We
can
help
you
,
pleas
contact
us
.
quot
of
the
day
:
''
It
is
easier
to
write
an
incorrect
program
than
understand
a
correct
one.
``
(
alan
perli
)
data
protect
declar
data
protect
declar
previou
chapter
:
magic
method
and
oper
overload
next
chapter
:
slot
inherit
exampl
introduct
there
are
n't
mani
good
exampl
on
inherit
avail
on
the
web
.
they
are
either
extrem
simpl
and
artifici
or
they
are
way
to
complic
.
We
want
to
close
the
gap
by
provid
an
exampl
which
is
on
the
one
hand
more
realist
-
but
still
not
realist
-
and
on
the
other
hand
simpl
enough
to
see
and
understand
the
basic
aspect
of
inherit
.
In
our
previou
chapter
,
we
introduc
inherit
formal
.
To
thi
purpos
we
defin
two
base
class
:
one
is
an
implement
of
a
clock
and
the
other
one
of
a
calendar
.
base
on
these
two
class
,
we
defin
a
class
calendarclock
,
which
inherit
both
from
the
class
calendar
and
from
the
class
clock
.
the
clock
class
class
clock
(
object
)
:
def
__init__
(
self
,
hours=0
,
minutes=0
,
seconds=0
)
:
self.__hour
=
hour
self.__minut
=
minut
self.__second
=
second
def
set
(
self
,
hour
,
minut
,
seconds=0
)
:
self.__hour
=
hour
self.__minut
=
minut
self.__second
=
second
def
tick
(
self
)
:
``
''
''
time
will
be
advanc
by
one
second
``
''
''
if
self.__second
==
59
:
self.__second
=
0
if
(
self.__minut
==
59
)
:
self.__minut
=
0
self.__hour
=
0
if
self.__hours==23
els
self.__hour
+
1
els
:
self.__minut
+=
1
;
els
:
self.__second
+=
1
;
def
display
(
self
)
:
print
(
``
%
d
:
%
d
:
%
d
''
%
(
self.__hour
,
self.__minut
,
self.__second
)
)
def
__str__
(
self
)
:
return
``
%
2d
:
%
2d
:
%
2d
''
%
(
self.__hour
,
self.__minut
,
self.__second
)
x
=
clock
(
)
print
(
x
)
for
i
in
rang
(
10000
)
:
x.tick
(
)
print
(
x
)
the
calendar
class
class
calendar
(
object
)
:
month
=
(
31,28,31,30,31,30,31,31,30,31,30,31
)
def
__init__
(
self
,
day=1
,
month=1
,
year=1900
)
:
self.__day
=
day
self.__month
=
month
self.__year
=
year
def
leapyear
(
self
,
y
)
:
if
y
%
4
:
#
not
a
leap
year
return
0
;
els
:
if
y
%
100
:
return
1
;
els
:
if
y
%
400
:
return
0
els
:
return
1
;
def
set
(
self
,
day
,
month
,
year
)
:
self.__day
=
day
self.__month
=
month
self.__year
=
year
def
get
(
)
:
return
(
self
,
self.__day
,
self.__month
,
self.__year
)
def
advanc
(
self
)
:
month
=
calendar.month
max_day
=
month
[
self.__month-1
]
if
self.__month
==
2
:
max_day
+=
self.leapyear
(
self.__year
)
if
self.__day
==
max_day
:
self.__day
=
1
if
(
self.__month
==
12
)
:
self.__month
=
1
self.__year
+=
1
els
:
self.__month
+=
1
els
:
self.__day
+=
1
def
__str__
(
self
)
:
return
str
(
self.__day
)
+
''
/
''
+
str
(
self.__month
)
+
``
/
''
+
str
(
self.__year
)
if
__name__
==
``
__main__
''
:
x
=
calendar
(
)
print
(
x
)
x.advanc
(
)
print
(
x
)
the
calendar-clock
class
from
clock
import
clock
from
calendar
import
calendar
class
calendarclock
(
clock
,
calendar
)
:
def
__init__
(
self
,
day
,
month
,
year
,
hours=0
,
minutes=0
,
seconds=0
)
:
calendar.__init__
(
self
,
day
,
month
,
year
)
clock.__init__
(
self
,
hour
,
minut
,
second
)
def
__str__
(
self
)
:
return
calendar.__str__
(
self
)
+
``
,
``
+
clock.__str__
(
self
)
if
__name__
==
``
__main__
''
:
x
=
calendarclock
(
24,12,57
)
print
(
x
)
for
i
in
rang
(
1000
)
:
x.tick
(
)
for
i
in
rang
(
1000
)
:
x.advanc
(
)
print
(
x
)
previou
chapter
:
magic
method
and
oper
overload
next
chapter
:
slot
©
2011
-
2018
,
bernd
klein
,
bodenseo
;
design
by
denis
mitchinson
adapt
for
python-course.eu
by
bernd
klein
