numer
&
scientif
comput
with
python
:
panda
tutori
:
read
and
write
data
file
numer
python
cours
numer
program
numpi
introductioncr
numpi
arraysdata
type
object
,
dtypenumer
oper
on
numpi
arrayschang
the
dimens
of
arrayspython
,
numpi
and
probabilityweight
choic
and
weight
samplescr
of
synthet
test
databoolean
mask
of
arraysmatrix
arithmeticread
and
write
ndarraysmatplotlib
introductionspin
and
tickslegend
and
annotationsmultipl
figur
and
axeshistogramscontour
plotspython
imag
process
tutorialimag
process
techniquespanda
tutorialpanda
dataframespanda
data
filesd
with
nanbin
datapanda
tutori
continu
:
multi-level
indexingdata
visual
with
panda
and
pythonpython
,
date
and
timepython
,
panda
and
timeserieslinear
combin
python
In
greek
mytholog
,
python
is
the
name
of
a
a
huge
serpent
and
sometim
a
dragon
.
python
had
been
kill
by
the
god
apollo
at
delphi
.
python
wa
creat
out
of
the
slime
and
mud
left
after
the
great
flood
.
He
wa
appoint
by
gaia
(
mother
earth
)
to
guard
the
oracl
of
delphi
,
known
as
pytho
.
the
program
languag
python
ha
not
been
creat
out
of
slime
and
mud
but
out
of
the
program
languag
abc
.
It
ha
been
devis
by
a
dutch
programm
,
name
guido
van
rossum
,
in
amsterdam
.
origin
of
python
guido
van
rossum
wrote
the
follow
about
the
origin
of
python
in
a
foreword
for
the
book
``
program
python
''
by
mark
lutz
in
1996
:
``
over
six
year
ago
,
in
decemb
1989
,
I
wa
look
for
a
``
hobbi
''
program
project
that
would
keep
me
occupi
dure
the
week
around
christma
.
My
offic
(
a
government-run
research
lab
in
amsterdam
)
would
be
close
,
but
I
had
a
home
comput
,
and
not
much
els
on
my
hand
.
I
decid
to
write
an
interpret
for
the
new
script
languag
I
had
been
think
about
late
:
a
descend
of
abc
that
would
appeal
to
unix/c
hacker
.
I
chose
python
as
a
work
titl
for
the
project
,
be
in
a
slightli
irrever
mood
(
and
a
big
fan
of
monti
python
's
fli
circu
)
.
''
thi
websit
is
free
of
annoy
ad
.
We
want
to
keep
it
like
thi
.
you
can
help
with
your
donat
:
the
need
for
donat
bernd
klein
on
facebook
search
thi
websit
:
thi
topic
in
german
/
deutsch
übersetzung
:
panda
:
lesen
und
schreiben
von
dateienclassroom
train
cours
thi
websit
contain
a
free
and
extens
onlin
tutori
by
bernd
klein
,
use
materi
from
hi
classroom
python
train
cours
.
If
you
are
interest
in
an
instructor-l
classroom
train
cours
,
you
may
have
a
look
at
the
python
class
by
bernd
klein
at
bodenseo
.
©
kabliczech
-
fotolia.com
quot
of
the
day
:
''
A
program
languag
is
for
think
about
program
,
not
for
express
program
you
've
alreadi
thought
of
.
It
should
be
a
pencil
,
not
a
pen.
``
(
paul
graham
)
If
you
have
the
choic
work
with
python
2
or
python
3
,
we
recomend
to
switch
to
python
3
!
you
can
read
our
python
tutori
to
see
what
the
differ
are
.
data
protect
declar
data
protect
declar
previou
chapter
:
panda
datafram
next
chapter
:
deal
with
nan
read
and
write
data
all
the
power
data
structur
like
the
seri
and
the
datafram
would
avail
to
noth
,
if
the
panda
modul
would
n't
provid
power
function
for
read
in
and
write
out
data
.
It
is
not
onli
a
matter
of
have
a
function
for
interact
with
file
.
To
be
use
to
data
scientist
it
also
need
function
which
support
the
most
import
data
format
like
delimiter-separ
file
,
like
e.g
.
csv
microsoft
excel
file
html
xml
json
delimiter-separ
valuesmost
peopl
take
csv
file
as
a
synonym
for
delimter-separ
valu
file
.
they
leav
the
fact
out
of
account
that
csv
is
an
acronym
for
``
comma
separ
valu
''
,
which
is
not
the
case
in
mani
situat
.
panda
also
use
``
csv
''
and
context
,
in
which
``
dsv
''
would
be
more
appropri
.
delimiter-separ
valu
(
dsv
)
are
defin
and
store
two-dimension
array
(
for
exampl
string
)
of
data
by
separ
the
valu
in
each
row
with
delimit
charact
defin
for
thi
purpos
.
thi
way
of
implement
data
is
often
use
in
combin
of
spreadsheet
program
,
which
can
read
in
and
write
out
data
as
dsv
.
they
are
also
use
as
a
gener
data
exchang
format
.
We
call
a
text
file
a
``
delimit
text
file
''
if
it
contain
text
in
dsv
format
.
for
exampl
,
the
file
dollar_euro.txt
is
a
delimit
text
file
and
use
tab
(
\t
)
as
delimit
.
read
csv
and
dsv
filespanda
offer
two
way
to
read
in
csv
or
dsv
file
to
be
precis
:
dataframe.from_csv
read_csv
there
is
no
big
differ
between
those
two
function
,
e.g
.
they
have
differ
default
valu
in
some
case
and
read_csv
ha
more
paramt
.
We
will
focu
on
read_csv
,
becaus
dataframe.from_csv
is
kept
insid
panda
for
reason
of
backward
compat
.
import
panda
as
pd
exchange_r
=
pd.read_csv
(
``
data1/dollar_euro.txt
''
,
sep=
''
\t
''
)
print
(
exchange_r
)
year
averag
min
usd/eur
max
usd/eur
work
day
0
2016
0.901696
0.864379
0.959785
247
1
2015
0.901896
0.830358
0.947688
256
2
2014
0.753941
0.716692
0.823655
255
3
2013
0.753234
0.723903
0.783208
255
4
2012
0.778848
0.743273
0.827198
256
5
2011
0.719219
0.671953
0.775855
257
6
2010
0.755883
0.686672
0.837381
258
7
2009
0.718968
0.661376
0.796495
256
8
2008
0.683499
0.625391
0.802568
256
9
2007
0.730754
0.672314
0.775615
255
10
2006
0.797153
0.750131
0.845594
255
11
2005
0.805097
0.740357
0.857118
257
12
2004
0.804828
0.733514
0.847314
259
13
2003
0.885766
0.791766
0.963670
255
14
2002
1.060945
0.953562
1.165773
255
15
2001
1.117587
1.047669
1.192748
255
16
2000
1.085899
0.962649
1.211827
255
17
1999
0.939475
0.848176
0.998502
261
As
we
can
see
,
read_csv
use
automat
the
first
line
as
the
name
for
the
column
.
It
is
possibl
to
give
other
name
to
the
column
.
for
thi
purpos
,
we
have
to
skip
the
first
line
by
set
the
paramet
``
header
''
to
0
and
we
have
to
assign
a
list
with
the
column
name
to
the
paramet
``
name
''
:
import
panda
as
pd
exchange_r
=
pd.read_csv
(
``
data1/dollar_euro.txt
''
,
sep=
''
\t
''
,
header=0
,
names=
[
``
year
''
,
``
min
''
,
``
max
''
,
``
day
''
]
)
print
(
exchange_r
)
year
min
max
day
2016
0.901696
0.864379
0.959785
247
2015
0.901896
0.830358
0.947688
256
2014
0.753941
0.716692
0.823655
255
2013
0.753234
0.723903
0.783208
255
2012
0.778848
0.743273
0.827198
256
2011
0.719219
0.671953
0.775855
257
2010
0.755883
0.686672
0.837381
258
2009
0.718968
0.661376
0.796495
256
2008
0.683499
0.625391
0.802568
256
2007
0.730754
0.672314
0.775615
255
2006
0.797153
0.750131
0.845594
255
2005
0.805097
0.740357
0.857118
257
2004
0.804828
0.733514
0.847314
259
2003
0.885766
0.791766
0.963670
255
2002
1.060945
0.953562
1.165773
255
2001
1.117587
1.047669
1.192748
255
2000
1.085899
0.962649
1.211827
255
1999
0.939475
0.848176
0.998502
261
exerciseth
file
``
countries_population.csv
''
is
a
csv
file
,
contain
the
popul
number
of
all
countri
(
juli
2014
)
.
the
delimit
of
the
file
is
a
space
and
comma
are
use
to
separ
group
of
thousand
in
the
number
.
the
method
'head
(
n
)
'
of
a
datafram
can
be
use
to
give
out
onli
the
first
n
row
or
line
.
read
the
file
into
a
datafram
.
solut
:
pop
=
pd.read_csv
(
``
data1/countries_population.csv
''
,
header=non
,
names=
[
``
countri
''
,
``
popul
''
]
,
index_col=0
,
quotechar=
''
'
''
,
sep=
''
``
,
thousands=
''
,
''
)
print
(
pop.head
(
5
)
)
popul
countri
china
1355692576
india
1236344631
european
union
511434812
unit
state
318892103
indonesia
253609643
write
csv
file
We
can
creat
csv
(
or
dsv
)
file
with
the
method
``
to_csv
''
.
befor
we
do
thi
,
we
will
prepar
some
data
to
output
,
which
we
will
write
to
a
file
.
We
have
two
csv
file
with
popul
data
for
variou
countri
.
countries_male_population.csv
contain
the
figur
of
the
male
popul
and
countries_male_population.csv
correspondingli
the
number
for
the
femal
popul
.
We
will
creat
a
new
csv
file
with
the
sum
:
column_nam
=
[
``
countri
''
]
+
list
(
rang
(
2002
,
2013
)
)
male_pop
=
pd.read_csv
(
``
data1/countries_male_population.csv
''
,
header=non
,
index_col=0
,
names=column_nam
)
female_pop
=
pd.read_csv
(
``
data1/countries_female_population.csv
''
,
header=non
,
index_col=0
,
names=column_nam
)
popul
=
male_pop
+
female_pop
popul
the
previou
code
return
the
follow
:
2002
2003
2004
2005
2006
2007
2008
2009
2010
2011
2012
countri
australia
19640979.0
19872646
20091504
20339759
20605488
21015042
21431781
21874920
22342398
22620554
22683573
austria
8139310.0
8067289
8140122
8206524
8265925
8298923
8331930
8355260
8375290
8404252
8443018
belgium
10309725.0
10355844
10396421
10445852
10511382
10584534
10666866
10753080
10839905
10366843
11035958
canada
nan
31361611
31372587
31989454
32299496
32649482
32927372
33327337
33334414
33927935
34492645
czech
republ
10269726.0
10203269
10211455
10220577
10251079
10287189
10381130
10467542
10506813
10532770
10505445
denmark
5368354.0
5383507
5397640
5411405
5427459
5447084
5475791
5511451
5534738
5560628
5580516
finland
5194901.0
5206295
5219732
5236611
5255580
5276955
5300484
5326314
5351427
5375276
5401267
franc
59337731.0
59630121
59900680
62518571
62998773
63392140
63753140
64366962
64716310
65129746
65394283
germani
82440309.0
82536680
82531671
82500849
82437995
82314906
82217837
82002356
81802257
81751602
81843743
greec
10988000.0
11006377
11040650
11082751
11125179
11171740
11213785
11260402
11305118
11309885
11290067
hungari
10174853.0
10142362
10116742
10097549
10076581
10066158
10045401
10030975
10014324
9985722
9957731
iceland
286575.0
288471
290570
293577
299891
307672
315459
319368
317630
318452
319575
ireland
3882683.0
3963636
4027732
4109173
4209019
4239848
4401335
4450030
4467854
4569864
4582769
itali
56993742.0
57321070
57888245
58462375
58751711
59131287
59619290
60045068
60340328
60626442
60820696
japan
127291000.0
127435000
127620000
127687000
127767994
127770000
127771000
127692000
127510000
128057000
127799000
korea
47639618.0
47925318
48082163
48138077
48297184
48456369
48606787
48746693
48874539
49779440
50004441
luxembourg
444050.0
448300
451600
455000
469086
476187
483799
493500
502066
511840
524853
mexico
101826249.0
103039964
104213503
103001871
103946866
104874282
105790725
106682518
107550697
108396211
115682867
netherland
16105285.0
16192572
16258032
16305526
16334210
16357992
16405399
16485787
16574989
16655799
16730348
new
zealand
3939130.0
4009200
4062500
4100570
4139470
4228280
4268880
4315840
4367740
4405150
4433100
norway
4524066.0
4552252
4577457
4606363
4640219
4681134
4737171
4799252
4858199
4920305
4985870
poland
38632453.0
38218531
38190608
38173835
38157055
38125479
38115641
38135876
38167329
38200037
38538447
portug
10335559.0
10407465
10474685
10529255
10569592
10599095
10617575
10627250
10637713
10636979
10542398
slovak
republ
5378951.0
5379161
5380053
5384822
5389180
5393637
5400998
5412254
5424925
5435273
5404322
spain
40409330.0
41550584
42345342
43038035
43758250
44474631
45283259
45828172
45989016
46152926
46818221
sweden
8909128.0
8940788
8975670
9011392
9047752
9113257
9182927
9256347
9340682
9415570
9482855
switzerland
7261210.0
7313853
7364148
7415102
7459128
7508739
7593494
7701856
7785806
7870134
7954662
turkey
nan
70171979
70689500
71607500
72519974
72519974
70586256
71517100
72561312
73722988
74724269
unit
kingdom
58706905.0
59262057
59699828
60059858
60412870
60781346
61179260
61595094
62026962
62498612
63256154
unit
state
277244916.0
288774226
290810719
294442683
297308143
300184434
304846731
305127551
307756577
309989078
312232049
population.to_csv
(
``
data1/countries_total_population.csv
''
)
We
want
to
creat
a
new
datafram
with
all
the
inform
,
i.e
.
femal
,
male
and
complet
popul
.
thi
mean
that
we
have
to
introduc
an
hierarch
index
.
befor
we
do
it
on
our
datafram
,
we
will
introduc
thi
problem
in
a
simpl
exampl
:
import
panda
as
pd
shop1
=
{
``
foo
''
:
{
2010:23
,
2011:25
}
,
``
bar
''
:
{
2010:13
,
2011:29
}
}
shop2
=
{
``
foo
''
:
{
2010:223
,
2011:225
}
,
``
bar
''
:
{
2010:213
,
2011:229
}
}
shop1
=
pd.datafram
(
shop1
)
shop2
=
pd.datafram
(
shop2
)
both_shop
=
shop1
+
shop2
print
(
``
sale
of
shop1
:
\n
''
,
shop1
)
print
(
``
\nsale
of
both
shops\n
''
,
both_shop
)
sale
of
shop1
:
bar
foo
2010
13
23
2011
29
25
sale
of
both
shop
bar
foo
2010
226
246
2011
258
250
shop
=
pd.concat
(
[
shop1
,
shop2
]
,
keys=
[
``
one
''
,
``
two
''
]
)
shop
the
abov
python
code
return
the
follow
:
bar
foo
one
2010
13
23
2011
29
25
two
2010
213
223
2011
229
225
We
want
to
swap
the
hierarch
indic
.
for
thi
we
will
use
'swaplevel
'
:
shops.swaplevel
(
)
shops.sort_index
(
inplace=tru
)
shop
the
previou
code
return
the
follow
result
:
bar
foo
one
2010
13
23
2011
29
25
two
2010
213
223
2011
229
225
We
will
go
back
to
our
initi
problem
with
the
popul
figur
.
We
will
appli
the
same
step
to
those
datafram
:
pop_complet
=
pd.concat
(
[
population.t
,
male_pop.t
,
female_pop.t
]
,
keys=
[
``
total
''
,
``
male
''
,
``
femal
''
]
)
df
=
pop_complete.swaplevel
(
)
df.sort_index
(
inplace=tru
)
df
[
[
``
austria
''
,
``
australia
''
,
``
franc
''
]
]
thi
get
us
the
follow
output
:
countri
austria
australia
franc
2002
femal
4179743.0
9887846.0
30510073.0
male
3959567.0
9753133.0
28827658.0
total
8139310.0
19640979.0
59337731.0
2003
femal
4158169.0
9999199.0
30655533.0
male
3909120.0
9873447.0
28974588.0
total
8067289.0
19872646.0
59630121.0
2004
femal
4190297.0
10100991.0
30789154.0
male
3949825.0
9990513.0
29111526.0
total
8140122.0
20091504.0
59900680.0
2005
femal
4220228.0
10218321.0
32147490.0
male
3986296.0
10121438.0
30371081.0
total
8206524.0
20339759.0
62518571.0
2006
femal
4246571.0
10348070.0
32390087.0
male
4019354.0
10257418.0
30608686.0
total
8265925.0
20605488.0
62998773.0
2007
femal
4261752.0
10570420.0
32587979.0
male
4037171.0
10444622.0
30804161.0
total
8298923.0
21015042.0
63392140.0
2008
femal
4277716.0
10770864.0
32770860.0
male
4054214.0
10660917.0
30982280.0
total
8331930.0
21431781.0
63753140.0
2009
femal
4287213.0
10986535.0
33208315.0
male
4068047.0
10888385.0
31158647.0
total
8355260.0
21874920.0
64366962.0
2010
femal
4296197.0
11218144.0
33384930.0
male
4079093.0
11124254.0
31331380.0
total
8375290.0
22342398.0
64716310.0
2011
femal
4308915.0
11359807.0
33598633.0
male
4095337.0
11260747.0
31531113.0
total
8404252.0
22620554.0
65129746.0
2012
femal
4324983.0
11402769.0
33723892.0
male
4118035.0
11280804.0
31670391.0
total
8443018.0
22683573.0
65394283.0
In
[
]
:
df.to_csv
(
``
data1/countries_total_population.csv
''
)
exercis
read
in
the
dsv
file
(
csv
)
bundeslaender.txt
.
creat
a
new
file
with
the
column
'land
'
,
'area
'
,
'femal
'
,
'male
'
,
'popul
'
and
'densiti
'
(
inhabit
per
squar
kilometr
.
print
out
the
row
where
the
area
is
greater
than
30000
and
the
popul
is
greater
than
10000
print
the
row
where
the
densiti
is
greater
than
300
In
[
]
:
land
=
pd.read_csv
(
'data1/bundeslaender.txt
'
,
sep=
''
``
)
print
(
lands.columns.valu
)
In
[
]
:
#
swap
the
column
of
our
datafram
:
land
=
lands.reindex
(
columns=
[
'land
'
,
'area
'
,
'femal
'
,
'male
'
]
)
land
[
:2
]
In
[
]
:
lands.insert
(
loc=len
(
lands.column
)
,
column='popul
'
,
value=land
[
'femal
'
]
+
land
[
'male
'
]
)
In
[
]
:
land
[
:3
]
In
[
]
:
lands.insert
(
loc=len
(
lands.column
)
,
column='dens
'
,
value=
(
land
[
'popul
'
]
*
1000
/
land
[
'area
'
]
)
.round
(
0
)
)
land
[
:4
]
In
[
]
:
print
(
lands.loc
[
(
lands.area
>
30000
)
&
(
lands.popul
>
10000
)
]
)
read
and
write
excel
filesit
is
also
possibl
to
read
and
write
microsoft
excel
file
.
the
panda
function
to
read
and
write
excel
file
use
the
modul
'xlrd
'
and
'openpyxl
'
.
these
modul
are
not
automat
instal
by
panda
,
so
you
may
have
to
instal
them
manual
!
We
will
use
a
simpl
excel
document
to
demonstr
the
read
capabl
of
panda
.
the
document
sales.xl
contain
two
sheet
,
one
call
'week1
'
and
the
other
one
'week2
'
.
An
excel
file
can
be
read
in
with
the
panda
function
``
read_excel
''
.
thi
is
demonstr
in
the
follow
exampl
python
code
:
In
[
]
:
excel_fil
=
pd.excelfil
(
``
data1/sales.xl
''
)
sheet
=
pd.read_excel
(
excel_fil
)
sheet
the
document
``
sales.xl
''
contain
two
sheet
,
but
we
onli
have
been
abl
to
read
in
the
first
one
with
``
read_excel
''
.
A
complet
excel
document
,
which
can
consist
of
an
arbitrari
number
of
sheet
,
can
be
complet
read
in
like
thi
:
In
[
]
:
document
=
{
}
for
sheet_nam
in
xls.sheet_nam
:
document
[
sheet_nam
]
=
xls.pars
(
sheet_nam
)
for
sheet_nam
in
document
:
print
(
``
\n
''
+
sheet_nam
+
``
:
\n
''
,
document
[
sheet_nam
]
)
previou
chapter
:
panda
datafram
next
chapter
:
deal
with
nan
©
2011
-
2018
,
bernd
klein
,
bodenseo
;
design
by
denis
mitchinson
adapt
for
python-course.eu
by
bernd
klein
