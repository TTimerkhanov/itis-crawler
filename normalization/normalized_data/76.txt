numer
&
scientif
comput
with
python
:
creat
synthet
test
data
with
python
and
numpi
numer
python
cours
numer
program
numpi
introductioncr
numpi
arraysdata
type
object
,
dtypenumer
oper
on
numpi
arrayschang
the
dimens
of
arrayspython
,
numpi
and
probabilityweight
choic
and
weight
samplescr
of
synthet
test
databoolean
mask
of
arraysmatrix
arithmeticread
and
write
ndarraysmatplotlib
introductionspin
and
tickslegend
and
annotationsmultipl
figur
and
axeshistogramscontour
plotspython
imag
process
tutorialimag
process
techniquespanda
tutorialpanda
dataframespanda
data
filesd
with
nanbin
datapanda
tutori
continu
:
multi-level
indexingdata
visual
with
panda
and
pythonpython
,
date
and
timepython
,
panda
and
timeserieslinear
combin
definit
of
synthet
data
synthet
data
are
data
which
are
artifici
creat
,
usual
through
the
applic
of
comput
.
these
data
do
n't
stem
from
real
data
,
but
they
simul
real
data
.
In
plain
word
``
they
look
and
feel
like
actual
data
''
.
thi
websit
is
creat
by
:
python
train
cours
in
toronto
,
canada
thi
websit
is
free
of
annoy
ad
.
We
want
to
keep
it
like
thi
.
you
can
help
with
your
donat
:
the
need
for
donat
bernd
klein
on
facebook
search
thi
websit
:
thi
topic
in
german
/
deutsch
übersetzung
:
synthetisch
testdatenerzeugung
mit
pythonclassroom
train
cours
thi
websit
contain
a
free
and
extens
onlin
tutori
by
bernd
klein
,
use
materi
from
hi
classroom
python
train
cours
.
If
you
are
interest
in
an
instructor-l
classroom
train
cours
,
you
may
have
a
look
at
the
python
class
by
bernd
klein
at
bodenseo
.
©
kabliczech
-
fotolia.com
quot
of
the
day
:
''
It
's
hardwar
that
make
a
machin
fast
.
It
's
softwar
that
make
a
fast
machin
slow
.
''
(
craig
bruce
)
If
you
have
the
choic
work
with
python
2
or
python
3
,
we
recomend
to
switch
to
python
3
!
you
can
read
our
python
tutori
to
see
what
the
differ
are
.
data
protect
declar
data
protect
declar
previou
chapter
:
weight
choic
and
weight
sampl
next
chapter
:
boolean
mask
of
array
synthet
test
data
with
python
definit
of
synthet
data
there
is
hardli
ani
engin
or
scientist
who
doe
n't
understand
the
need
for
synthet
data
,
also
call
synthet
data
.
but
some
may
have
ask
themselv
what
do
we
understand
by
synthet
test
data
?
there
are
lot
of
situt
,
where
a
scientist
or
an
engin
need
learn
or
test
data
,
but
it
is
hard
or
imposs
to
get
real
data
,
i.e
.
a
sampl
from
a
popul
obtain
by
measur
.
the
task
or
challeng
of
creat
synthet
data
consist
in
produc
data
which
resembl
or
come
quit
close
to
the
intend
``
real
life
''
data
.
python
is
an
ideal
languag
for
easili
produc
such
data
,
becaus
it
ha
power
numer
and
linguist
function
.
synthet
data
are
also
necessari
to
satisfi
specif
need
or
certain
condit
that
may
not
be
found
in
the
``
real
life
''
data
.
anoth
use
case
of
synthet
data
is
to
protect
privaci
of
the
data
need
.
In
our
previou
chapter
``
python
,
numpi
and
probabl
''
,
we
have
written
some
function
,
which
we
will
need
in
the
follow
:
find_interv
weighted_choic
cartesian_choic
weighted_cartesian_choic
weighted_sampl
you
should
be
familiar
with
the
way
of
work
of
these
function
.
We
save
the
function
in
a
modul
with
the
name
bk_random
.
definit
of
the
scope
of
synthet
data
creationw
want
to
provid
solut
to
the
follow
task
:
We
have
n
finit
set
contain
data
of
variou
type
:
D1
,
D2
,
...
Dn
the
set
Di
are
the
data
set
from
which
we
want
to
deduc
our
synthet
data
.
In
the
actual
implement
,
the
set
will
be
tupl
or
list
for
practic
reason
.
the
process
of
creat
synthet
data
can
be
defin
by
two
function
``
synthes
''
and
``
synthes
''
.
usual
,
the
word
synthes
is
use
for
a
computer
electron
devic
which
produc
sound
.
our
synthes
produc
string
or
altern
tupl
with
data
,
as
we
will
see
later
.
the
function
synthes
creat
the
function
synthes
:
synthes
=
synthes
(
(
D1
,
D2
,
...
Dn
)
)
the
function
synthes
,
-
which
may
also
be
a
gener
like
in
our
implement
,
-
take
no
argument
and
the
result
of
a
function
call
sythes
(
)
will
be
a
list
or
a
tupl
t
=
(
d1
,
d2
,
...
dn
)
where
di
is
drawn
at
random
from
Di
or
a
string
which
contain
the
element
str
(
d1
)
,
str
(
d2
)
,
...
str
(
dn
)
where
di
is
also
drawn
at
random
from
Di
let
us
start
with
a
simpl
exampl
.
We
have
a
list
of
firstnam
and
a
list
of
surnam
.
We
want
to
hire
employe
for
an
institut
or
compani
.
Of
cours
,
it
will
be
a
lot
easier
in
our
synthet
python
environ
to
find
and
hire
specialst
than
in
real
life
.
the
function
``
cartesian_choic
''
from
the
bk_random
modul
and
the
concaten
of
the
randomli
drawn
firstnam
and
surnam
is
all
it
take
.
import
bk_random
firstnam
=
[
``
john
''
,
``
eve
''
,
``
jane
''
,
``
paul
''
,
``
frank
''
,
``
laura
''
,
``
robert
''
,
``
kathrin
''
,
``
roger
''
,
``
simon
''
,
``
bernard
''
,
``
sarah
''
,
``
yvonn
''
]
surnam
=
[
``
singer
''
,
``
mile
''
,
``
moor
''
,
``
looper
''
,
``
rampman
''
,
``
chopman
''
,
``
smiley
''
,
``
bychan
''
,
``
smith
''
,
``
baker
''
,
``
miller
''
,
``
cook
''
]
number_of_specialist
=
15
employe
=
set
(
)
while
len
(
employe
)
<
number_of_specialist
:
employe
=
bk_random.cartesian_choic
(
firstnam
,
surnam
)
employees.add
(
``
``
.join
(
employe
)
)
print
(
employe
)
{
'laura
smith
'
,
'yvonn
mile
'
,
'sarah
cook
'
,
'jane
smith
'
,
'paul
moor
'
,
'jane
mile
'
,
'jane
looper
'
,
'frank
singer
'
,
'frank
mile
'
,
'jane
cook
'
,
'frank
chopman
'
,
'laura
cook
'
,
'yvonn
bychan
'
,
'eve
mile
'
,
'simon
cook
'
}
thi
wa
easi
enough
,
but
we
want
to
do
it
now
in
a
more
structur
way
,
use
the
synthes
approach
we
mention
befor
.
the
code
for
the
case
in
which
the
paramet
``
weight
''
is
not
none
is
still
miss
in
the
follow
implement
:
import
bk_random
firstnam
=
[
``
john
''
,
``
eve
''
,
``
jane
''
,
``
paul
''
,
``
frank
''
,
``
laura
''
,
``
robert
''
,
``
kathrin
''
,
``
roger
''
,
``
simon
''
,
``
bernard
''
,
``
sarah
''
,
``
yvonn
''
]
surnam
=
[
``
singer
''
,
``
mile
''
,
``
moor
''
,
``
looper
''
,
``
rampman
''
,
``
chopman
''
,
``
smiley
''
,
``
bychan
''
,
``
smith
''
,
``
baker
''
,
``
miller
''
,
``
cook
''
]
def
synthes
(
data
,
weights=non
,
format_func=non
,
repeats=tru
)
:
``
''
''
data
is
a
tupl
or
list
of
list
or
tupl
contain
the
data
weight
is
a
list
or
tupl
of
list
or
tupl
with
the
correspond
weight
of
the
data
list
or
tupl
format_func
is
a
refer
to
a
function
which
defin
how
a
random
result
of
the
creator
function
will
be
format
.
If
none
,
``
creator
''
will
return
the
list
``
re
''
.
If
repeat
is
set
to
true
,
the
result
of
helper
will
not
be
uniqu
``
''
''
def
synthes
(
)
:
if
not
repeat
:
memori
=
set
(
)
while
true
:
re
=
bk_random.cartesian_choic
(
*data
)
if
not
repeat
:
sre
=
str
(
re
)
while
sre
in
memori
:
re
=
bk_random.cartesian_choic
(
*data
)
sre
=
str
(
re
)
memory.add
(
sre
)
if
format_func
:
yield
format_func
(
re
)
els
:
yield
re
return
synthes
recruit_employe
=
synthes
(
(
firstnam
,
surnam
)
,
format_func=lambda
x
:
``
``
.join
(
x
)
,
repeats=fals
)
employe
=
recruit_employe
(
)
for
_
in
rang
(
15
)
:
print
(
next
(
employe
)
)
sarah
baker
frank
smiley
simon
smiley
frank
bychan
sarah
moor
simon
chopman
frank
chopman
eve
rampman
bernard
miller
simon
bychan
jane
singer
roger
smith
john
baker
robert
cook
kathrin
cook
everi
name
,
i.e
first
name
and
last
name
,
had
the
same
likehood
to
be
drawn
in
the
previou
exampl
.
thi
is
not
veri
realist
,
becaus
we
will
expect
in
countri
like
the
US
or
england
name
like
smith
and
miller
to
occur
more
often
than
name
like
rampman
or
bychan
.
We
will
extend
our
synthes
function
with
addit
code
for
the
``
weight
''
case
,
i.e
.
weight
is
not
none
.
If
weight
are
given
,
we
will
have
to
use
the
function
weighted_cartesian_choic
from
the
bk_random
modul
.
If
``
weight
''
is
set
to
none
,
we
will
have
to
call
the
function
cartesian_choic
.
We
put
thi
decis
into
a
differ
subfunct
of
synthes
to
keep
the
function
synthes
clearer
.
We
do
not
want
to
fiddl
around
with
probabilit
between
0
and
1
in
defin
the
weight
,
so
we
take
the
detour
with
integ
,
which
we
normal
afterward
.
from
bk_random
import
cartesian_choic
,
weighted_cartesian_choic
weighted_firstnam
=
[
(
``
john
''
,
80
)
,
(
``
eve
''
,
70
)
,
(
``
jane
''
,
2
)
,
(
``
paul
''
,
8
)
,
(
``
frank
''
,
20
)
,
(
``
laura
''
,
6
)
,
(
``
robert
''
,
17
)
,
(
``
zoe
''
,
3
)
,
(
``
roger
''
,
8
)
,
(
``
edgar
''
,
4
)
,
(
``
susann
''
,
11
)
,
(
``
dorothe
''
,
22
)
,
(
``
tim
''
,
17
)
,
(
``
donald
''
,
12
)
,
(
``
igor
''
,
15
)
,
(
``
simon
''
,
9
)
,
(
``
bernard
''
,
8
)
,
(
``
sarah
''
,
7
)
,
(
``
yvonn
''
,
11
)
,
(
``
bill
''
,
12
)
,
(
``
bernd
''
,
10
)
]
weighted_surnam
=
[
(
'singer
'
,
2
)
,
(
'mile
'
,
2
)
,
(
'moor
'
,
5
)
,
(
'strongman
'
,
5
)
,
(
'romero
'
,
3
)
,
(
``
yiang
''
,
4
)
,
(
'looper
'
,
1
)
,
(
'rampman
'
,
1
)
,
(
'chopman
'
,
1
)
,
(
'smiley
'
,
1
)
,
(
'bychan
'
,
1
)
,
(
'smith
'
,
150
)
,
(
'baker
'
,
144
)
,
(
'miller
'
,
87
)
,
(
'cook
'
,
5
)
,
(
'joyc
'
,
1
)
,
(
'bush
'
,
5
)
,
(
'shorter
'
,
6
)
,
(
'wagner
'
,
10
)
,
(
'sundigo
'
,
10
)
,
(
'firenz
'
,
8
)
,
(
'puttner
'
,
20
)
,
(
'faulkner
'
,
10
)
,
(
'bowman
'
,
11
)
,
(
'klein
'
,
1
)
,
(
'jungster
'
,
14
)
,
(
``
warner
''
,
14
)
,
(
'tiller
'
,
9
)
,
(
'wogner
'
,
10
)
,
(
'blumenth
'
,
16
)
]
firstnam
,
weight
=
zip
(
*weighted_firstnam
)
wsum
=
sum
(
weight
)
weights_firstnam
=
[
x
/
wsum
for
x
in
weight
]
surnam
,
weight
=
zip
(
*weighted_surnam
)
wsum
=
sum
(
weight
)
weights_surnam
=
[
x
/
wsum
for
x
in
weight
]
weight
=
(
weights_firstnam
,
weights_surnam
)
def
synthes
(
data
,
weights=non
,
format_func=non
,
repeats=tru
)
:
``
''
''
``
data
''
is
a
tupl
or
list
of
list
or
tupl
contain
the
data
.
``
weight
''
is
a
list
or
tupl
of
list
or
tupl
with
the
correspond
weight
of
the
data
list
or
tupl
.
``
format_func
''
is
a
refer
to
a
function
which
defin
how
a
random
result
of
the
creator
function
will
be
format
.
If
none
,
the
gener
``
synthes
''
will
yield
the
list
``
re
''
.
If
``
repeat
''
is
set
to
true
,
the
output
valu
yield
by
``
synthes
''
will
not
be
unique.
``
''
''
def
choic
(
data
,
weight
)
:
if
weight
:
return
weighted_cartesian_choic
(
*zip
(
data
,
weight
)
)
els
:
return
cartesian_choic
(
*data
)
def
synthes
(
)
:
if
not
repeat
:
memori
=
set
(
)
while
true
:
re
=
choic
(
data
,
weight
)
if
not
repeat
:
sre
=
str
(
re
)
while
sre
in
memori
:
re
=
choic
(
data
,
weight
)
sre
=
str
(
re
)
memory.add
(
sre
)
if
format_func
:
yield
format_func
(
re
)
els
:
yield
re
return
synthes
recruit_employe
=
synthes
(
(
firstnam
,
surnam
)
,
weight
=
weight
,
format_func=lambda
x
:
``
``
.join
(
x
)
,
repeats=fals
)
employe
=
recruit_employe
(
)
for
_
in
rang
(
12
)
:
print
(
next
(
employe
)
)
frank
baker
frank
smith
eve
smith
dorothe
baker
john
smith
bill
bush
john
sundigo
laura
blumenth
zoe
smith
igor
baker
bill
miller
eve
baker
wine
exampl
let
's
imagin
that
you
have
to
describ
a
dozen
wine
.
most
probabl
a
nice
imagin
for
mani
,
but
I
have
to
admit
that
it
is
not
for
me
.
the
main
reason
is
that
I
am
not
a
wine
drinker
!
We
can
write
a
littl
python
program
,
which
will
use
our
synthes
function
to
creat
automat
``
sophist
critic
''
like
thi
one
:
thi
wine
is
light-bodi
with
a
conveni
juici
bouquet
lead
to
a
linger
flamboy
finish
!
tri
to
find
some
adverb
,
like
``
seamlessli
''
,
``
assert
''
,
and
some
adject
,
like
``
fruiti
''
and
``
refin
''
,
to
describ
the
aroma
.
If
you
have
defin
your
list
,
you
can
use
the
synthes
function
.
here
is
our
solut
,
in
case
you
do
n't
want
to
do
it
on
your
own
:
import
bk_random
bodi
=
[
'light-bodi
'
,
'medium-bodi
'
,
'full-bodi
'
]
adverb
=
[
'appropri
'
,
'assert
'
,
'authorit
'
,
'compellingli
'
,
'complet
'
,
'continu
'
,
'conveni
'
,
'credibl
'
,
'distinct
'
,
'dramat
'
,
'dynam
'
,
'effici
'
,
'energist
'
,
'enthusiast
'
,
'fungibl
'
,
'global
'
,
'holisticli
'
,
'interact
'
,
'intrins
'
,
'monotonect
'
,
'object
'
,
'phosfluoresc
'
,
'proactiv
'
,
'profession
'
,
'progress
'
,
'quickli
'
,
'rapidi
'
,
'seamlessli
'
,
'synergist
'
,
'uniqu
'
]
noun
=
[
'aroma
'
,
'bouquet
'
,
'flavour
'
]
aroma
=
[
'angular
'
,
'bright
'
,
'linger
'
,
'butterscotch
'
,
'butteri
'
,
'chocol
'
,
'complex
'
,
'earth
'
,
'flabbi
'
,
'flamboy
'
,
'fleshi
'
,
'flower
'
,
'food
friendli
'
,
'fruit
'
,
'grass
'
,
'herb
'
,
'jammi
'
,
'juici
'
,
'mocha
'
,
'oak
'
,
'refin
'
,
'structur
'
,
'tight
'
,
'toast
'
,
'toasti
'
,
'tobacco
'
,
'unctuou
'
,
'unoak
'
,
'vanilla
'
,
'velvetli
'
]
exampl
=
``
''
''
thi
wine
is
light-bodi
with
a
complet
butteri
bouquet
lead
to
a
linger
fruiti
finish
!
''
''
''
def
describ
(
data
)
:
bodi
,
adv
,
adj
,
noun
,
adj2
=
data
format_str
=
``
thi
wine
is
%
s
with
a
%
s
%
s
%
s\nlead
to
''
format_str
+=
``
a
linger
%
s
finish
!
''
return
format_str
%
(
bodi
,
adv
,
adj
,
noun
,
adj2
)
t
=
bk_random.cartesian_choic
(
bodi
,
adverb
,
aroma
,
noun
,
aroma
)
data
=
(
bodi
,
adverb
,
aroma
,
noun
,
aroma
)
synthes
=
synthes
(
data
,
weights=non
,
format_func=describ
,
repeats=tru
)
critic
=
synthes
(
)
for
i
in
rang
(
1
,
13
)
:
print
(
``
{
0
:
d
}
.
wine
:
''
.format
(
i
)
)
print
(
next
(
critic
)
)
print
(
)
1.
wine
:
thi
wine
is
light-bodi
with
a
progress
earth
bouquet
lead
to
a
linger
complex
finish
!
2.
wine
:
thi
wine
is
medium-bodi
with
a
energist
unctuou
bouquet
lead
to
a
linger
vanilla
finish
!
3.
wine
:
thi
wine
is
medium-bodi
with
a
synergist
flamboy
flavour
lead
to
a
linger
unoak
finish
!
4.
wine
:
thi
wine
is
light-bodi
with
a
uniqu
toasti
flavour
lead
to
a
linger
juici
finish
!
5.
wine
:
thi
wine
is
full-bodi
with
a
holisticli
flower
flavour
lead
to
a
linger
tobacco
finish
!
6.
wine
:
thi
wine
is
full-bodi
with
a
energist
toasti
flavour
lead
to
a
linger
chocol
finish
!
7.
wine
:
thi
wine
is
full-bodi
with
a
proactiv
tobacco
bouquet
lead
to
a
linger
velvetli
finish
!
8.
wine
:
thi
wine
is
full-bodi
with
a
authorit
mocha
aroma
lead
to
a
linger
juici
finish
!
9.
wine
:
thi
wine
is
light-bodi
with
a
dynam
vanilla
flavour
lead
to
a
linger
juici
finish
!
10.
wine
:
thi
wine
is
medium-bodi
with
a
dynam
structur
flavour
lead
to
a
linger
complex
finish
!
11.
wine
:
thi
wine
is
full-bodi
with
a
distinct
fruit
flavour
lead
to
a
linger
complex
finish
!
12.
wine
:
thi
wine
is
medium-bodi
with
a
conveni
tight
aroma
lead
to
a
linger
chocol
finish
!
exercis
:
intern
disast
oper
It
would
be
gorgeou
,
if
the
problem
describ
in
thi
exercis
,
would
be
pure
synthet
,
i.e
.
there
would
be
no
further
catastoph
in
the
world
.
complet
unrealist
,
but
a
nice
daydream
.
So
,
the
task
of
thi
exercis
is
to
provid
synthet
test
data
for
an
intern
disast
oper
.
the
countri
take
part
in
thi
mission
might
be
e.g
.
franc
,
switzerland
,
germani
,
canada
,
the
netherland
,
the
unit
state
,
austria
,
belgium
and
luxembourg
.
We
want
to
creat
a
file
with
random
entri
of
aid
.
each
line
should
consist
of
:
uniqueidentifi
,
firstnam
,
lastnam
,
countri
,
field
for
exampl
:
001
,
jean-paul
,
rennier
,
franc
,
medic
aid
002
,
nathan
,
bloomfield
,
canada
,
secur
aid
003
,
michael
,
mayer
,
germani
,
social
worker
for
practic
reason
,
we
will
reduc
the
countri
to
franc
,
itali
,
switzerland
and
germani
in
the
follow
exampl
implement
:
from
bk_random
import
cartesian_choic
,
weighted_cartesian_choic
countri
=
[
``
franc
''
,
``
switzerland
''
,
``
germani
''
]
w_firstnam
=
{
``
franc
''
:
[
(
``
mari
''
,
10
)
,
(
``
thoma
''
,
10
)
,
(
``
camil
''
,
10
)
,
(
``
nicola
''
,
9
)
,
(
``
léa
''
,
10
)
,
(
``
julien
''
,
9
)
,
(
``
manon
''
,
9
)
,
(
``
quentin
''
,
9
)
,
(
``
chloé
''
,
8
)
,
(
``
maxim
''
,
9
)
,
(
``
laura
''
,
7
)
,
(
``
alexandr
''
,
6
)
,
(
``
clementin
''
,
2
)
,
(
``
grégori
''
,
2
)
,
(
``
sandra
''
,
1
)
,
(
``
philipp
''
,
1
)
]
,
``
switzerland
''
:
[
(
``
sarah
''
,
10
)
,
(
``
han
''
,
10
)
,
(
``
laura
''
,
9
)
,
(
``
peter
''
,
8
)
,
(
``
mélissa
''
,
9
)
,
(
``
walter
''
,
7
)
,
(
``
océan
''
,
7
)
,
(
``
daniel
''
,
7
)
,
(
``
noémi
''
,
6
)
,
(
``
reto
''
,
7
)
,
(
``
laura
''
,
7
)
,
(
``
bruno
''
,
6
)
,
(
``
eva
''
,
2
)
,
(
``
urli
''
,
4
)
,
(
``
sandra
''
,
1
)
,
(
``
marcel
''
,
1
)
]
,
``
germani
''
:
[
(
``
ursula
''
,
10
)
,
(
``
peter
''
,
10
)
,
(
``
monika
''
,
9
)
,
(
``
michael
''
,
8
)
,
(
``
brigitt
''
,
9
)
,
(
``
thoma
''
,
7
)
,
(
``
stefani
''
,
7
)
,
(
``
andrea
''
,
7
)
,
(
``
maria
''
,
6
)
,
(
``
wolfgang
''
,
7
)
,
(
``
gabriel
''
,
7
)
,
(
``
manfr
''
,
6
)
,
(
``
nicol
''
,
2
)
,
(
``
matthia
''
,
4
)
,
(
``
christin
''
,
1
)
,
(
``
dirk
''
,
1
)
]
,
``
itali
''
:
[
(
``
francesco
''
,
20
)
,
(
``
alessandro
''
,
19
)
,
(
``
mattia
''
,
19
)
,
(
``
lorenzo
''
,
18
)
,
(
``
leonardo
''
,
16
)
,
(
``
andrea
''
,
15
)
,
(
``
gabriel
''
,
14
)
,
(
``
matteo
''
,
14
)
,
(
``
tommaso
''
,
12
)
,
(
``
riccardo
''
,
11
)
,
(
``
sofia
''
,
20
)
,
(
``
aurora
''
,
18
)
,
(
``
giulia
''
,
16
)
,
(
``
giorgia
''
,
15
)
,
(
``
alic
''
,
14
)
,
(
``
martina
''
,
13
)
]
}
w_surnam
=
{
``
franc
''
:
[
(
``
matin
''
,
10
)
,
(
``
bernard
''
,
10
)
,
(
``
camil
''
,
10
)
,
(
``
nicola
''
,
9
)
,
(
``
duboi
''
,
10
)
,
(
``
petit
''
,
9
)
,
(
``
durand
''
,
8
)
,
(
``
leroy
''
,
8
)
,
(
``
fournier
''
,
7
)
,
(
``
lambert
''
,
6
)
,
(
``
mercier
''
,
5
)
,
(
``
rousseau
''
,
4
)
,
(
``
mathieu
''
,
2
)
,
(
``
fontain
''
,
2
)
,
(
``
muller
''
,
1
)
,
(
``
robin
''
,
1
)
]
,
``
switzerland
''
:
[
(
``
müller
''
,
10
)
,
(
``
meier
''
,
10
)
,
(
``
schmid
''
,
9
)
,
(
``
keller
''
,
8
)
,
(
``
weber
''
,
9
)
,
(
``
huber
''
,
7
)
,
(
``
schneider
''
,
7
)
,
(
``
meyer
''
,
7
)
,
(
``
steiner
''
,
6
)
,
(
``
fischer
''
,
7
)
,
(
``
gerber
''
,
7
)
,
(
``
brunner
''
,
6
)
,
(
``
baumann
''
,
2
)
,
(
``
frei
''
,
4
)
,
(
``
zimmermann
''
,
1
)
,
(
``
moser
''
,
1
)
]
,
``
germani
''
:
[
(
``
müller
''
,
10
)
,
(
``
schmidt
''
,
10
)
,
(
``
schneider
''
,
9
)
,
(
``
fischer
''
,
8
)
,
(
``
weber
''
,
9
)
,
(
``
meyer
''
,
7
)
,
(
``
wagner
''
,
7
)
,
(
``
becker
''
,
7
)
,
(
``
schulz
''
,
6
)
,
(
``
hoffmann
''
,
7
)
,
(
``
schäfer
''
,
7
)
,
(
``
koch
''
,
6
)
,
(
``
bauer
''
,
2
)
,
(
``
richter
''
,
4
)
,
(
``
klein
''
,
2
)
,
(
``
schröder
''
,
1
)
]
,
``
itali
''
:
[
(
``
rossi
''
,
20
)
,
(
``
russo
''
,
19
)
,
(
``
ferrari
''
,
19
)
,
(
``
esposito
''
,
18
)
,
(
``
bianchi
''
,
16
)
,
(
``
romano
''
,
15
)
,
(
``
colombo
''
,
14
)
,
(
``
ricci
''
,
14
)
,
(
``
marino
''
,
12
)
,
(
``
grecco
''
,
11
)
,
(
``
bruno
''
,
10
)
,
(
``
gallo
''
,
12
)
,
(
``
conti
''
,
16
)
,
(
``
De
luca
''
,
15
)
,
(
``
costa
''
,
14
)
,
(
``
giordano
''
,
13
)
,
(
``
mancini
''
,
14
)
,
(
``
rizzo
''
,
13
)
,
(
``
lombardi
''
,
11
)
,
(
``
moretto
''
,
9
)
]
}
#
separ
name
and
weight
synthes
=
{
}
identifi
=
1
for
countri
in
w_firstnam
:
firstnam
,
weight
=
zip
(
*w_firstnam
[
countri
]
)
wsum
=
sum
(
weight
)
weights_firstnam
=
[
x
/
wsum
for
x
in
weight
]
w_firstnam
[
countri
]
=
[
firstnam
,
weights_firstnam
]
surnam
,
weight
=
zip
(
*w_surnam
[
countri
]
)
wsum
=
sum
(
weight
)
weights_surnam
=
[
x
/
wsum
for
x
in
weight
]
w_surnam
[
countri
]
=
[
surnam
,
weights_firstnam
]
synthes
[
countri
]
=
synthes
(
(
firstnam
,
surnam
)
,
(
weights_firstnam
,
weights_surnam
)
,
format_func=lambda
x
:
``
``
.join
(
x
)
,
repeats=fals
)
nation_prob
=
[
(
``
germani
''
,
0.3
)
,
(
``
franc
''
,
0.4
)
,
(
``
switzerland
''
,
0.2
)
,
(
``
itali
''
,
0.1
)
]
profession_prob
=
[
(
``
medic
aid
''
,
0.3
)
,
(
``
social
worker
''
,
0.6
)
,
(
``
secur
aid
''
,
0.1
)
]
helper
=
[
]
for
_
in
rang
(
200
)
:
countri
=
weighted_cartesian_choic
(
zip
(
*nation_prob
)
)
profess
=
weighted_cartesian_choic
(
zip
(
*profession_prob
)
)
countri
,
profess
=
countri
[
0
]
,
profess
[
0
]
s
=
synthes
[
countri
]
(
)
uid
=
``
{
id:05d
}
''
.format
(
id=identifi
)
helpers.append
(
(
uid
,
countri
,
next
(
s
)
,
profess
)
)
identifi
+=
1
print
(
helper
)
[
(
'00001
'
,
'germani
'
,
'brigitt
wagner
'
,
'social
worker
'
)
,
(
'00002
'
,
'franc
'
,
'chloé
muller
'
,
'medic
aid
'
)
,
(
'00003
'
,
'switzerland
'
,
'laura
steiner
'
,
'medic
aid
'
)
,
(
'00004
'
,
'franc
'
,
'laura
matin
'
,
'medic
aid
'
)
,
(
'00005
'
,
'franc
'
,
'léa
fontain
'
,
'social
worker
'
)
,
(
'00006
'
,
'switzerland
'
,
'océan
meyer
'
,
'social
worker
'
)
,
(
'00007
'
,
'franc
'
,
'léa
fournier
'
,
'social
worker
'
)
,
(
'00008
'
,
'franc
'
,
'mari
matin
'
,
'social
worker
'
)
,
(
'00009
'
,
'franc
'
,
'laura
durand
'
,
'secur
aid
'
)
,
(
'00010
'
,
'franc
'
,
'maxim
duboi
'
,
'social
worker
'
)
,
(
'00011
'
,
'franc
'
,
'nicola
mercier
'
,
'social
worker
'
)
,
(
'00012
'
,
'itali
'
,
'mattia
gallo
'
,
'medic
aid
'
)
,
(
'00013
'
,
'franc
'
,
'quentin
leroy
'
,
'social
worker
'
)
,
(
'00014
'
,
'germani
'
,
'wolfgang
koch
'
,
'medic
aid
'
)
,
(
'00015
'
,
'franc
'
,
'manon
matin
'
,
'social
worker
'
)
,
(
'00016
'
,
'switzerland
'
,
'mélissa
schneider
'
,
'social
worker
'
)
,
(
'00017
'
,
'germani
'
,
'thoma
koch
'
,
'social
worker
'
)
,
(
'00018
'
,
'germani
'
,
'wolfgang
schäfer
'
,
'medic
aid
'
)
,
(
'00019
'
,
'germani
'
,
'peter
schäfer
'
,
'secur
aid
'
)
,
(
'00020
'
,
'itali
'
,
'alic
costa
'
,
'medic
aid
'
)
,
(
'00021
'
,
'switzerland
'
,
'océan
steiner
'
,
'social
worker
'
)
,
(
'00022
'
,
'franc
'
,
'manon
durand
'
,
'medic
aid
'
)
,
(
'00023
'
,
'switzerland
'
,
'daniel
meier
'
,
'social
worker
'
)
,
(
'00024
'
,
'franc
'
,
'laura
fournier
'
,
'social
worker
'
)
,
(
'00025
'
,
'switzerland
'
,
'daniel
schneider
'
,
'secur
aid
'
)
,
(
'00026
'
,
'germani
'
,
'maria
weber
'
,
'social
worker
'
)
,
(
'00027
'
,
'switzerland
'
,
'sarah
weber
'
,
'medic
aid
'
)
,
(
'00028
'
,
'germani
'
,
'wolfgang
weber
'
,
'social
worker
'
)
,
(
'00029
'
,
'germani
'
,
'michael
fischer
'
,
'social
worker
'
)
,
(
'00030
'
,
'germani
'
,
'stefani
hoffmann
'
,
'social
worker
'
)
,
(
'00031
'
,
'franc
'
,
'laura
mercier
'
,
'social
worker
'
)
,
(
'00032
'
,
'franc
'
,
'nicola
leroy
'
,
'social
worker
'
)
,
(
'00033
'
,
'germani
'
,
'peter
becker
'
,
'social
worker
'
)
,
(
'00034
'
,
'franc
'
,
'maxim
petit
'
,
'social
worker
'
)
,
(
'00035
'
,
'franc
'
,
'maxim
matin
'
,
'secur
aid
'
)
,
(
'00036
'
,
'germani
'
,
'stefani
becker
'
,
'medic
aid
'
)
,
(
'00037
'
,
'franc
'
,
'laura
petit
'
,
'social
worker
'
)
,
(
'00038
'
,
'switzerland
'
,
'han
fischer
'
,
'social
worker
'
)
,
(
'00039
'
,
'franc
'
,
'nicola
leroy
'
,
'medic
aid
'
)
,
(
'00040
'
,
'franc
'
,
'léa
matin
'
,
'social
worker
'
)
,
(
'00041
'
,
'switzerland
'
,
'bruno
fischer
'
,
'social
worker
'
)
,
(
'00042
'
,
'franc
'
,
'julien
duboi
'
,
'medic
aid
'
)
,
(
'00043
'
,
'franc
'
,
'alexandr
petit
'
,
'social
worker
'
)
,
(
'00044
'
,
'franc
'
,
'camil
camil
'
,
'social
worker
'
)
,
(
'00045
'
,
'franc
'
,
'camil
rousseau
'
,
'medic
aid
'
)
,
(
'00046
'
,
'franc
'
,
'julien
lambert
'
,
'social
worker
'
)
,
(
'00047
'
,
'franc
'
,
'léa
duboi
'
,
'social
worker
'
)
,
(
'00048
'
,
'itali
'
,
'lorenzo
mancini
'
,
'secur
aid
'
)
,
(
'00049
'
,
'germani
'
,
'ursula
hoffmann
'
,
'social
worker
'
)
,
(
'00050
'
,
'germani
'
,
'brigitt
meyer
'
,
'medic
aid
'
)
,
(
'00051
'
,
'franc
'
,
'sandra
lambert
'
,
'social
worker
'
)
,
(
'00052
'
,
'itali
'
,
'alic
rizzo
'
,
'medic
aid
'
)
,
(
'00053
'
,
'franc
'
,
'chloé
nicola
'
,
'social
worker
'
)
,
(
'00054
'
,
'germani
'
,
'gabriel
schröder
'
,
'social
worker
'
)
,
(
'00055
'
,
'franc
'
,
'thoma
durand
'
,
'medic
aid
'
)
,
(
'00056
'
,
'franc
'
,
'léa
duboi
'
,
'medic
aid
'
)
,
(
'00057
'
,
'franc
'
,
'maxim
mercier
'
,
'social
worker
'
)
,
(
'00058
'
,
'germani
'
,
'peter
schmidt
'
,
'social
worker
'
)
,
(
'00059
'
,
'franc
'
,
'quentin
durand
'
,
'social
worker
'
)
,
(
'00060
'
,
'franc
'
,
'camil
petit
'
,
'social
worker
'
)
,
(
'00061
'
,
'switzerland
'
,
'laura
schmid
'
,
'medic
aid
'
)
,
(
'00062
'
,
'itali
'
,
'gabriel
lombardi
'
,
'social
worker
'
)
,
(
'00063
'
,
'switzerland
'
,
'peter
meier
'
,
'medic
aid
'
)
,
(
'00064
'
,
'switzerland
'
,
'reto
huber
'
,
'medic
aid
'
)
,
(
'00065
'
,
'itali
'
,
'matteo
mancini
'
,
'medic
aid
'
)
,
(
'00066
'
,
'franc
'
,
'mari
petit
'
,
'social
worker
'
)
,
(
'00067
'
,
'germani
'
,
'manfr
hoffmann
'
,
'medic
aid
'
)
,
(
'00068
'
,
'germani
'
,
'brigitt
schmidt
'
,
'medic
aid
'
)
,
(
'00069
'
,
'franc
'
,
'manon
matin
'
,
'medic
aid
'
)
,
(
'00070
'
,
'franc
'
,
'nicola
petit
'
,
'social
worker
'
)
,
(
'00071
'
,
'franc
'
,
'léa
petit
'
,
'social
worker
'
)
,
(
'00072
'
,
'germani
'
,
'monika
schulz
'
,
'social
worker
'
)
,
(
'00073
'
,
'itali
'
,
'mattia
rizzo
'
,
'social
worker
'
)
,
(
'00074
'
,
'itali
'
,
'sofia
colombo
'
,
'social
worker
'
)
,
(
'00075
'
,
'germani
'
,
'michael
schäfer
'
,
'medic
aid
'
)
,
(
'00076
'
,
'germani
'
,
'matthia
hoffmann
'
,
'social
worker
'
)
,
(
'00077
'
,
'germani
'
,
'wolfgang
schneider
'
,
'social
worker
'
)
,
(
'00078
'
,
'franc
'
,
'julien
duboi
'
,
'social
worker
'
)
,
(
'00079
'
,
'germani
'
,
'peter
fischer
'
,
'social
worker
'
)
,
(
'00080
'
,
'franc
'
,
'julien
leroy
'
,
'social
worker
'
)
,
(
'00081
'
,
'franc
'
,
'julien
bernard
'
,
'social
worker
'
)
,
(
'00082
'
,
'germani
'
,
'michael
schmidt
'
,
'social
worker
'
)
,
(
'00083
'
,
'franc
'
,
'manon
bernard
'
,
'social
worker
'
)
,
(
'00084
'
,
'switzerland
'
,
'han
huber
'
,
'secur
aid
'
)
,
(
'00085
'
,
'germani
'
,
'monika
schneider
'
,
'medic
aid
'
)
,
(
'00086
'
,
'switzerland
'
,
'noémi
müller
'
,
'secur
aid
'
)
,
(
'00087
'
,
'switzerland
'
,
'sarah
gerber
'
,
'medic
aid
'
)
,
(
'00088
'
,
'germani
'
,
'thoma
müller
'
,
'medic
aid
'
)
,
(
'00089
'
,
'switzerland
'
,
'sarah
weber
'
,
'medic
aid
'
)
,
(
'00090
'
,
'franc
'
,
'laura
petit
'
,
'medic
aid
'
)
,
(
'00091
'
,
'switzerland
'
,
'sarah
gerber
'
,
'medic
aid
'
)
,
(
'00092
'
,
'switzerland
'
,
'reto
schmid
'
,
'medic
aid
'
)
,
(
'00093
'
,
'germani
'
,
'monika
schneider
'
,
'medic
aid
'
)
,
(
'00094
'
,
'franc
'
,
'quentin
matin
'
,
'social
worker
'
)
,
(
'00095
'
,
'itali
'
,
'aurora
colombo
'
,
'social
worker
'
)
,
(
'00096
'
,
'germani
'
,
'ursula
meyer
'
,
'social
worker
'
)
,
(
'00097
'
,
'germani
'
,
'manfr
weber
'
,
'social
worker
'
)
,
(
'00098
'
,
'itali
'
,
'giulia
ferrari
'
,
'medic
aid
'
)
,
(
'00099
'
,
'franc
'
,
'thoma
muller
'
,
'social
worker
'
)
,
(
'00100
'
,
'switzerland
'
,
'daniel
schneider
'
,
'medic
aid
'
)
,
(
'00101
'
,
'franc
'
,
'maxim
camil
'
,
'medic
aid
'
)
,
(
'00102
'
,
'franc
'
,
'laura
petit
'
,
'social
worker
'
)
,
(
'00103
'
,
'germani
'
,
'manfr
schmidt
'
,
'medic
aid
'
)
,
(
'00104
'
,
'itali
'
,
'martina
lombardi
'
,
'social
worker
'
)
,
(
'00105
'
,
'switzerland
'
,
'sarah
baumann
'
,
'medic
aid
'
)
,
(
'00106
'
,
'switzerland
'
,
'bruno
gerber
'
,
'secur
aid
'
)
,
(
'00107
'
,
'switzerland
'
,
'laura
müller
'
,
'social
worker
'
)
,
(
'00108
'
,
'germani
'
,
'andrea
weber
'
,
'social
worker
'
)
,
(
'00109
'
,
'switzerland
'
,
'han
fischer
'
,
'social
worker
'
)
,
(
'00110
'
,
'switzerland
'
,
'daniel
meyer
'
,
'social
worker
'
)
,
(
'00111
'
,
'franc
'
,
'julien
rousseau
'
,
'secur
aid
'
)
,
(
'00112
'
,
'switzerland
'
,
'reto
schmid
'
,
'social
worker
'
)
,
(
'00113
'
,
'switzerland
'
,
'urli
schneider
'
,
'social
worker
'
)
,
(
'00114
'
,
'franc
'
,
'grégori
rousseau
'
,
'medic
aid
'
)
,
(
'00115
'
,
'franc
'
,
'mari
durand
'
,
'social
worker
'
)
,
(
'00116
'
,
'franc
'
,
'léa
durand
'
,
'social
worker
'
)
,
(
'00117
'
,
'franc
'
,
'camil
matin
'
,
'medic
aid
'
)
,
(
'00118
'
,
'germani
'
,
'wolfgang
schneider
'
,
'social
worker
'
)
,
(
'00119
'
,
'franc
'
,
'julien
matin
'
,
'social
worker
'
)
,
(
'00120
'
,
'franc
'
,
'mari
leroy
'
,
'social
worker
'
)
,
(
'00121
'
,
'switzerland
'
,
'mélissa
brunner
'
,
'secur
aid
'
)
,
(
'00122
'
,
'germani
'
,
'ursula
schneider
'
,
'social
worker
'
)
,
(
'00123
'
,
'franc
'
,
'camil
mercier
'
,
'social
worker
'
)
,
(
'00124
'
,
'franc
'
,
'julien
camil
'
,
'social
worker
'
)
,
(
'00125
'
,
'switzerland
'
,
'laura
schmid
'
,
'medic
aid
'
)
,
(
'00126
'
,
'franc
'
,
'camil
durand
'
,
'social
worker
'
)
,
(
'00127
'
,
'franc
'
,
'mari
camil
'
,
'medic
aid
'
)
,
(
'00128
'
,
'germani
'
,
'monika
wagner
'
,
'social
worker
'
)
,
(
'00129
'
,
'itali
'
,
'giorgia
esposito
'
,
'secur
aid
'
)
,
(
'00130
'
,
'franc
'
,
'clementin
mercier
'
,
'social
worker
'
)
,
(
'00131
'
,
'franc
'
,
'mari
matin
'
,
'social
worker
'
)
,
(
'00132
'
,
'switzerland
'
,
'noémi
brunner
'
,
'medic
aid
'
)
,
(
'00133
'
,
'franc
'
,
'nicola
leroy
'
,
'secur
aid
'
)
,
(
'00134
'
,
'franc
'
,
'camil
camil
'
,
'social
worker
'
)
,
(
'00135
'
,
'germani
'
,
'wolfgang
fischer
'
,
'medic
aid
'
)
,
(
'00136
'
,
'germani
'
,
'brigitt
müller
'
,
'medic
aid
'
)
,
(
'00137
'
,
'germani
'
,
'peter
schneider
'
,
'social
worker
'
)
,
(
'00138
'
,
'switzerland
'
,
'laura
schneider
'
,
'medic
aid
'
)
,
(
'00139
'
,
'franc
'
,
'chloé
rousseau
'
,
'social
worker
'
)
,
(
'00140
'
,
'itali
'
,
'alic
De
luca
'
,
'medic
aid
'
)
,
(
'00141
'
,
'franc
'
,
'thoma
bernard
'
,
'social
worker
'
)
,
(
'00142
'
,
'itali
'
,
'francesco
grecco
'
,
'medic
aid
'
)
,
(
'00143
'
,
'switzerland
'
,
'peter
frei
'
,
'medic
aid
'
)
,
(
'00144
'
,
'franc
'
,
'philipp
mercier
'
,
'secur
aid
'
)
,
(
'00145
'
,
'germani
'
,
'monika
meyer
'
,
'social
worker
'
)
,
(
'00146
'
,
'franc
'
,
'alexandr
lambert
'
,
'medic
aid
'
)
,
(
'00147
'
,
'switzerland
'
,
'sarah
brunner
'
,
'secur
aid
'
)
,
(
'00148
'
,
'germani
'
,
'wolfgang
schneider
'
,
'social
worker
'
)
,
(
'00149
'
,
'germani
'
,
'manfr
müller
'
,
'social
worker
'
)
,
(
'00150
'
,
'franc
'
,
'léa
duboi
'
,
'medic
aid
'
)
,
(
'00151
'
,
'switzerland
'
,
'reto
schmid
'
,
'medic
aid
'
)
,
(
'00152
'
,
'franc
'
,
'manon
lambert
'
,
'social
worker
'
)
,
(
'00153
'
,
'franc
'
,
'chloé
fournier
'
,
'social
worker
'
)
,
(
'00154
'
,
'franc
'
,
'grégori
bernard
'
,
'social
worker
'
)
,
(
'00155
'
,
'itali
'
,
'martina
bruno
'
,
'social
worker
'
)
,
(
'00156
'
,
'franc
'
,
'mari
nicola
'
,
'social
worker
'
)
,
(
'00157
'
,
'itali
'
,
'giorgia
romano
'
,
'social
worker
'
)
,
(
'00158
'
,
'franc
'
,
'thoma
mercier
'
,
'secur
aid
'
)
,
(
'00159
'
,
'germani
'
,
'manfr
richter
'
,
'social
worker
'
)
,
(
'00160
'
,
'germani
'
,
'wolfgang
schäfer
'
,
'social
worker
'
)
,
(
'00161
'
,
'germani
'
,
'peter
müller
'
,
'secur
aid
'
)
,
(
'00162
'
,
'switzerland
'
,
'océan
meyer
'
,
'social
worker
'
)
,
(
'00163
'
,
'germani
'
,
'monika
schneider
'
,
'social
worker
'
)
,
(
'00164
'
,
'franc
'
,
'chloé
duboi
'
,
'social
worker
'
)
,
(
'00165
'
,
'germani
'
,
'peter
fischer
'
,
'social
worker
'
)
,
(
'00166
'
,
'germani
'
,
'christin
müller
'
,
'social
worker
'
)
,
(
'00167
'
,
'switzerland
'
,
'walter
steiner
'
,
'secur
aid
'
)
,
(
'00168
'
,
'germani
'
,
'dirk
bauer
'
,
'medic
aid
'
)
,
(
'00169
'
,
'germani
'
,
'matthia
schmidt
'
,
'social
worker
'
)
,
(
'00170
'
,
'germani
'
,
'andrea
schneider
'
,
'medic
aid
'
)
,
(
'00171
'
,
'itali
'
,
'gabriel
grecco
'
,
'medic
aid
'
)
,
(
'00172
'
,
'franc
'
,
'léa
matin
'
,
'secur
aid
'
)
,
(
'00173
'
,
'franc
'
,
'nicola
duboi
'
,
'social
worker
'
)
,
(
'00174
'
,
'switzerland
'
,
'bruno
fischer
'
,
'social
worker
'
)
,
(
'00175
'
,
'franc
'
,
'camil
matin
'
,
'social
worker
'
)
,
(
'00176
'
,
'switzerland
'
,
'mélissa
zimmermann
'
,
'social
worker
'
)
,
(
'00177
'
,
'germani
'
,
'stefani
becker
'
,
'medic
aid
'
)
,
(
'00178
'
,
'franc
'
,
'maxim
leroy
'
,
'social
worker
'
)
,
(
'00179
'
,
'germani
'
,
'michael
fischer
'
,
'secur
aid
'
)
,
(
'00180
'
,
'germani
'
,
'stefani
schmidt
'
,
'medic
aid
'
)
,
(
'00181
'
,
'germani
'
,
'peter
schneider
'
,
'social
worker
'
)
,
(
'00182
'
,
'switzerland
'
,
'laura
huber
'
,
'social
worker
'
)
,
(
'00183
'
,
'franc
'
,
'mari
fournier
'
,
'medic
aid
'
)
,
(
'00184
'
,
'itali
'
,
'leonardo
moretto
'
,
'social
worker
'
)
,
(
'00185
'
,
'germani
'
,
'peter
meyer
'
,
'social
worker
'
)
,
(
'00186
'
,
'franc
'
,
'alexandr
durand
'
,
'social
worker
'
)
,
(
'00187
'
,
'switzerland
'
,
'walter
müller
'
,
'social
worker
'
)
,
(
'00188
'
,
'franc
'
,
'chloé
leroy
'
,
'medic
aid
'
)
,
(
'00189
'
,
'switzerland
'
,
'walter
weber
'
,
'social
worker
'
)
,
(
'00190
'
,
'switzerland
'
,
'sarah
steiner
'
,
'social
worker
'
)
,
(
'00191
'
,
'germani
'
,
'wolfgang
fischer
'
,
'social
worker
'
)
,
(
'00192
'
,
'germani
'
,
'matthia
becker
'
,
'secur
aid
'
)
,
(
'00193
'
,
'germani
'
,
'ursula
schäfer
'
,
'social
worker
'
)
,
(
'00194
'
,
'switzerland
'
,
'océan
keller
'
,
'secur
aid
'
)
,
(
'00195
'
,
'germani
'
,
'brigitt
richter
'
,
'medic
aid
'
)
,
(
'00196
'
,
'germani
'
,
'ursula
müller
'
,
'medic
aid
'
)
,
(
'00197
'
,
'itali
'
,
'tommaso
rizzo
'
,
'social
worker
'
)
,
(
'00198
'
,
'switzerland
'
,
'marcel
fischer
'
,
'social
worker
'
)
,
(
'00199
'
,
'franc
'
,
'léa
petit
'
,
'medic
aid
'
)
,
(
'00200
'
,
'franc
'
,
'nicola
camil
'
,
'secur
aid
'
)
]
with
open
(
``
disaster_mission.txt
''
,
``
w
''
)
as
fh
:
fh.write
(
``
refer
number
,
countri
,
name
,
function\n
''
)
for
el
in
helper
:
fh.write
(
``
,
''
.join
(
el
)
+
``
\n
''
)
previou
chapter
:
weight
choic
and
weight
sampl
next
chapter
:
boolean
mask
of
array
©
2011
-
2018
,
bernd
klein
,
bodenseo
;
design
by
denis
mitchinson
adapt
for
python-course.eu
by
bernd
klein
