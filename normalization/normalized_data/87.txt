machin
learn
with
python
:
naiv
bay
classifi
with
scikit
python
machin
learn
tutori
machin
learn
machin
learn
terminologyk-nearest
neighbor
classifierneur
network
from
scratch
in
pythonneur
network
in
python
use
numypybackpropag
in
neural
networksconfus
matrixtrain
and
test
with
mnistdropout
neural
networksneur
network
with
scikitmachin
learn
with
scikit
and
pythonintroduct
naiv
bay
classifierna
bay
classifi
with
scikitintroduct
into
text
classif
use
naiv
bayespython
implement
of
text
classificationdecis
treesregress
treesrandom
forestsboost
algorithmprincip
compon
analysislinear
discrimin
analysisexpect
maxim
and
gaussian
mixtur
modelintroduct
into
tensorflow
thoma
bay
the
man
behind
the
bay
'
theorem
is
thoma
bay
.
He
wa
born
in
1701
or
1702
and
die
on
the
7th
of
april
1761
.
the
pictur
on
the
top
of
thi
page
might
be
a
portrait
of
him
,
but
it
is
not
sure
.
He
ha
publish
two
import
work
in
hi
lifetim
:
divin
benevol
,
or
an
attempt
to
prove
that
the
princip
end
of
the
divin
provid
and
govern
is
the
happi
of
hi
creatur
(
1731
)
An
introduct
to
the
doctrin
of
fluxion
,
and
a
defenc
of
the
mathematician
against
the
object
of
the
author
of
the
analyst
(
publish
anonym
in
1736
)
He
is
most
well
known
for
the
work
he
did
in
hi
later
year
,
in
which
he
took
a
deep
interest
in
probabl
.
thi
websit
is
creat
by
:
python
train
cours
in
toronto
,
canada
On
site
train
in
europ
,
canada
and
the
US
.
thi
websit
is
free
of
annoy
ad
.
We
want
to
keep
it
like
thi
.
you
can
help
with
your
donat
:
the
need
for
donat
bernd
klein
on
facebook
search
thi
websit
:
classroom
train
cours
thi
websit
contain
a
free
and
extens
onlin
tutori
by
bernd
klein
,
use
materi
from
hi
classroom
python
train
cours
.
If
you
are
interest
in
an
instructor-l
classroom
train
cours
,
you
may
have
a
look
at
the
python
class
by
bernd
klein
at
bodenseo
.
Â©
kabliczech
-
fotolia.com
quot
of
the
day
:
''
clearli
,
program
cours
should
teach
method
of
design
and
construct
,
and
the
select
exampl
should
be
such
that
a
gradual
develop
can
be
nice
demonstr
.
''
(
niklau
wirth
)
If
you
have
the
choic
work
with
python
2
or
python
3
,
we
recomend
to
switch
to
python
3
!
you
can
read
our
python
tutori
to
see
what
the
differ
are
.
data
protect
declar
data
protect
declar
previou
chapter
:
introduct
naiv
bay
classifi
next
chapter
:
introduct
into
text
classif
use
naiv
bay
naiv
bay
classifi
with
scikit
We
have
written
naiv
bay
classifi
from
scratch
in
our
previou
chapter
of
our
tutori
.
In
thi
part
of
the
tutori
on
machin
learn
with
python
,
we
want
to
show
you
how
to
use
ready-mad
classifi
.
the
modul
scikit
provid
naiv
bay
classifi
``
off
the
rack
''
.
our
first
exampl
use
the
``
iri
dataset
''
contain
in
the
model
to
train
and
test
the
classifi
#
gaussian
naiv
bay
from
sklearn
import
dataset
from
sklearn
import
metric
from
sklearn.naive_bay
import
gaussiannb
#
load
the
iri
dataset
dataset
=
datasets.load_iri
(
)
#
fit
a
naiv
bay
model
to
the
data
model
=
gaussiannb
(
)
model.fit
(
dataset.data
,
dataset.target
)
print
(
model
)
#
make
predict
expect
=
dataset.target
predict
=
model.predict
(
dataset.data
)
#
summar
the
fit
of
the
model
print
(
metrics.classification_report
(
expect
,
predict
)
)
print
(
metrics.confusion_matrix
(
expect
,
predict
)
)
gaussiannb
(
)
precis
recal
f1-score
support
0
1.00
1.00
1.00
50
1
0.94
0.94
0.94
50
2
0.94
0.94
0.94
50
avg
/
total
0.96
0.96
0.96
150
[
[
50
0
0
]
[
0
47
3
]
[
0
3
47
]
]
We
use
our
person
data
from
the
previou
chapter
of
our
tutori
to
train
anoth
classifi
in
the
next
exampl
:
import
numpi
as
np
def
prepare_person_dataset
(
fname
)
:
gender
=
[
``
male
''
,
``
femal
''
]
person
=
[
]
with
open
(
fname
)
as
fh
:
for
line
in
fh
:
persons.append
(
line.strip
(
)
.split
(
)
)
firstnam
=
[
]
dataset
=
[
]
#
weight
and
height
for
person
in
person
:
firstnames.append
(
(
person
[
0
]
,
person
[
4
]
)
)
height_weight
=
(
float
(
person
[
2
]
)
,
float
(
person
[
3
]
)
)
dataset.append
(
(
height_weight
,
person
[
4
]
)
)
return
dataset
learnset
=
prepare_person_dataset
(
``
data/person_data.txt
''
)
testset
=
prepare_person_dataset
(
``
data/person_data_testset.txt
''
)
print
(
learnset
)
[
(
(
184.0
,
73.0
)
,
'male
'
)
,
(
(
149.0
,
52.0
)
,
'femal
'
)
,
(
(
174.0
,
63.0
)
,
'femal
'
)
,
(
(
175.0
,
67.0
)
,
'male
'
)
,
(
(
183.0
,
81.0
)
,
'femal
'
)
,
(
(
187.0
,
60.0
)
,
'male
'
)
,
(
(
192.0
,
96.0
)
,
'male
'
)
,
(
(
204.0
,
91.0
)
,
'male
'
)
,
(
(
180.0
,
66.0
)
,
'male
'
)
,
(
(
184.0
,
52.0
)
,
'male
'
)
,
(
(
174.0
,
53.0
)
,
'male
'
)
,
(
(
177.0
,
91.0
)
,
'male
'
)
,
(
(
138.0
,
37.0
)
,
'femal
'
)
,
(
(
200.0
,
82.0
)
,
'male
'
)
,
(
(
193.0
,
79.0
)
,
'male
'
)
,
(
(
189.0
,
79.0
)
,
'male
'
)
,
(
(
145.0
,
59.0
)
,
'femal
'
)
,
(
(
188.0
,
53.0
)
,
'male
'
)
,
(
(
187.0
,
81.0
)
,
'male
'
)
,
(
(
187.0
,
99.0
)
,
'male
'
)
,
(
(
190.0
,
81.0
)
,
'male
'
)
,
(
(
161.0
,
48.0
)
,
'femal
'
)
,
(
(
179.0
,
75.0
)
,
'femal
'
)
,
(
(
180.0
,
67.0
)
,
'male
'
)
,
(
(
155.0
,
48.0
)
,
'male
'
)
,
(
(
201.0
,
122.0
)
,
'male
'
)
,
(
(
162.0
,
62.0
)
,
'femal
'
)
,
(
(
148.0
,
49.0
)
,
'femal
'
)
,
(
(
171.0
,
50.0
)
,
'male
'
)
,
(
(
196.0
,
86.0
)
,
'femal
'
)
,
(
(
163.0
,
46.0
)
,
'femal
'
)
,
(
(
159.0
,
37.0
)
,
'femal
'
)
,
(
(
163.0
,
53.0
)
,
'male
'
)
,
(
(
150.0
,
39.0
)
,
'femal
'
)
,
(
(
170.0
,
56.0
)
,
'femal
'
)
,
(
(
191.0
,
55.0
)
,
'male
'
)
,
(
(
175.0
,
37.0
)
,
'male
'
)
,
(
(
169.0
,
78.0
)
,
'femal
'
)
,
(
(
167.0
,
59.0
)
,
'femal
'
)
,
(
(
170.0
,
78.0
)
,
'male
'
)
,
(
(
178.0
,
79.0
)
,
'male
'
)
,
(
(
168.0
,
71.0
)
,
'femal
'
)
,
(
(
170.0
,
37.0
)
,
'femal
'
)
,
(
(
167.0
,
58.0
)
,
'femal
'
)
,
(
(
152.0
,
43.0
)
,
'femal
'
)
,
(
(
191.0
,
81.0
)
,
'male
'
)
,
(
(
155.0
,
48.0
)
,
'femal
'
)
,
(
(
176.0
,
61.0
)
,
'male
'
)
,
(
(
151.0
,
41.0
)
,
'femal
'
)
,
(
(
166.0
,
59.0
)
,
'femal
'
)
,
(
(
168.0
,
46.0
)
,
'male
'
)
,
(
(
165.0
,
65.0
)
,
'femal
'
)
,
(
(
169.0
,
67.0
)
,
'male
'
)
,
(
(
158.0
,
43.0
)
,
'femal
'
)
,
(
(
173.0
,
61.0
)
,
'male
'
)
,
(
(
180.0
,
74.0
)
,
'male
'
)
,
(
(
212.0
,
59.0
)
,
'male
'
)
,
(
(
152.0
,
62.0
)
,
'femal
'
)
,
(
(
189.0
,
67.0
)
,
'male
'
)
,
(
(
159.0
,
56.0
)
,
'femal
'
)
,
(
(
163.0
,
58.0
)
,
'femal
'
)
,
(
(
174.0
,
45.0
)
,
'femal
'
)
,
(
(
174.0
,
69.0
)
,
'male
'
)
,
(
(
167.0
,
47.0
)
,
'male
'
)
,
(
(
131.0
,
37.0
)
,
'femal
'
)
,
(
(
154.0
,
74.0
)
,
'femal
'
)
,
(
(
159.0
,
59.0
)
,
'femal
'
)
,
(
(
159.0
,
58.0
)
,
'femal
'
)
,
(
(
177.0
,
83.0
)
,
'femal
'
)
,
(
(
193.0
,
96.0
)
,
'male
'
)
,
(
(
180.0
,
83.0
)
,
'femal
'
)
,
(
(
164.0
,
54.0
)
,
'male
'
)
,
(
(
164.0
,
64.0
)
,
'femal
'
)
,
(
(
171.0
,
52.0
)
,
'male
'
)
,
(
(
163.0
,
41.0
)
,
'femal
'
)
,
(
(
165.0
,
30.0
)
,
'male
'
)
,
(
(
161.0
,
61.0
)
,
'femal
'
)
,
(
(
198.0
,
75.0
)
,
'male
'
)
,
(
(
183.0
,
70.0
)
,
'femal
'
)
,
(
(
185.0
,
71.0
)
,
'male
'
)
,
(
(
175.0
,
58.0
)
,
'male
'
)
,
(
(
195.0
,
89.0
)
,
'male
'
)
,
(
(
170.0
,
66.0
)
,
'femal
'
)
,
(
(
167.0
,
61.0
)
,
'femal
'
)
,
(
(
166.0
,
65.0
)
,
'femal
'
)
,
(
(
180.0
,
88.0
)
,
'femal
'
)
,
(
(
164.0
,
55.0
)
,
'male
'
)
,
(
(
161.0
,
53.0
)
,
'femal
'
)
,
(
(
187.0
,
76.0
)
,
'male
'
)
,
(
(
170.0
,
63.0
)
,
'femal
'
)
,
(
(
192.0
,
101.0
)
,
'male
'
)
,
(
(
175.0
,
56.0
)
,
'male
'
)
,
(
(
190.0
,
100.0
)
,
'male
'
)
,
(
(
164.0
,
63.0
)
,
'male
'
)
,
(
(
172.0
,
61.0
)
,
'femal
'
)
,
(
(
168.0
,
69.0
)
,
'femal
'
)
,
(
(
156.0
,
51.0
)
,
'femal
'
)
,
(
(
167.0
,
40.0
)
,
'femal
'
)
,
(
(
161.0
,
18.0
)
,
'male
'
)
,
(
(
167.0
,
56.0
)
,
'femal
'
)
]
#
gaussian
naiv
bay
from
sklearn
import
dataset
from
sklearn
import
metric
from
sklearn.naive_bay
import
gaussiannb
model
=
gaussiannb
(
)
#
print
(
dataset.data
,
dataset.target
)
w
,
l
=
zip
(
*learnset
)
w
=
np.array
(
w
)
l
=
np.array
(
l
)
model.fit
(
w
,
l
)
print
(
model
)
w
,
l
=
zip
(
*testset
)
w
=
np.array
(
w
)
l
=
np.array
(
l
)
predict
=
model.predict
(
w
)
print
(
predict
)
print
(
l
)
#
summar
the
fit
of
the
model
print
(
metrics.classification_report
(
l
,
predict
)
)
print
(
metrics.confusion_matrix
(
l
,
predict
)
)
gaussiannb
(
)
[
'femal
'
'male
'
'male
'
'femal
'
'femal
'
'male
'
'femal
'
'femal
'
'femal
'
'femal
'
'femal
'
'femal
'
'femal
'
'femal
'
'male
'
'femal
'
'male
'
'femal
'
'femal
'
'femal
'
'male
'
'femal
'
'femal
'
'male
'
'male
'
'femal
'
'femal
'
'male
'
'male
'
'male
'
'femal
'
'femal
'
'male
'
'male
'
'male
'
'femal
'
'femal
'
'male
'
'femal
'
'male
'
'male
'
'femal
'
'femal
'
'male
'
'femal
'
'male
'
'male
'
'femal
'
'male
'
'femal
'
'femal
'
'femal
'
'male
'
'femal
'
'femal
'
'male
'
'femal
'
'femal
'
'male
'
'femal
'
'femal
'
'male
'
'femal
'
'femal
'
'femal
'
'femal
'
'male
'
'femal
'
'femal
'
'femal
'
'femal
'
'femal
'
'male
'
'male
'
'femal
'
'femal
'
'male
'
'male
'
'femal
'
'femal
'
'male
'
'male
'
'femal
'
'male
'
'male
'
'male
'
'femal
'
'male
'
'femal
'
'femal
'
'male
'
'male
'
'femal
'
'male
'
'femal
'
'femal
'
'femal
'
'male
'
'femal
'
'male
'
]
[
'femal
'
'male
'
'male
'
'femal
'
'femal
'
'male
'
'male
'
'male
'
'femal
'
'femal
'
'femal
'
'femal
'
'femal
'
'femal
'
'male
'
'male
'
'male
'
'femal
'
'femal
'
'femal
'
'male
'
'femal
'
'femal
'
'male
'
'male
'
'femal
'
'male
'
'femal
'
'male
'
'femal
'
'male
'
'male
'
'male
'
'male
'
'femal
'
'femal
'
'femal
'
'male
'
'male
'
'femal
'
'male
'
'femal
'
'male
'
'male
'
'femal
'
'male
'
'femal
'
'male
'
'femal
'
'femal
'
'femal
'
'male
'
'male
'
'male
'
'male
'
'male
'
'femal
'
'male
'
'male
'
'femal
'
'femal
'
'femal
'
'male
'
'femal
'
'male
'
'femal
'
'male
'
'femal
'
'male
'
'femal
'
'femal
'
'femal
'
'male
'
'male
'
'male
'
'femal
'
'male
'
'male
'
'femal
'
'femal
'
'male
'
'male
'
'femal
'
'femal
'
'male
'
'male
'
'femal
'
'male
'
'femal
'
'male
'
'male
'
'femal
'
'femal
'
'male
'
'male
'
'femal
'
'femal
'
'male
'
'femal
'
'femal
'
]
precis
recal
f1-score
support
femal
0.68
0.80
0.73
50
male
0.76
0.62
0.68
50
avg
/
total
0.72
0.71
0.71
100
[
[
40
10
]
[
19
31
]
]
In
[
]
:
In
[
]
:
previou
chapter
:
introduct
naiv
bay
classifi
next
chapter
:
introduct
into
text
classif
use
naiv
bay
Â©
2011
-
2018
,
bernd
klein
,
bodenseo
;
design
by
denis
mitchinson
adapt
for
python-course.eu
by
bernd
klein
