python
tutori
:
histori
and
philosophi
of
python
python
cours
python
3
tutori
the
origin
of
pythonstart
with
python
:
the
interact
shellexecut
a
scriptindentationdata
type
and
variablesoperatorssequenti
data
type
:
list
and
stringslist
manipulationsshallow
and
deep
copydictionariesset
and
frozen
setsan
extens
exampl
use
setsinput
via
the
keyboardcondit
statementsloop
,
while
loopfor
loopsdiffer
between
inter
und
iterablesoutput
with
printformat
output
with
string
modulo
and
the
format
methodfunctionsrecurs
and
recurs
functionsparamet
pass
in
functionsnamespacesglob
and
local
variablesdecoratorsmemo
with
decoratorsread
and
write
filesmodular
program
and
modulespackag
in
pythonregular
expressionsregular
express
,
advancedlambda
oper
,
filter
,
reduc
and
maplist
comprehensioniter
and
generatorsexcept
handlingtest
,
doctest
,
unittestsobject
orient
programmingclass
and
instanc
attributesproperti
vs.
getter
and
settersinheritancemultipl
inheritancemag
method
and
oper
overloadingoop
,
inherit
exampleslotsclass
and
class
creationroad
to
metaclassesmetaclassesmetaclass
use
case
:
count
function
callsabstract
class
learn
from
histori
``
hegel
wa
right
when
he
said
that
we
learn
from
histori
that
man
can
never
learn
anyth
from
histori
.
''
(
georg
bernard
shaw
)
thi
websit
is
support
by
:
python
train
cours
freedom
in
program
``
python
is
an
experi
in
how
much
freedom
programm
need
.
too
much
freedom
and
nobodi
can
read
anoth
's
code
;
too
littl
and
express
is
endang
.
''
(
guido
van
rossum
,
13
aug
1996
)
thi
websit
is
free
of
annoy
ad
.
We
want
to
keep
it
like
thi
.
you
can
help
with
your
donat
:
the
need
for
donat
bernd
klein
on
facebook
search
thi
websit
:
thi
topic
in
german
/
deutsch
übersetzung
:
geschicht
und
philosophi
von
pythonpython
3thi
is
a
tutori
in
python3
,
but
thi
chapter
of
our
cours
is
avail
in
a
version
for
python
2.x
as
well
:
histori
and
philosophi
of
python
in
python
2.x
book
a
dedic
cours
the
goal
of
thi
websit
is
to
provid
educ
materi
,
allow
you
to
learn
python
on
your
own
.
nevertheless
,
it
is
faster
and
more
effici
to
attend
a
``
real
''
python
cours
in
a
classroom
,
with
an
experienc
trainer
.
So
whi
not
attend
one
of
the
live
python
cours
in
pari
,
london
,
berlin
,
munich
or
lake
constanc
by
bernd
klein
,
the
author
of
thi
tutori
?
onsit
train
cours
let
us
come
to
your
compani
or
institut
and
train
your
employe
,
as
we
've
done
it
mani
time
in
amsterdam
(
the
netherland
)
,
berlin
(
germani
)
,
bern
(
switzerland
)
,
basel
(
switzerland
)
,
zurich
(
switzerland
)
,
locarno
(
switzerland
)
,
den
haag
(
the
hagu
)
,
hamburg
(
germani
)
,
frankfurt
(
germani
)
,
toronto
(
canada
)
,
edmonton
(
canada
)
,
munich
(
germani
)
and
mani
other
citi
.
We
do
train
cours
in
england
,
switzerland
,
liechtenstein
,
austria
,
germani
,
franc
,
belgium
,
the
netherland
,
luxembourg
,
poland
,
UK
,
itali
and
other
locat
in
europ
and
in
canada
.
thi
way
you
will
get
a
perfect
train
up
to
your
need
and
it
will
be
extrem
cost
effici
as
well
.
contact
us
so
we
can
defin
and
find
the
best
cours
curriculum
to
meet
your
need
,
and
schedul
cours
session
to
be
held
at
your
locat
.
skill
python
programm
you
can
hire
skill
python
programm
or
even
a
skill
team
of
python
develop
to
work
exclus
on
your
project
.
contact
us
,
if
you
want
more
inform
.
quot
of
the
day
:
''
I
will
,
in
fact
,
claim
that
the
differ
between
a
bad
programm
and
a
good
one
is
whether
he
consid
hi
code
or
hi
data
structur
more
import
.
bad
programm
worri
about
the
code
.
good
programm
worri
about
data
structur
and
their
relationship
''
(
linux
torvald
)
data
protect
declar
data
protect
declar
next
chapter
:
start
with
python
:
the
interact
shell
histori
of
python
easi
as
abc
what
do
the
alphabet
and
the
program
languag
python
have
in
common
?
right
,
both
start
with
abc
.
If
we
are
talk
about
abc
in
the
python
context
,
it
's
clear
that
the
program
languag
abc
is
meant
.
abc
is
a
general-purpos
program
languag
and
program
environ
,
which
had
been
develop
in
the
netherland
,
amsterdam
,
at
the
cwi
(
centrum
wiskund
&
informatica
)
.
the
greatest
achiev
of
abc
wa
to
influenc
the
design
of
python
.
python
wa
conceptu
in
the
late
1980
.
guido
van
rossum
work
that
time
in
a
project
at
the
cwi
,
call
amoeba
,
a
distribut
oper
system
.
In
an
interview
with
bill
venners1
,
guido
van
rossum
said
:
``
In
the
earli
1980
,
I
work
as
an
implement
on
a
team
build
a
languag
call
abc
at
centrum
voor
wiskund
en
informatica
(
cwi
)
.
I
do
n't
know
how
well
peopl
know
abc
's
influenc
on
python
.
I
tri
to
mention
abc
's
influenc
becaus
I
'm
indebt
to
everyth
I
learn
dure
that
project
and
to
the
peopl
who
work
on
it
.
''
later
on
in
the
same
interview
,
guido
van
rossum
continu
:
``
I
rememb
all
my
experi
and
some
of
my
frustrat
with
abc
.
I
decid
to
tri
to
design
a
simpl
script
languag
that
possess
some
of
abc
's
better
properti
,
but
without
it
problem
.
So
I
start
type
.
I
creat
a
simpl
virtual
machin
,
a
simpl
parser
,
and
a
simpl
runtim
.
I
made
my
own
version
of
the
variou
abc
part
that
I
like
.
I
creat
a
basic
syntax
,
use
indent
for
statement
group
instead
of
curli
brace
or
begin-end
block
,
and
develop
a
small
number
of
power
data
type
:
a
hash
tabl
(
or
dictionari
,
as
we
call
it
)
,
a
list
,
string
,
and
number
.
''
comedi
,
snake
or
program
languag
So
,
what
about
the
name
``
python
''
:
most
peopl
think
about
snake
,
and
even
the
logo
depict
two
snake
,
but
the
origin
of
the
name
ha
it
root
in
british
humour
.
guido
van
rossum
,
the
creator
of
python
,
wrote
in
1996
about
the
origin
of
the
name
of
hi
program
language1
:
``
over
six
year
ago
,
in
decemb
1989
,
I
wa
look
for
a
'hobbi
'
program
project
that
would
keep
me
occupi
dure
the
week
around
christma
.
My
offic
...
would
be
close
,
but
I
had
a
home
comput
,
and
not
much
els
on
my
hand
.
I
decid
to
write
an
interpret
for
the
new
script
languag
I
had
been
think
about
late
:
a
descend
of
abc
that
would
appeal
to
unix/c
hacker
.
I
chose
python
as
a
work
titl
for
the
project
,
be
in
a
slightli
irrever
mood
(
and
a
big
fan
of
monti
python
's
fli
circu
)
.
''
the
zen
of
python
beauti
is
better
than
ugli
.
explicit
is
better
than
implicit
.
simpl
is
better
than
complex
.
complex
is
better
than
complic
.
flat
is
better
than
nest
.
spars
is
better
than
dens
.
readabl
count
.
special
case
are
n't
special
enough
to
break
the
rule
.
although
practic
beat
puriti
.
error
should
never
pass
silent
.
unless
explicitli
silenc
.
In
the
face
of
ambigu
,
refus
the
temptat
to
guess
.
there
should
be
one
--
and
prefer
onli
one
--
obviou
way
to
do
it
.
although
that
way
may
not
be
obviou
at
first
unless
you
're
dutch
.
now
is
better
than
never
.
although
never
is
often
better
than
*right*
now
.
If
the
implement
is
hard
to
explain
,
it
's
a
bad
idea
.
If
the
implement
is
easi
to
explain
,
it
may
be
a
good
idea
.
namespac
are
one
honk
great
idea
--
let
's
do
more
of
those
!
develop
step
of
python
guido
van
rossum
publish
the
first
version
of
python
code
(
version
0.9.0
)
at
alt.sourc
in
februari
1991
.
thi
releas
includ
alreadi
except
handl
,
function
,
and
the
core
data
type
of
list
,
dict
,
str
and
other
.
It
wa
also
object
orient
and
had
a
modul
system
.
python
version
1.0
wa
releas
in
januari
1994
.
the
major
new
featur
includ
in
thi
releas
were
the
function
program
tool
lambda
,
map
,
filter
and
reduc
,
which
guido
van
rossum
never
like
.
six
and
a
half
year
later
in
octob
2000
,
python
2.0
wa
introduc
.
thi
releas
includ
list
comprehens
,
a
full
garbag
collector
and
it
wa
support
unicod
.
python
flourish
for
anoth
8
year
in
the
version
2.x
befor
the
next
major
releas
as
python
3.0
(
also
known
as
``
python
3000
''
and
``
py3k
''
)
wa
releas
.
python
3
is
not
backward
compat
with
python
2.x
.
the
emphasi
in
python
3
had
been
on
the
remov
of
duplic
program
construct
and
modul
,
thu
fulfil
or
come
close
to
fulfil
the
13th
law
of
the
zen
of
python
:
``
there
should
be
one
--
and
prefer
onli
one
--
obviou
way
to
do
it
.
''
some
chang
in
python
3.0
:
print
is
now
a
function
view
and
iter
instead
of
list
the
rule
for
order
comparison
have
been
simplifi
.
e.g
.
a
heterogen
list
can
not
be
sort
,
becaus
all
the
element
of
a
list
must
be
compar
to
each
other
.
there
is
onli
one
integ
type
left
,
i.e
.
int
.
long
is
int
as
well
.
the
divis
of
two
integ
return
a
float
instead
of
an
integ
.
``
//
''
can
be
use
to
have
the
``
old
''
behaviour
.
text
vs.
data
instead
Of
unicod
vs.
8-bit
1
januari
13
,
2003
,
http
:
//www.artima.com/intv/pythonp.html
2
foreword
for
``
program
python
''
(
1st
ed
.
)
by
mark
lutz
,
o'reilli
next
chapter
:
start
with
python
:
the
interact
shell
©
2011
-
2018
,
bernd
klein
,
bodenseo
;
design
by
denis
mitchinson
adapt
for
python-course.eu
by
bernd
klein
