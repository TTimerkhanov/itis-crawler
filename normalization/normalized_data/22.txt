python
advanc
:
graph
in
python
:
networkx
python
advanc
cours
topic
advanc
topic
introduct
into
the
sy
modulepython
and
the
shellfork
and
fork
in
pythonintroduct
into
threadspip
,
pipe
and
``
99
bottl
of
beer
''
python
network
scannergraph
theori
and
graph
in
pythongraph
:
pygraphgraphsa
python
class
for
polynomi
functionscurri
in
pythonfinit
state
machin
in
pythontur
machin
in
pythonlevenshtein
distanceexampl
for
recurs
program
:
tower
of
hanoimastermind
/
bull
and
cowscreat
dynam
websit
with
wsgidynam
websit
with
mod_pythondynam
websit
with
pylonspython
,
sql
,
mysql
and
sqlitepython
score
modul
implement
graph
networkx
is
not
the
onli
modul
implement
graph
theori
into
python
,
but
belong
to
the
best
one
.
other
approach
includ
python-graph
and
pygraph
.
thi
websit
is
creat
by
:
python
train
cours
in
toronto
,
canada
On
site
train
in
europ
,
canada
and
the
US
.
thi
websit
is
free
of
annoy
ad
.
We
want
to
keep
it
like
thi
.
you
can
help
with
your
donat
:
the
need
for
donat
bernd
klein
on
facebook
search
thi
websit
:
classroom
train
cours
thi
websit
contain
a
free
and
extens
onlin
tutori
by
bernd
klein
,
use
materi
from
hi
classroom
python
train
cours
.
If
you
are
interest
in
an
instructor-l
classroom
train
cours
,
you
may
have
a
look
at
the
python
class
by
bernd
klein
at
bodenseo
.
©
kabliczech
-
fotolia.com
quot
of
the
day
:
''
for
instanc
,
on
the
planet
earth
,
man
had
alway
assum
that
he
wa
more
intellig
than
dolphin
becaus
he
had
achiev
so
much
-
the
wheel
,
new
york
,
war
and
so
on
-
whilst
all
the
dolphin
had
ever
done
wa
muck
about
in
the
water
have
a
good
time
.
but
convers
,
the
dolphin
had
alway
believ
that
they
were
far
more
intellig
than
man
for
precis
the
same
reason
''
(
dougla
adam
,
the
hitchhik
's
guid
to
the
galaxi
)
If
you
have
the
choic
work
with
python
2
or
python
3
,
we
recomend
to
switch
to
python
3
!
you
can
read
our
python
tutori
to
see
what
the
differ
are
.
data
protect
declar
data
protect
declar
previou
chapter
:
graph
:
pygraph
next
chapter
:
A
python
class
for
polynomi
function
networkx
overview
thi
chapter
is
still
not
finish
.
We
are
work
on
it
.
networkx
is
a
python
languag
softwar
packag
for
the
creation
,
manipul
,
and
studi
of
the
structur
,
dynam
,
and
function
of
complex
network
.
pygraphviz
is
a
python
interfac
to
the
graphviz
graph
layout
and
visual
packag
.
python
languag
data
structur
for
graph
,
digraph
,
and
multigraph
.
node
can
be
``
anyth
''
(
e.g
.
text
,
imag
,
xml
record
)
edg
can
hold
arbitrari
data
(
e.g
.
weight
,
time-seri
)
gener
for
classic
graph
,
random
graph
,
and
synthet
network
standard
graph
algorithm
network
structur
and
analysi
measur
basic
graph
draw
open
sourc
bsd
licens
well
test
:
more
than
1500
unit
test
addit
benefit
from
python
:
fast
prototyp
,
easi
to
teach
,
multi-platform
creat
a
graph
creat
an
empti
graph
our
first
exampl
of
a
graph
will
be
an
empti
graph
.
To
see
the
proper
mathemat
definit
of
a
graph
,
you
can
have
a
look
at
our
previou
chapter
graph
in
python
.
the
follow
littl
python
script
use
networkx
to
creat
an
empti
graph
:
import
networkx
as
nx
g=nx.graph
(
)
print
(
g.node
(
)
)
print
(
g.edg
(
)
)
print
(
type
(
g.node
(
)
)
)
print
(
type
(
g.edg
(
)
)
)
If
we
save
thi
script
as
``
empty.pi
''
and
start
it
,
we
get
the
follow
output
:
$
python3
empyty.pi
[
]
[
]
<
class
'list
'
>
<
class
'list
'
>
We
can
see
that
the
result
from
the
graph
method
node
(
)
and
edg
(
)
are
list
.
ad
node
to
our
graph
now
we
will
add
some
node
to
our
graph
.
We
can
add
one
node
with
the
method
add_nod
(
)
and
a
list
of
node
with
the
method
add_nodes_from
(
)
:
import
networkx
as
nx
g=nx.graph
(
)
#
ad
just
one
node
:
g.add_nod
(
``
a
''
)
#
a
list
of
node
:
g.add_nodes_from
(
[
``
b
''
,
''
c
''
]
)
print
(
``
node
of
graph
:
``
)
print
(
g.node
(
)
)
print
(
``
edg
of
graph
:
``
)
print
(
g.edg
(
)
)
ad
edg
to
our
graph
G
can
also
be
creat
or
increas
by
ad
one
edg
at
a
time
by
the
method
add_edg
(
)
,
which
ha
the
two
node
of
the
edg
as
the
two
paramet
.
If
we
have
a
tupl
or
a
list
as
the
edg
,
we
can
use
the
asterisk
oper
to
unpack
the
tupl
or
the
list
:
import
networkx
as
nx
g=nx.graph
(
)
g.add_nod
(
``
a
''
)
g.add_nodes_from
(
[
``
b
''
,
''
c
''
]
)
g.add_edg
(
1,2
)
edg
=
(
``
d
''
,
``
e
''
)
g.add_edg
(
*edg
)
edg
=
(
``
a
''
,
``
b
''
)
g.add_edg
(
*edg
)
print
(
``
node
of
graph
:
``
)
print
(
g.node
(
)
)
print
(
``
edg
of
graph
:
``
)
print
(
g.edg
(
)
)
In
our
previou
exampl
,
the
first
edg
consist
of
the
node
1
and
2
,
which
had
not
been
includ
in
our
graph
so
far
.
the
same
is
true
for
the
second
edg
with
the
tupl
(
``
d
''
,
``
e
''
)
.
We
can
see
that
the
node
will
be
automat
includ
as
well
into
the
graph
,
as
we
can
see
from
the
output
:
node
of
graph
:
[
'
a
'
,
1
,
'
c
'
,
'
b
'
,
'
e
'
,
'd
'
,
2
]
edg
of
graph
:
[
(
'
a
'
,
'
b
'
)
,
(
1
,
2
)
,
(
'
e
'
,
'd
'
)
]
We
can
add
a
bunch
of
edg
as
a
list
of
edg
in
the
form
of
2
tupl
.
#
ad
a
list
of
edg
:
g.add_edges_from
(
[
(
``
a
''
,
''
c
''
)
,
(
``
c
''
,
''
d
''
)
,
(
``
a
''
,1
)
,
(
1
,
''
d
''
)
,
(
``
a
''
,2
)
]
)
We
can
also
print
the
result
graph
by
use
matplotlib
:
nx.draw
(
G
)
plt.savefig
(
``
simple_path.png
''
)
#
save
as
png
plt.show
(
)
#
display
gener
path
graph
We
can
creat
a
path
graph
with
linearli
connect
node
with
the
method
path_graph
(
)
.
the
python
code
code
use
matplotlib
.
pyplot
to
plot
the
graph
.
We
will
give
detail
inform
on
matplotlib
at
a
later
stage
of
the
tutori
:
import
networkx
as
nx
import
matplotlib.pyplot
as
plt
g=nx.path_graph
(
4
)
print
(
``
node
of
graph
:
``
)
print
(
g.node
(
)
)
print
(
``
edg
of
graph
:
``
)
print
(
g.edg
(
)
)
nx.draw
(
G
)
plt.savefig
(
``
path_graph1.png
''
)
plt.show
(
)
the
creat
graph
is
an
undirect
linearli
connect
graph
,
connect
the
integ
number
0
to
3
in
their
natur
order
:
renam
node
sometim
it
is
necessari
to
renam
or
relabel
the
node
of
an
exist
graph
.
for
thi
purpos
the
function
relabel_nod
is
the
ideal
tool
.
networkx.relabel.relabel_nod
(
G
,
map
,
copy=tru
)
the
paramet
G
is
a
graph
,
the
map
ha
to
be
a
dictionari
and
the
last
paramet
is
option
.
If
copi
is
set
to
true
,
-
which
is
the
default
-
a
copi
will
be
return
,
otherwis
,
i.e
.
if
it
is
set
to
fals
,
the
node
of
the
graph
will
be
relabel
in
place
.
In
the
follow
exampl
we
creat
again
the
path
graph
with
the
node
label
from
0
to
3
.
after
thi
we
defin
a
dictionari
,
in
which
we
map
each
node
label
into
a
new
valu
,
i.e
.
citi
name
:
import
networkx
as
nx
import
matplotlib.pyplot
as
plt
g=nx.path_graph
(
4
)
citi
=
{
0
:
''
toronto
''
,1
:
''
london
''
,2
:
''
berlin
''
,3
:
''
new
york
''
}
h=nx.relabel_nod
(
G
,
citi
)
print
(
``
node
of
graph
:
``
)
print
(
h.node
(
)
)
print
(
``
edg
of
graph
:
``
)
print
(
h.edg
(
)
)
nx.draw
(
H
)
plt.savefig
(
``
path_graph_cities.png
''
)
plt.show
(
)
the
python
program
return
the
follow
output
:
node
of
graph
:
[
'toronto
'
,
'berlin
'
,
'new
york
'
,
'london
'
]
edg
of
graph
:
[
(
'toronto
'
,
'london
'
)
,
(
'berlin
'
,
'new
york
'
)
,
(
'berlin
'
,
'london
'
)
]
the
visual
graph
look
lik
thi
:
when
we
relabel
the
graph
G
in
our
previou
python
exampl
,
we
creat
a
new
graph
H
,
while
the
origin
graph
G
wa
not
chang
.
By
set
the
copi
paramet
flag
to
fals
,
we
can
relabel
the
node
in
place
without
copi
the
graph
.
In
thi
case
the
line
h=nx.relabel_nod
(
G
,
citi
)
will
be
chang
to
nx.relabel_nod
(
G
,
citi
,
copy=fals
)
thi
approach
might
lead
to
problem
,
if
the
map
is
circular
,
while
copi
is
alway
safe
.
the
map
from
the
node
of
the
origin
node
label
to
the
new
node
label
doe
n't
have
to
be
complet
.
An
exampl
of
a
partial
in-plac
map
:
import
networkx
as
nx
g=nx.path_graph
(
10
)
mapping=dict
(
zip
(
g.node
(
)
,
''
abcd
''
)
)
nx.relabel_nod
(
G
,
map
,
copy=fals
)
print
(
``
node
of
graph
:
``
)
print
(
g.node
(
)
)
onli
the
node
0
to
4
are
nenam
,
while
the
other
node
keep
the
numer
valu
,
as
we
can
see
in
the
output
from
the
program
:
$
python3
partial_relabelling.pi
node
of
graph
:
[
5
,
6
,
7
,
8
,
9
,
'
c
'
,
'
b
'
,
'
a
'
,
'
e
'
,
'd
'
]
the
map
for
the
node
can
be
a
function
as
well
:
import
networkx
as
nx
g=nx.path_graph
(
10
)
def
map
(
x
)
:
return
x
+
100
nx.relabel_nod
(
G
,
map
,
copy=fals
)
print
(
``
node
of
graph
:
``
)
print
(
g.node
(
)
)
the
result
:
$
python3
relabelling_with_function.pi
node
of
graph
:
[
107
,
106
,
103
,
108
,
109
,
104
,
105
,
100
,
102
,
101
]
previou
chapter
:
graph
:
pygraph
next
chapter
:
A
python
class
for
polynomi
function
©
2011
-
2018
,
bernd
klein
,
bodenseo
;
design
by
denis
mitchinson
adapt
for
python-course.eu
by
bernd
klein
