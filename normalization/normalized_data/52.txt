gui
program
with
python
:
layout
manag
in
tkinter
python
tkinter
cours
tkinter
tutori
say
hello
with
labelsmessag
widgetbuttonsvari
classesradiobuttonscheckboxesentri
widgetscanva
widgetssliderstext
widgetdialogslayout
managementbul
and
cow
/
mastermind
in
tkcreat
menusev
and
bind
definit
layout
in
comput
is
seen
as
the
process
of
calcul
the
posit
of
object
subject
to
a
number
of
constraint
.
``
almost
all
qualiti
improv
come
via
simplif
of
design
,
manufactur
...
layout
,
process
,
and
procedur
.
''
(
tom
peter
,
author
of
``
In
search
of
excel
''
)
thi
websit
is
creat
by
:
python
train
cours
in
toronto
,
canada
On
site
train
in
europ
,
canada
and
the
US
.
thi
websit
is
free
of
annoy
ad
.
We
want
to
keep
it
like
thi
.
you
can
help
with
your
donat
:
the
need
for
donat
bernd
klein
on
facebook
search
thi
websit
:
thi
topic
in
german
/
deutsch
übersetzung
:
layout-manag
und
layout-manag
in
tkinter
classroom
trainingstutori
thi
websit
contain
a
free
and
extens
onlin
tutori
by
bernd
klein
.
you
can
attend
one
of
hi
python
cours
in
pari
,
london
,
toronto
,
berlin
,
munich
,
hamburg
,
amsterdam
,
den
haag
(
the
hagu
)
or
lake
constanc
/
zurich
.
A
fast
and
effici
approach
to
learn
program
python
and
tkinter
consist
in
attend
a
classroom
train
cours
by
bernd
klein
at
bodenseo
.
(
c
)
kabliczech
-
fotolia.com
quot
of
the
day
:
A
comput
would
deserv
to
be
call
intellig
if
it
could
deceiv
a
human
into
believ
that
it
wa
human
.
alan
ture
graphic
user
interfac
A
graphic
user
interfac
(
gui
)
is
a
type
of
user
interfac
that
allow
user
to
interact
with
electron
devic
in
a
graphic
way
,
i.e
.
with
imag
,
rather
than
text
command
.
origin
interact
user
interfac
to
comput
were
not
graphic
,
they
were
text
orient
and
usual
consist
of
command
,
which
had
to
be
rememb
.
the
do
oper
system
from
microsoft
and
the
bourn
shell
under
linux
are
exampl
of
such
user-comput
interfac
.
data
protect
declar
data
protect
declar
previou
chapter
:
dialog
next
chapter
:
bull
and
cow
/
mastermind
in
TK
layout
manag
/
geometri
manag
introduct
In
thi
chapter
of
our
python-tkint
tutori
we
will
introduc
the
layout
manag
or
geometri
manag
,
as
they
are
sometim
call
as
well
.
tkinter
possess
three
layout
manag
:
pack
grid
place
the
three
layout
manag
pack
,
grid
,
and
place
should
never
be
mix
in
the
same
master
window
!
geometri
manag
serv
variou
function
.
they
:
arrang
widget
on
the
screen
regist
widget
with
the
underli
window
system
manag
the
display
of
widget
on
the
screen
arrang
widget
on
the
screen
includ
determin
the
size
and
posit
of
compon
.
widget
can
provid
size
and
align
inform
to
geometri
manag
,
but
the
geometri
manag
ha
alway
the
final
say
on
the
posit
and
size
.
pack
pack
is
the
easiest
to
use
of
the
three
geometri
manag
of
Tk
and
tkinter
.
instead
of
have
to
declar
precis
where
a
widget
should
appear
on
the
display
screen
,
we
can
declar
the
posit
of
widget
with
the
pack
command
rel
to
each
other
.
the
pack
command
take
care
of
the
detail
.
though
the
pack
command
is
easier
to
use
,
thi
layout
manag
is
limit
in
it
possibl
compar
to
the
grid
and
place
manger
.
for
simpl
applic
it
is
definit
the
manag
of
choic
.
for
exampl
simpl
applic
like
place
a
number
of
widget
side
by
side
,
or
on
top
of
each
other
.
exampl
:
from
tkinter
import
*
root
=
Tk
(
)
label
(
root
,
text=
''
red
sun
''
,
bg=
''
red
''
,
fg=
''
white
''
)
.pack
(
)
label
(
root
,
text=
''
green
grass
''
,
bg=
''
green
''
,
fg=
''
black
''
)
.pack
(
)
label
(
root
,
text=
''
blue
ski
''
,
bg=
''
blue
''
,
fg=
''
white
''
)
.pack
(
)
mainloop
(
)
fill
option
In
our
exampl
,
we
have
pack
three
label
into
the
parent
widget
``
root
''
.
We
use
pack
(
)
without
ani
option
.
So
pack
had
to
decid
which
way
to
arrang
the
label
.
As
you
can
see
,
it
ha
chosen
to
place
the
label
widget
on
top
of
each
other
and
centr
them
.
furthermor
,
we
can
see
that
each
label
ha
been
given
the
size
of
the
text
.
If
you
want
to
make
the
widget
as
wide
as
the
parent
widget
,
you
have
to
use
the
fill=x
option
:
from
tkinter
import
*
root
=
Tk
(
)
w
=
label
(
root
,
text=
''
red
sun
''
,
bg=
''
red
''
,
fg=
''
white
''
)
w.pack
(
fill=x
)
w
=
label
(
root
,
text=
''
green
grass
''
,
bg=
''
green
''
,
fg=
''
black
''
)
w.pack
(
fill=x
)
w
=
label
(
root
,
text=
''
blue
ski
''
,
bg=
''
blue
''
,
fg=
''
white
''
)
w.pack
(
fill=x
)
mainloop
(
)
pad
the
pack
(
)
manag
know
four
pad
option
,
i.e
.
intern
and
extern
pad
and
pad
in
x
and
y
direct
:
padx
extern
pad
,
horizont
the
code
for
the
window
abov
:
from
tkinter
import
*
root
=
Tk
(
)
w
=
label
(
root
,
text=
''
red
sun
''
,
bg=
''
red
''
,
fg=
''
white
''
)
w.pack
(
fill=x
,
padx=10
)
w
=
label
(
root
,
text=
''
green
grass
''
,
bg=
''
green
''
,
fg=
''
black
''
)
w.pack
(
fill=x
,
padx=10
)
w
=
label
(
root
,
text=
''
blue
ski
''
,
bg=
''
blue
''
,
fg=
''
white
''
)
w.pack
(
fill=x
,
padx=10
)
mainloop
(
)
padi
extern
pad
,
vertic
the
code
for
the
window
abov
:
from
tkinter
import
*
root
=
Tk
(
)
w
=
label
(
root
,
text=
''
red
sun
''
,
bg=
''
red
''
,
fg=
''
white
''
)
w.pack
(
fill=x
,
pady=10
)
w
=
label
(
root
,
text=
''
green
grass
''
,
bg=
''
green
''
,
fg=
''
black
''
)
w.pack
(
fill=x
,
pady=10
)
w
=
label
(
root
,
text=
''
blue
ski
''
,
bg=
''
blue
''
,
fg=
''
white
''
)
w.pack
(
fill=x
,
pady=10
)
mainloop
(
)
ipadx
intern
pad
,
horizont
.
In
the
follow
exampl
,
we
chang
onli
the
label
with
the
text
``
green
grass
''
,
so
that
the
result
can
be
easier
recogn
.
We
have
also
taken
out
the
fill
option
.
from
tkinter
import
*
root
=
Tk
(
)
w
=
label
(
root
,
text=
''
red
sun
''
,
bg=
''
red
''
,
fg=
''
white
''
)
w.pack
(
)
w
=
label
(
root
,
text=
''
green
grass
''
,
bg=
''
green
''
,
fg=
''
black
''
)
w.pack
(
ipadx=10
)
w
=
label
(
root
,
text=
''
blue
ski
''
,
bg=
''
blue
''
,
fg=
''
white
''
)
w.pack
(
)
mainloop
(
)
ipadi
intern
pad
,
vertic
We
will
chang
the
last
label
of
our
previou
exampl
to
ipady=10
.
from
tkinter
import
*
root
=
Tk
(
)
w
=
label
(
root
,
text=
''
red
sun
''
,
bg=
''
red
''
,
fg=
''
white
''
)
w.pack
(
)
w
=
label
(
root
,
text=
''
green
grass
''
,
bg=
''
green
''
,
fg=
''
black
''
)
w.pack
(
ipadx=10
)
w
=
label
(
root
,
text=
''
blue
ski
''
,
bg=
''
blue
''
,
fg=
''
white
''
)
w.pack
(
ipady=10
)
mainloop
(
)
the
default
valu
in
all
case
is
0
.
place
widget
side
by
side
We
want
to
place
the
three
label
side
by
side
now
and
shorten
the
text
slightli
:
the
correspond
code
look
like
thi
:
from
tkinter
import
*
root
=
Tk
(
)
w
=
label
(
root
,
text=
''
red
''
,
bg=
''
red
''
,
fg=
''
white
''
)
w.pack
(
padx=5
,
pady=10
,
side=left
)
w
=
label
(
root
,
text=
''
green
''
,
bg=
''
green
''
,
fg=
''
black
''
)
w.pack
(
padx=5
,
pady=20
,
side=left
)
w
=
label
(
root
,
text=
''
blue
''
,
bg=
''
blue
''
,
fg=
''
white
''
)
w.pack
(
padx=5
,
pady=20
,
side=left
)
mainloop
(
)
If
we
chang
left
to
right
in
the
previou
exampl
,
we
get
the
colour
in
revers
order
:
place
geometri
manag
the
place
geometri
manag
allow
you
explicitli
set
the
posit
and
size
of
a
window
,
either
in
absolut
term
,
or
rel
to
anoth
window
.
the
place
manag
can
be
access
through
the
place
method
.
It
can
be
appli
to
all
standard
widget
.
We
use
the
place
geometri
manag
in
the
follow
exampl
.
We
are
play
around
with
colour
in
thi
exampl
,
i.e
.
we
assign
to
everi
label
a
differ
colour
,
which
we
randomli
creat
use
the
randrang
method
of
the
random
modul
.
We
calcul
the
bright
(
grey
valu
)
of
each
colour
.
If
the
bright
is
less
than
120
,
we
set
the
foreground
colour
(
fg
)
of
the
label
to
white
otherwis
to
black
,
so
that
the
text
can
be
easier
read
.
import
tkinter
as
tk
import
random
root
=
tk.tk
(
)
#
width
x
height
+
x_offset
+
y_offset
:
root.geometri
(
``
170x200+30+30
''
)
languag
=
[
'python
'
,
'perl
'
,
'
c++
'
,
'java
'
,
'tcl/tk
'
]
label
=
rang
(
5
)
for
i
in
rang
(
5
)
:
ct
=
[
random.randrang
(
256
)
for
x
in
rang
(
3
)
]
bright
=
int
(
round
(
0.299*ct
[
0
]
+
0.587*ct
[
1
]
+
0.114*ct
[
2
]
)
)
ct_hex
=
``
%
02x
%
02x
%
02x
''
%
tupl
(
ct
)
bg_colour
=
'
#
'
+
``
''
.join
(
ct_hex
)
l
=
tk.label
(
root
,
text=languag
[
i
]
,
fg='white
'
if
bright
<
120
els
'black
'
,
bg=bg_colour
)
l.place
(
x
=
20
,
y
=
30
+
i*30
,
width=120
,
height=25
)
root.mainloop
(
)
grid
manag
the
first
geometri
manag
of
Tk
had
been
pack
.
the
algorithm
behaviour
of
pack
is
not
easi
to
understand
and
it
can
be
difficult
to
chang
an
exist
design
.
grid
wa
introduc
in
1996
as
an
altern
to
pack
.
though
grid
is
easier
to
learn
and
to
use
and
produc
nicer
layout
,
lot
of
develop
keep
use
pack
.
grid
is
in
mani
case
the
best
choic
for
gener
use
.
while
pack
is
sometim
not
suffici
for
chang
detail
in
the
layout
,
place
give
you
complet
control
of
posit
each
element
,
but
thi
make
it
a
lot
more
complex
than
pack
and
grid
.
the
grid
geometri
manag
place
the
widget
in
a
2-dimension
tabl
,
which
consist
of
a
number
of
row
and
column
.
the
posit
of
a
widget
is
defin
by
a
row
and
a
column
number
.
widget
with
the
same
column
number
and
differ
row
number
will
be
abov
or
below
each
other
.
correspondingli
,
widget
with
the
same
row
number
but
differ
column
number
will
be
on
the
same
``
line
''
and
will
be
besid
of
each
other
,
i.e
.
to
the
left
or
the
right
.
use
the
grid
manag
mean
that
you
creat
a
widget
,
and
use
the
grid
method
to
tell
the
manag
in
which
row
and
column
to
place
them
.
the
size
of
the
grid
doe
n't
have
to
be
defin
,
becaus
the
manag
automat
determin
the
best
dimens
for
the
widget
use
.
exampl
with
grid
from
tkinter
import
*
colour
=
[
'red
'
,
'green
'
,
'orang
'
,
'white
'
,
'yellow
'
,
'blue
'
]
r
=
0
for
c
in
colour
:
label
(
text=c
,
relief=ridg
,
width=15
)
.grid
(
row=r
,
column=0
)
entri
(
bg=c
,
relief=sunken
,
width=10
)
.grid
(
row=r
,
column=1
)
r
=
r
+
1
mainloop
(
)
previou
chapter
:
dialog
next
chapter
:
bull
and
cow
/
mastermind
in
TK
©
2011
-
2018
,
bernd
klein
,
bodenseo
;
design
by
denis
mitchinson
adapt
for
python-course.eu
by
bernd
klein
