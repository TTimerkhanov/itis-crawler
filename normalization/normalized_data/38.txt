python2
tutori
:
dynam
creat
class
with
type
python
cours
python
2
tutori
histori
and
philosophi
of
pythonwhi
python
?
interact
modeexecut
a
scriptstructur
with
indentationdata
type
and
variablesoperatorsinput
and
raw_input
via
the
keyboardcondit
statementswhil
loopsfor
loopsformat
outputoutput
with
printsequenti
data
typeslist
manipulationdictionariesset
and
frozen
setsshallow
and
deep
copyfunctionsrecurs
and
recurs
functionstest
,
doctest
,
unittestsdecoratorsmemo
with
decoratorspass
argumentsnamespacesglob
vs.
local
variablesfil
managementmodular
program
and
modulesintroduct
in
regular
expressionsregular
express
,
advancedlambda
oper
,
filter
,
reduc
and
maplist
comprehensiongeneratorsexcept
handlingobject
orient
programminginherit
exampleslotsclass
and
class
creationroad
to
metaclassesmetaclassesmetaclass
exampl
:
count
function
callsabstract
class
differ
between
class
and
type
To
put
it
in
a
nutshel
:
there
is
no
differ
,
but
they
use
to
be
differ
,
a
``
long
''
time
ago
!
thi
websit
is
support
by
:
linux
and
python
cours
as
well
as
in-hous
cours
thi
websit
is
free
of
annoy
ad
.
We
want
to
keep
it
like
thi
.
you
can
help
with
your
donat
:
the
need
for
donat
bernd
klein
on
facebook
search
thi
websit
:
thi
topic
in
german
/
deutsch
übersetzung
:
dynamisch
erzeugung
von
klassenpython
2.7thi
tutori
deal
with
python
version
2.7thi
chapter
from
our
cours
is
avail
in
a
version
for
python3
:
dynam
creat
class
with
typeclassroom
train
cours
thi
websit
contain
a
free
and
extens
onlin
tutori
by
bernd
klein
,
use
materi
from
hi
classroom
python
train
cours
.
If
you
are
interest
in
an
instructor-l
classroom
train
cours
,
you
may
have
a
look
at
the
python
class
by
bernd
klein
at
bodenseo
.
©
kabliczech
-
fotolia.com
quot
of
the
day
:
''
ani
program
is
onli
as
good
as
it
is
use
.
''
(
linu
torvald
)
If
you
have
the
choic
work
with
python
2
or
python
3
,
we
recomend
to
switch
to
python
3
!
you
can
read
our
python
tutori
to
see
what
the
differ
are
.
data
protect
declar
data
protect
declar
previou
chapter
:
slot
next
chapter
:
road
to
metaclass
class
and
class
creation
new-styl
vs.
old-styl
class
As
we
have
mention
in
earlier
chapter
,
there
is
a
subtleti
in
python2
,
which
can
be
the
sourc
of
great
confus
:
the
coexist
of
old-styl
and
new-styl
class
the
offici
python
refer
say
the
follow
:
``
new-styl
class
were
introduc
in
python
2.2
to
unifi
class
and
type
.
A
new-styl
class
neither
more
nor
less
than
a
user-defin
type
.
If
x
is
an
instanc
of
a
new-styl
class
,
then
type
(
x
)
is
the
same
as
x.class
.
''
the
next
paragraph
inform
us
about
the
motiv
for
introduc
new-styl
class
.
they
are
need
``
to
provid
a
unifi
object
model
with
a
full
meta-model
''
.
they
mention
as
other
``
immedi
benefit
''
the
``
abil
to
subclass
most
built-in
type
,
or
the
introduct
of
'descriptor
'
,
which
enabl
comput
properti
.
''
We
do
n't
want
to
dive
into
all
the
subtleti
of
old-styl
class
.
Do
n't
think
about
it
as
an
option
to
choos
from
:
there
should
be
onli
one
style
for
you
to
use
:
the
new-styl
class
!
there
is
onli
a
minor
syntact
differ
,
which
can
easili
be
overlook
:
A
class
can
onli
be
a
new-styl
class
,
if
it
inherit
from
object
or
from
anoth
new-styl
class
.
python
3
onli
ha
new-styl
class
.
#
old-styl
class
class
A
:
pass
class
B
(
A
)
:
pass
a
=
A
(
)
b
=
B
(
)
print
(
type
(
A
)
,
type
(
B
)
)
print
(
type
(
a
)
,
type
(
b
)
)
after
have
execut
the
python
code
abov
we
receiv
the
follow
:
(
<
type
'classobj
'
>
,
<
type
'classobj
'
>
)
(
<
type
'instanc
'
>
,
<
type
'instanc
'
>
)
#
new-styl
class
class
A
(
object
)
:
pass
class
B
(
A
)
:
pass
a
=
A
(
)
b
=
B
(
)
print
(
type
(
A
)
,
type
(
B
)
)
print
(
type
(
a
)
,
type
(
b
)
)
the
python
code
abov
return
the
follow
:
(
<
type
'type
'
>
,
<
type
'type
'
>
)
(
<
class
'__main__.a
'
>
,
<
class
'__main__.b
'
>
)
the
topic
we
discov
in
the
follow
will
onli
be
valid
,
if
you
defin
your
class
as
new-styl
class
.
behind
the
scene
:
relationship
between
class
and
type
In
thi
chapter
of
our
tutori
,
we
will
provid
you
with
a
deeper
insight
into
the
magic
happen
behind
the
scene
,
when
we
are
defin
a
class
or
creat
an
instanc
of
a
class
.
you
may
ask
yourself
:
``
Do
I
realli
have
to
learn
these
addit
detail
on
object
orient
program
in
python
?
''
most
probabl
not
,
or
you
belong
to
the
few
peopl
who
design
class
at
a
veri
advanc
level
.
first
,
we
will
concentr
on
the
relationship
between
type
and
class
.
when
you
have
defin
class
so
far
,
you
may
have
ask
yourself
,
what
is
happen
``
behind
the
line
''
.
We
have
alreadi
seen
,
that
appli
``
type
''
to
an
object
return
the
class
of
which
the
object
is
an
instanc
of
:
x
=
[
4
,
5
,
9
]
y
=
``
hello
''
print
(
type
(
x
)
,
type
(
y
)
)
thi
get
us
the
follow
result
:
(
<
type
'list
'
>
,
<
type
'str
'
>
)
If
you
appli
tpye
on
the
name
of
a
class
itself
,
you
get
the
class
``
type
''
return
.
print
(
type
(
list
)
,
type
(
str
)
)
thi
get
us
the
follow
result
:
(
<
type
'type
'
>
,
<
type
'type
'
>
)
thi
is
similar
to
appli
type
on
type
(
x
)
and
type
(
y
)
:
x
=
[
4
,
5
,
9
]
y
=
``
hello
''
print
(
type
(
x
)
,
type
(
y
)
)
print
(
type
(
type
(
x
)
)
,
type
(
type
(
y
)
)
)
the
abov
python
code
return
the
follow
:
(
<
type
'list
'
>
,
<
type
'str
'
>
)
(
<
type
'type
'
>
,
<
type
'type
'
>
)
A
user-defin
class
(
or
class
object
)
is
an
instanc
of
the
object
name
``
type
''
,
which
is
itself
a
class
.
So
,
we
can
see
,
that
class
are
creat
from
type
,
or
in
other
word
:
A
class
is
an
instanc
of
the
class
``
type
''
.
In
python3
there
is
no
differ
between
``
class
''
and
``
type
''
.
they
are
in
most
case
use
as
synonym
.
the
fact
that
class
are
instanc
of
a
class
``
type
''
allow
us
to
program
metaclass
.
We
can
creat
class
,
which
inherit
from
the
class
``
type
''
.
So
,
a
metaclass
is
a
subclass
of
the
class
``
type
''
.
instead
of
onli
one
argument
,
type
can
be
call
with
three
paramet
:
type
(
classnam
,
superclass
,
attributes_dict
)
If
type
is
call
with
three
argument
,
it
will
return
a
new
type
object
.
thi
provid
us
with
a
dynam
form
of
the
class
statement
.
``
classnam
''
is
a
string
defin
the
class
name
and
becom
the
name
attribut
;
``
superclass
''
is
a
list
or
tupl
with
the
superclass
of
our
class
.
thi
list
or
tupl
will
becom
the
base
attribut
;
the
attributes_dict
is
a
dictionari
,
function
as
the
namespac
of
our
class
.
It
contain
the
definit
for
the
class
bodi
and
it
becom
the
dict
attribut
.
let
us
have
a
look
at
a
simpl
class
definit
:
class
A
(
object
)
:
pass
x
=
A
(
)
print
(
type
(
x
)
)
the
previou
python
code
return
the
follow
output
:
<
class
'__main__.a
'
>
We
can
use
``
type
''
for
the
previou
class
defint
as
well
:
A
=
type
(
``
A
''
,
(
)
,
{
}
)
x
=
A
(
)
print
(
type
(
x
)
)
the
abov
code
return
the
follow
output
:
<
class
'__main__.a
'
>
{
'__doc__
'
:
none
,
'__module__
'
:
'__main__
'
,
'__dict__
'
:
<
attribut
'__dict__
'
of
'
A
'
object
>
,
'__weakref__
'
:
<
attribut
'__weakref__
'
of
'
A
'
object
>
}
gener
speak
,
thi
mean
,
that
we
can
defin
a
class
A
with
type
(
classnam
,
superclass
,
attributedict
)
when
we
call
``
type
''
,
the
call
method
of
type
is
call
.
the
call
method
run
two
other
method
:
new
and
init
:
type.__new__
(
typeclass
,
classnam
,
superclass
,
attributedict
)
type.__init__
(
cl
,
classnam
,
superclass
,
attributedict
)
the
new
method
creat
and
return
the
new
class
object
,
and
after
thi
the
init
method
initi
the
newli
creat
object
.
class
robot
(
object
)
:
counter
=
0
def
__init__
(
self
,
name
)
:
self.nam
=
name
def
sayhello
(
self
)
:
return
``
Hi
,
I
am
``
+
self.nam
def
rob_init
(
self
,
name
)
:
self.nam
=
name
robot2
=
type
(
``
robot2
''
,
(
)
,
{
``
counter
''
:0
,
``
__init__
''
:
rob_init
,
``
sayhello
''
:
lambda
self
:
``
Hi
,
I
am
``
+
self.nam
}
)
x
=
robot2
(
``
marvin
''
)
print
(
x.name
)
print
(
x.sayhello
(
)
)
y
=
robot
(
``
marvin
''
)
print
(
y.name
)
print
(
y.sayhello
(
)
)
print
(
x.__dict__
)
print
(
y.__dict__
)
We
receiv
the
follow
output
:
marvin
Hi
,
I
am
marvin
marvin
Hi
,
I
am
marvin
{
'name
'
:
'marvin
'
}
{
'name
'
:
'marvin
'
}
the
class
definit
for
robot
and
robot2
are
syntact
complet
differ
,
but
they
implement
logic
the
same
class
.
what
python
actual
doe
in
the
first
exampl
,
i.e
.
the
``
usual
way
''
of
defin
class
,
is
the
follow
:
python
process
the
complet
class
statement
from
class
robot
to
collect
the
method
and
attribut
of
robot
to
add
them
to
the
attributes_dict
of
the
type
call
.
So
,
python
will
call
type
in
a
similar
way
than
we
did
in
robot2
.
previou
chapter
:
slot
next
chapter
:
road
to
metaclass
©
2011
-
2018
,
bernd
klein
,
bodenseo
;
design
by
denis
mitchinson
adapt
for
python-course.eu
by
bernd
klein
